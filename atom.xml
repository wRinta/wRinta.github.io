<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-04-20T12:43:02.608Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>接口测试</title>
    <link href="http://example.com/2024/04/14/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/"/>
    <id>http://example.com/2024/04/14/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/</id>
    <published>2024-04-14T03:16:10.000Z</published>
    <updated>2024-04-20T12:43:02.608Z</updated>
    
    <content type="html"><![CDATA[<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>接口是系统或组件（组成某个系统的部件之一）之间的交互点，通过这些交互点可以进行数据的交互。</p><h2 id="接口的类型"><a href="#接口的类型" class="headerlink" title="接口的类型"></a>接口的类型</h2><p>按划分形式，大致分为3类</p><ol><li><p>按协议分，协议不同，接口类型不同。HTTP、TCP、UDP、FTP、USB</p></li><li><p>按语言分类。Java、Python、C++、PHP</p></li><li><p>按范围划分。系统之间和程序内部</p><ol><li><p>系统之间，内部系统之间、内部系统和外部系统之间</p></li><li><p>程序内部，方法（函数）和方法（函数）之间、类和类之间、模块和模块之间</p><p><img src="keep/source/images/star.gif" data-original="/2024/04/14/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/image-20240414113834004.png"></p></li></ol></li></ol><h2 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h2><p>对系统或组件之间的接口进行测试，主要是校验数据的交换、传递和控制管理过程，以及相互依赖关系。</p><p>数据是否正确？逻辑依赖关系是否正确？</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>模拟客户端向服务器发送请求，服务器接受请求后进行相应的业务处理，并向客户端返回响应数据，检查响应数据是否符合预期。</p><ul><li>数据（预期结果）<ul><li>从用户需求来</li></ul></li><li>怎样校验<ul><li>借助工具、代码模拟客户端，组织数据（没有前端也可以完成）</li></ul></li></ul><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>测试可以提前介入，提早发现Bug，符合质量控制前移的理念</li><li>可以发现一些页面操作发现不了的问题</li><li>接口测试低成本高收益（底层的一个Bug可以引发上层8个左右Bug，接口测试可以实现自动化）</li><li>从用户的角度对系统全方面进行全面的检测</li></ul><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ul><li>使用接口测试工具实现：JMeter、Fiddler、Postman</li><li>通过编写代码来实现：Python+Requests+Unittest</li><li>依赖断言去判断</li></ul><h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><p>HTTP（Hyper Text Transfer Protocol）：超文本传输协议，是一个基于请求与响应模式的、应用层的协议，也是互联网上最为广泛的一种协议</p><h2 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h2><ol><li>支持客户端&#x2F;服务器模式</li><li>简单快速</li><li>灵活</li><li>无连接</li><li>无状态</li></ol><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>URL（Uniform Resource Locator）统一资源定位符，是互联网上标准资源的地址。HTTP使用URL来建立连接和传输数据。</p><h3 id="URL格式"><a href="#URL格式" class="headerlink" title="URL格式"></a>URL格式</h3><p><code>http://www.itcast.cn:8080/news/index.html?uid=123&amp;page=1</code></p><p><code>http</code>：协议</p><p><code>www.itcast.cn</code>：域名（ip），定位网络环境中的一台主机</p><p><code>8080</code>：端口号，在网络主机上定位一个应用。没有指定端口号，默认跟随协议。</p><p><code>news/index.html</code>：资源路径，对应网页的源代码或网络中的一个数据资源。</p><p><code>uid=123&amp;page=1</code>：查询参数，可以有多个，用&amp;分割</p><ul><li>端口：<ul><li>http协议默认端口：80</li><li>https协议默认端口：443</li><li>mysql默认端口：3306</li><li>redis缓存数据库默认端口：6379</li><li>Oracle默认端口：1521</li></ul></li><li>资源路径：<ul><li>资源路径可以为空（没有），相当于”&#x2F;“</li><li>如果没有查询参数，资源路径从域名（端口）之和</li><li>如果有查询参数，资源路径为?之前，域名（端口）之和的所有内容</li></ul></li><li>查询参数：传参给网页源代码</li></ul><h2 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h2><ul><li>由客户端发送给服务器</li><li>规定了数据的语法格式</li></ul><p>由四部分组成：请求行、请求头、空行、请求体</p><p><img src="keep/source/images/star.gif" data-original="/2024/04/14/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/image-20240414201610448.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/14/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/image-20240414201834425.png"></p><h3 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h3><ul><li>作用：指定请求方法、请求资源</li><li>语法格式：请求方法（空格）URL（空格）协议版本（\n\r）</li><li>请求方法：<ul><li>GET：查询，没有请求体</li><li>POST：新增，有请求体，登录注册主要使用</li><li>PUT：修改，有请求体</li><li>DELETE：删除，无请求体</li></ul></li><li>URL：数据资源的定位符。协议:&#x2F;&#x2F;域名:端口&#x2F;资源路径?查询参数&amp;…</li><li>协议版本：<ul><li>http1.1&#x2F;http1.2&#x2F;http2.0</li><li>主要使用http1.1</li></ul></li></ul><h3 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h3><ul><li><p>作用：向服务器描述客户端（浏览器）的基本信息</p></li><li><p>语法：k: v</p><ul><li><p>User-Agent：向服务器描述浏览器的类型</p><p>Content-Type：向服务器描述请求体的数据类型</p></li></ul></li></ul><h3 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h3><ul><li>GET、DELETE请求方法没有请求体</li><li>POST、PUT请求方法有请求体</li><li>请求体的数据类型，收请求头中的Content-Type的值影响</li></ul><h2 id="HTTP相应"><a href="#HTTP相应" class="headerlink" title="HTTP相应"></a>HTTP相应</h2><ul><li>作用：由服务器回发给客户端</li><li>规定了服务器回发给客户端的数据语法格式</li></ul><p>组成：响应行（状态行）、响应头、空行、响应体。整体称为响应包&#x2F;响应报文</p><p><img src="keep/source/images/star.gif" data-original="/2024/04/14/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/image-20240414233356899.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/14/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/image-20240414233750677.png"></p><h3 id="响应行"><a href="#响应行" class="headerlink" title="响应行"></a>响应行</h3><ul><li>语法格式：响应版本（空格）状态码（空格）状态码描述\r\n</li><li>协议版本：http1.0&#x2F;http1.1&#x2F;http2.0</li><li>状态码：针对http请求响应的状态<ul><li>第一个数字定义了响应的类别<ul><li><strong>1xx：指示信息，表示请求已接受，继续处理，请求需要进一步访问</strong><ul><li>100 Continue</li><li>101 Switching Protocols</li></ul></li><li><strong>2xx：成功，表示请求已被成功接受、理解、接受</strong><ul><li><strong>200 OK</strong></li><li>201 Created</li><li>202 Accepted</li><li>203 Non-Authoritative Information</li><li>204 No Content</li><li>205 Reset Content</li><li>206 Partial Content</li></ul></li><li><strong>3xx：重定向，要完成请求必须进行更进一步的操作</strong><ul><li>300 Multiple Choices </li><li>301 Moved Permanently</li><li>302 Found</li><li>303 See Other</li><li>304 Not Modified</li><li>305 Use Proxy</li><li>307 Temporary Redirect</li></ul></li><li><strong>4xx：客户端错误，请求有语法错误或请求无法实现</strong><ul><li>400 Bad Request</li><li>401 Unauthorized</li><li>402 Payment Required</li><li><strong>403 Forbidden（请求的文件&#x2F;资源存在，但是没有访问权限）</strong></li><li><strong>404 Not Found（请求的资源&#x2F;文件不存在）</strong></li><li>405 Method Not Allowed</li><li>406 Not Acceptable</li><li>407 Proxy Authentication Required</li><li>408 Request Timeout</li><li>409 Conflict</li><li>410 Gone</li><li>411 Length Required</li><li>412 Precondition Failed</li><li>413 Request Entity Too Large</li><li>414 Request-URI Too Long</li><li>415 Unsupported Media Type</li><li>416 Requested Range Not Satisfiable</li><li>417 Expectation Failed</li></ul></li><li><strong>5xx：服务器端错误，服务器未能实现合法请求</strong> <ul><li>500 Internal Server Error</li><li>501 Not Implemented</li><li>502 Bad Gateway</li><li>503 Service Unavailable</li><li>504 Gateway Timeout</li><li>505 HTTP Version Not Supported</li></ul></li></ul></li></ul></li><li>状态描述：对状态码的说明</li></ul><h3 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h3><ul><li><p>作用：向客户端（浏览器）描述服务器的基本信息</p></li><li><p>语法：k: v</p><p>Content-Type：向客户端（浏览器）描述响应体的数据类型</p></li></ul><h3 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h3><ul><li>http的响应报文大多数有响应体，重定向没有响应体</li><li>响应体的数据类型，受响应头中Content-Type的值的影响</li><li>常见的类型：<ul><li>json类型</li><li>表单类型</li><li>图片类型</li></ul></li></ul><h2 id="传统风格接口"><a href="#传统风格接口" class="headerlink" title="传统风格接口"></a>传统风格接口</h2><p>对用户进行操作的相关接口，包括增删改查</p><p><img src="keep/source/images/star.gif" data-original="/2024/04/14/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/image-20240415104748417.png"></p><ul><li>使用GET、POST实现所有数据的增删改查操作</li><li>针对用户的某一个操作，URL不唯一，同一个用户操作对应不同的URL</li><li>状态码统一使用200</li></ul><p>优点：</p><ul><li><p>对开发的技术要求低。只需要GET、POST方法</p></li><li><p>代码实现灵活</p></li></ul><p>缺点：相同功能的实现代码不唯一</p><h2 id="RESTful风格接口"><a href="#RESTful风格接口" class="headerlink" title="RESTful风格接口"></a>RESTful风格接口</h2><p>一种软件架构风格、设计风格，不是标准。提供了一组设计原则和约束条件</p><p>REST（Representational State Transfer）的缩写，表现层状态转化。如果一个架构符合REST原则，称它为RESTful架构</p><ul><li>使用GET&#x2F;POST&#x2F;PUT&#x2F;DELETE分别表示增、查、改、删</li><li>使用一个url对应一个唯一的资源</li><li>状态码根据实际操作请求加以区分。（实际操作中都返回200，在响应体中描述成功&#x2F;失败）</li></ul><p><img src="keep/source/images/star.gif" data-original="/2024/04/14/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/image-20240415111939766.png"></p><h3 id="界定RESTful风格接口"><a href="#界定RESTful风格接口" class="headerlink" title="界定RESTful风格接口"></a>界定RESTful风格接口</h3><ol><li>请求方法：使用get、post、delete、put对应查、增、删、改</li><li>数据资源的定位符（url）是否唯一</li><li>在url中不使用动词，替换使用名词。结合请求方法，界定具体操作</li></ol><h3 id="RESTful架构特点"><a href="#RESTful架构特点" class="headerlink" title="RESTful架构特点"></a>RESTful架构特点</h3><ol><li>每一个URL代表一种资源</li><li>客户端和服务器之间传递这种资源的某种表现层</li><li>客户端通过四个HTTP动词，对服务器端资源进行操作，实现“表现层状态转化：</li><li>接口之间传递的数据<strong>最常用</strong>的格式为json</li></ol><h1 id="接口测试-1"><a href="#接口测试-1" class="headerlink" title="接口测试"></a>接口测试</h1><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol><li>需求分析，依据需求文档</li><li>接口文档解析，一般由开发人员编写接口文档</li><li>设计测试用例</li><li>执行测试用例：工具&#x2F;代码</li><li>接口缺陷管理与跟踪</li><li>生产测试报告</li><li>接口自动化持续集成（可选），一般是项目发布上线前大批量回归测试使用，或者新版本迭代使用</li></ol><h2 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h2><p>又称API文档，一般由开发编写，用来描述系统所提供接口信息的文档。大家都根据这个接口文档进行开发，并需要一直维护和遵守。</p><p>作用：</p><ul><li>方便前端和后端在开发的时候进行对接</li><li>在人员更迭时，方便新人快速接手项目</li><li>方便测试人员编写接口测试用例</li></ul><h3 id="展现形式"><a href="#展现形式" class="headerlink" title="展现形式"></a>展现形式</h3><ul><li>在线文档（html）</li><li>离线文档<ul><li>word</li><li>xmind</li><li>pdf</li><li>excel</li></ul></li></ul><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><ul><li>基本信息：<ul><li>接口描述</li><li>URL：（协议+域名）+资源路径</li><li>请求方法</li></ul></li><li>请求参数<ul><li>请求头</li><li>请求体（GET、DELETE没有）</li></ul></li><li>返回结果<ul><li>状态码、状态描述</li><li>响应体</li></ul></li></ul><h3 id="接口文档解析"><a href="#接口文档解析" class="headerlink" title="接口文档解析"></a>接口文档解析</h3><p><strong>http请求</strong></p><ul><li><p>请求行</p><ul><li><p>请求方法</p><p>URL</p><p>协议版本：默认http&#x2F;1.1</p></li></ul></li><li><p>请求头</p><ul><li>Content-Type</li></ul></li><li><p>请求体</p></li></ul><p><strong>http应答：</strong></p><ul><li>响应行<ul><li>状态码、状态描述</li></ul></li><li>响应头</li><li>响应体</li></ul><h1 id="接口设计用例"><a href="#接口设计用例" class="headerlink" title="接口设计用例"></a>接口设计用例</h1><ul><li>为什么写？<ul><li>防止漏测</li><li>管理当前工作进度，评估工作量</li></ul></li></ul><h2 id="接口测试点"><a href="#接口测试点" class="headerlink" title="接口测试点"></a>接口测试点</h2><h3 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h3><ul><li>单接口功能：手工测试中的单个业务模块，一般对应一个接口。借助工具、代码绕开前端界面，组织接口所需要的数据展开接口测试<ul><li>登录业务–&gt;登录接口</li><li>加入购物车业务–&gt;加入购物车接口</li><li>登录业务–&gt;登录接口</li><li>订单业务–&gt;订单接口</li><li>支付业务–&gt;支付接口</li></ul></li><li>业务场景功能：安装用户实际使用场景，梳理接口业务场景。组织业务场景时一般只做正向测试即可（与手工一致）。一般建议用最少的用例覆盖最多的业务场景。<ul><li>登录——搜索商品——加购物车——下单——支付</li></ul></li></ul><h3 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h3><ul><li>响应时长</li><li>吞吐量：TPS，单位时间内当前接口能处理的事务数</li><li>并发数</li><li>服务器资源使用率</li></ul><h3 id="安全测试"><a href="#安全测试" class="headerlink" title="安全测试"></a>安全测试</h3><ul><li>攻击安全：由专业安全测试工程师完成</li><li>业务安全<ul><li>敏感数据是否加密</li><li>SQL注入</li></ul></li></ul><h2 id="设计方法与思路"><a href="#设计方法与思路" class="headerlink" title="设计方法与思路"></a>设计方法与思路</h2><h3 id="与手工设计相同之处"><a href="#与手工设计相同之处" class="headerlink" title="与手工设计相同之处"></a>与手工设计相同之处</h3><p>接口用例设计的测试点与手工页面业务功能的测试点几乎完全一样</p><ul><li><p>手工功能测试用例设计要点</p><ul><li><p>测试页面布局、控件的位置是否精准</p></li><li><p>针对用户名的编辑框中的数据值展开测试</p><p>​正确手机号、手机号由特殊字符、手机不足11位…</p><p>针对密码的编辑框中的数据值展开测试</p><p>​正确密码、错误密码…</p><p>针对验证码的编辑框的数据值展开测试</p><p>​正确验证码、错误验证码…</p></li></ul></li><li><p>接口用例设计要点</p><ul><li>手工页面中的用户名编辑框，对应接口中key为username的value值。针对username的值展开测试</li><li>手工页面中的密码编辑框，对应接口中key为password的value值。针对password的值展开测试</li><li>手工页面中的用户名编辑框，对应接口中key为verify_code的value值。针对verify_code的值展开测试</li><li></li></ul></li></ul><h3 id="与手工设计不同之处"><a href="#与手工设计不同之处" class="headerlink" title="与手工设计不同之处"></a>与手工设计不同之处</h3><ol><li>手工测试写入到输入框数据是否正确，接口测试测参数对应的参数值是否正确</li><li>不单单只能对参数值进行测试，还针对参数进行测试<ol><li>正向参数<ol><li>必选参数：所有的必须（必填）都包含</li><li>组合参数：所有的必选+任意一个&#x2F;多个可选参数</li><li>全部参数：所有的必选+所有的可选参数</li></ol></li><li>反向参数<ol><li>多惨：多出一个&#x2F;多个必选参数（可以任意指定）</li><li>少参：缺少一个&#x2F;多个必选参数</li><li>无参：没有必选参数</li><li>错误参数：参数名输入错误</li></ol></li></ol></li></ol><h3 id="单接口测试用例"><a href="#单接口测试用例" class="headerlink" title="单接口测试用例"></a>单接口测试用例</h3><p>手工测试中每个业务功能，在接口测试中就对应唯一的一个接口。针对 该接口展开测试</p><p>接口测试用例文档要素：</p><p>编号、标题、用例名称、模块、优先级、预置条件、请求方法、URL、请求头、请求体（请求数据）</p><p><strong>登录测试点：</strong></p><ul><li>数值正向<ul><li>登录成功</li></ul></li><li>数据反向<ul><li>手机号为空</li><li>手机号有特殊字符</li><li>手机号不足11位</li><li>手机号超出11位</li><li>手机号未注册</li><li>密码错误</li><li>密码为空</li><li>密码有特殊字符</li><li>密码1位</li><li>密码100位</li></ul></li><li>参数正向<ul><li>必选参数（全部参数）</li></ul></li><li>参数反向<ul><li>多参</li><li>少参</li><li>无参</li><li>错误参数</li></ul></li></ul><h3 id="业务场景功能"><a href="#业务场景功能" class="headerlink" title="业务场景功能"></a>业务场景功能</h3><p>对应手工测试的业务流程，即接口调用的先后顺序，按照调用顺序展开接口测试。</p><ul><li><p>业务场景尽量遵循用户实际使用的场景，按顺序调用接口进行测试</p></li><li><p>尽量设计最少的测试用例去覆盖最多的业务场景</p><ul><li>登录成功——添加员工——查询员工——修改员工——再查询——删除员工——查询员工列表</li></ul></li><li><p>一般情况下，只需要测试正向的业务场景即可。</p></li><li><p>依赖关系：</p><ul><li>登录成功返回的token，被添加、查询、修改、删除所依赖</li><li>添加员工成功，返回员工id，被查询、修改、删除依赖</li></ul></li></ul><h1 id="Postman用法"><a href="#Postman用法" class="headerlink" title="Postman用法"></a>Postman用法</h1><h2 id="管理用例集"><a href="#管理用例集" class="headerlink" title="管理用例集"></a>管理用例集</h2><h2 id="Postman断言"><a href="#Postman断言" class="headerlink" title="Postman断言"></a>Postman断言</h2><p>Postman的断言使用js编写，写在Tests标签页里。Tests中的脚本在发送请求后执行，会把断言的结果最终显示在TestResults中</p><p><img src="keep/source/images/star.gif" data-original="/2024/04/14/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/image-20240416140045028.png"></p><h3 id="断言响应状态码"><a href="#断言响应状态码" class="headerlink" title="断言响应状态码"></a>断言响应状态码</h3><p><strong>Status code: Code is 200</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pm.<span class="title function_">test</span>(<span class="string">&quot;Status code is 200&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    pm.<span class="property">response</span>.<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">status</span>(<span class="number">200</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// pm:Postman的一个实例</span></span><br><span class="line"><span class="comment">// test()：Postman实例的一个方法，有两个参数。</span></span><br><span class="line">参数<span class="number">1</span>：<span class="string">&quot;Status code is 200&quot;</span> 断言完成后给出的提示信息</span><br><span class="line">    参数<span class="number">2</span>：<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;匿名函数的调用</span><br><span class="line">    pm.<span class="property">response</span>.<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">status</span>(<span class="number">200</span>);<span class="title class_">Postman</span>的响应结果中，有状态码<span class="number">200</span></span><br></pre></td></tr></table></figure><h3 id="断言响应体是否包含某个字符"><a href="#断言响应体是否包含某个字符" class="headerlink" title="断言响应体是否包含某个字符"></a>断言响应体是否包含某个字符</h3><p><strong>Response body: Contains string</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pm.<span class="title function_">test</span>(<span class="string">&quot;Body matches string&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    pm.<span class="title function_">expect</span>(pm.<span class="property">response</span>.<span class="title function_">text</span>()).<span class="property">to</span>.<span class="title function_">include</span>(<span class="string">&quot;string_you_want_to_search&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// pm:Postman的一个实例</span></span><br><span class="line"><span class="comment">// test()：Postman实例的一个方法，有两个参数。</span></span><br><span class="line">参数<span class="number">1</span>：<span class="string">&quot;Body matches string&quot;</span> 断言完成后给出的提示信息</span><br><span class="line">    参数<span class="number">2</span>：<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;匿名函数的调用</span><br><span class="line">    pm.<span class="title function_">expect</span>(pm.<span class="property">response</span>.<span class="title function_">text</span>()).<span class="property">to</span>.<span class="title function_">include</span>(<span class="string">&quot;string_you_want_to_search&quot;</span>);<span class="title class_">Postman</span>实例预期结果包含<span class="string">&quot;string_you_want_to_search&quot;</span>字符串</span><br></pre></td></tr></table></figure><h3 id="断言响应体是否等于某个字符串（对象）"><a href="#断言响应体是否等于某个字符串（对象）" class="headerlink" title="断言响应体是否等于某个字符串（对象）"></a>断言响应体是否等于某个字符串（对象）</h3><p><strong>Response body: is equal to a string</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pm.<span class="title function_">test</span>(<span class="string">&quot;Body is correct&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    pm.<span class="property">response</span>.<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">body</span>(<span class="string">&quot;response_body_string&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="断言json数据"><a href="#断言json数据" class="headerlink" title="断言json数据"></a>断言json数据</h3><p><strong>Response body: JSON value check</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pm.<span class="title function_">test</span>(<span class="string">&quot;Your test name&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> jsonData = pm.<span class="property">response</span>.<span class="title function_">json</span>();</span><br><span class="line">    pm.<span class="title function_">expect</span>(jsonData.<span class="property">value</span>).<span class="property">to</span>.<span class="title function_">eql</span>(<span class="number">100</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// var jsonData = pm.response.json();定义变量jsonData，值为json格式的响应体数据</span></span><br><span class="line"><span class="comment">// pm.expect(jsonData.value).to.eql(100);</span></span><br><span class="line">value指的是json中的值的key，<span class="title function_">eql</span>()为对应的值</span><br><span class="line">    value的值对应：success、code、message、data</span><br><span class="line">    to.<span class="title function_">eql</span>()的值对应：<span class="literal">true</span>、<span class="number">10000</span>、<span class="string">&quot;操作成功&quot;</span>、<span class="string">&quot;7ea56147-acf3-4527-a603-060a8ec52f34&quot;</span></span><br></pre></td></tr></table></figure><h3 id="断言响应头"><a href="#断言响应头" class="headerlink" title="断言响应头"></a>断言响应头</h3><p><strong>Response headers: Content-Type header check</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pm.<span class="title function_">test</span>(<span class="string">&quot;Content-Type is present&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    pm.<span class="property">response</span>.<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">header</span>(<span class="string">&quot;Content-Type&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// pm.response.to.have.header(&quot;Content-Type&quot;)</span></span><br><span class="line"><span class="title class_">Postman</span>响应结果中响应头有<span class="string">&quot;Content-Type&quot;</span></span><br></pre></td></tr></table></figure><p>增加value</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pm.<span class="title function_">test</span>(<span class="string">&quot;Content-Type is present&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    pm.<span class="property">response</span>.<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">header</span>(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Postman全局变量-环境变量"><a href="#Postman全局变量-环境变量" class="headerlink" title="Postman全局变量&amp;环境变量"></a>Postman全局变量&amp;环境变量</h2><ul><li>全局变量：全局唯一的，不可重复定义的变量</li><li>环境变量：<ul><li>一个变量只能属于某个环境，在某一个环境中变量不可重复定义</li><li>在环境与环境之间可以定义重复的变量</li><li>一个环境可以包含多个环境变量</li><li>常见的环境分类：开发环境、测试环境、生产环境</li></ul></li></ul><h2 id="设置变量"><a href="#设置变量" class="headerlink" title="设置变量"></a>设置变量</h2><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><ol><li>手动设置</li><li>代码设置<code>pm.globals.set(&quot;var_name&quot;,value);</code></li></ol><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><ol><li>手动设置</li><li>代码设置<code>pm.environment.set(&quot;var_name&quot;,value);</code></li></ol><h2 id="获取变量值"><a href="#获取变量值" class="headerlink" title="获取变量值"></a>获取变量值</h2><h3 id="全局变量-1"><a href="#全局变量-1" class="headerlink" title="全局变量"></a>全局变量</h3><ol><li>请求参数（查询参数、请求头、请求体）中获取：</li><li>代码中获取：<code>var value = pm.globals.get(&quot;var_name&quot;)</code></li></ol><h3 id="环境变量-1"><a href="#环境变量-1" class="headerlink" title="环境变量"></a>环境变量</h3><ol><li>请求参数中获取：</li><li>代码中获取：<code>var value = pm.environment.get(&quot;var_name&quot;)</code></li></ol><h2 id="Postman请求前置脚本"><a href="#Postman请求前置脚本" class="headerlink" title="Postman请求前置脚本"></a>Postman请求前置脚本</h2><p>假设一种场景：调某接口时，要输入时间戳（从1970.1.1 00：00：00~写在所经历的秒数），如果输入的时间戳的绝对值超过标准时间10分钟，不允许调用。</p><p>请求前置脚本在http请求发送之前会先执行。书写在“Pre-request Script”。在请求发送之前自动运行其中的代码。</p><p>携带时间戳向百度服务器发送请求。</p><p><img src="keep/source/images/star.gif" data-original="/2024/04/14/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/image-20240416175903891.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/14/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/image-20240416175920432.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/14/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/image-20240416175947689.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/14/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/image-20240416180101202.png"></p><p>内部过程</p><p><img src="keep/source/images/star.gif" data-original="/2024/04/14/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/image-20240416181057271.png"></p><h2 id="Postman关联"><a href="#Postman关联" class="headerlink" title="Postman关联"></a>Postman关联</h2><p>用来解决接口和接口之间调用的依赖关系，需要借助全局变量、环境变量来实现关联问题</p><p>A接口返回的数据供B接口使用：</p><ol><li>组织A接口http请求数据，发送A接口请求</li><li>获取A接口返回的响应数据，写入全局、环境变量中</li><li>组织B接口http请求，从变量中获取A返回的数据</li></ol><p>从天气接口获取城市</p><p><img src="keep/source/images/star.gif" data-original="/2024/04/14/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/image-20240416184811588.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/14/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/image-20240416191434170.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/14/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/image-20240416191415201.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/14/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/image-20240416191450921.png"></p><h1 id="测试报告"><a href="#测试报告" class="headerlink" title="测试报告"></a>测试报告</h1><h2 id="执行测试"><a href="#执行测试" class="headerlink" title="执行测试"></a>执行测试</h2><p>使用newman命令，运行导出的测试集脚本，打开cmd输入：</p><p><code>newman run 测试脚本文件 -e 环境变量文件 -d 测试数据文件 -r html --reporter-html-export report.html</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;接口&quot;&gt;&lt;a href=&quot;#接口&quot; class=&quot;headerlink&quot; title=&quot;接口&quot;&gt;&lt;/a&gt;接口&lt;/h1&gt;&lt;p&gt;接口是系统或组件（组成某个系统的部件之一）之间的交互点，通过这些交互点可以进行数据的交互。&lt;/p&gt;
&lt;h2 id=&quot;接口的类型&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="test" scheme="http://example.com/categories/test/"/>
    
    
    <category term="test" scheme="http://example.com/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>项目实战演练</title>
    <link href="http://example.com/2024/04/07/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E6%BC%94%E7%BB%83/"/>
    <id>http://example.com/2024/04/07/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E6%BC%94%E7%BB%83/</id>
    <published>2024-04-07T12:27:25.000Z</published>
    <updated>2024-04-16T06:35:13.446Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="99d596309e9c22868033f83ecdaabd5f4bc96d42399b46cc3ae460e8bf49b112">f58a0006b15efc4af1859defe635348894f92579ba7dd8952c6dd5f6d61ab193848cd94d18010a2d65b9141b0f47184430ace0360ef4c11f206d05d3f7c5954b9bceff237a8ebe38b5393666faa9312140b66d8a1fa1f586562d63ecd19d8e887a97b7fec059c4bf1a669ba037481b1e33df2ba056136b89e9c60be2ee57eef44e52abdb7bd2ae895d14d5fd53f8a26712d72c893e4fbf5adf630e75fad673c5f1357f036fa8999b715e24da2abf6c7f71aac467f56a70497557bfeb277558c10fe9ce0ec8f99a5eb042cada69096c63b0cd9aeb22d9528f7566f503059732837b508a5ede4d2231d4b32a4330a0e605f38bb2be0f67782106d9e4d7927571fac3f769cb8b6966be9fa2b2fb858348ddd2a78f046e1a136ae55c22e7b39dff68276691f24fdba53edfc5065e61dbe31c42d97e1478f4aa3ca9b40b0e8c8c4136cf38970902a9692d7041311112b7062cf0eccde7d67378b1aef2ea122dc53aacbeaae3d1fbc88dc5d648fd7ce3f5285ba00a0965c068b3d6dfdf3a5f5dc741af5e27669b5fb5af0beebceb3c4fd0dd1480eabec8248576f8ae82248361d0ee5eaf4686a557edddfe8fb994c5d03d4f1c688712078eb9ae9963e55266448862e3b87dd4e13d55c27d54abe4bbceccc2e483e2acf7b145490f91577fb33ca23de059434d81c299424aceafaf10aa864cae0684c0ae1f5ca61995e26b4016ac63336cbf7453d138d1c82bea4dbf78db0c0099fd480cf477eba42341932d8aefaeefb7ab6ae66c71f03ce6305d3092b5449fc841439d2a27bb7ab56c7b1b78621bd2da20baf57f85739b3d01b9832091ee2b792372228ed0eb3dbc34870e5a5e7453208f0adb9ed7a81ed9a8ecf8c7fa8b3025d942a0c00ffcadc4a927d7e9abe8320f7a3d4cf0d8f54a503822eaa5d92170741a259b75064ace183144df406d9958c7ff5529445f19c5828d8c0c370197f937ed587714574d28e71471c7e7c7cb9df936eee33c15168df93ea72951a86b9f3f125d5d695b9bf42817034eb7360fa9becd2c95547c52d07f390e44049f5fbba0df0e9f9e1234b6f8a124cd4e2bcc6ac992955cb8d0583f961b2f7ca33ac6aae3ce22520a5d1f45f17aa3def3eccd6deaa8ca37b122d148040bdd430943b9e6322408129360c5dc38e5f88f28b9a79c1ce7115c8ab84faa8c5bf79746ab8a8485c29ed2c8c1b167ea6afc85a1328ee6adc0d8bb3d94f048c5d81cf096ef1cd418f15d1a49666ae98b951172c2ba1796f219acc579b7727dcb8fe2d99d06dda84b6140f0505db2bfb60afb66d3e262e943a0fb0940383ca88a73734b57473b7cd95774c97fc51db506f05536f9bda589bd04e7e5c1af86d77093cdaa5c29841268bc0c96c9b75bcbd0e154b493ff859b7c86d51eb1d66b31415e00dcd000180baf1ed9c092a53b66fb9ecb9577981b05ef5c72a3fea2e3e22d30c0149e30ab140b02ddcc13d2305fae10f6957de36493d02306a443cf167726ad6b66ca5c6c91538cc4c234c93254064c17b4040fdb0525c8177e4d9834eb28520617e6189ec877bb680b1953d8a17c84054efc011d71b68d9cf7a83c7770bb5c529c6ae33752d42af5a60eaef0386598b3c0f6d55419c5b4df53fd93ad2ce57a9b4325268ecc8ccb633e50fe59fb037b06e8ea56fa5f468a8cf204716a8e6fae94dad2d57021e02332e0110867c233201cc639b7781740eb558234322690509f51f22f73c1c608332a9c378359d7e3bcdfac467feb41bfad54cb49fc23d24e5b6c44bd65967a42938c41d04c3838ae03405f5264d19eae49fffdd5dd3210648e994c14498de360299bea9eeb826578abd782d648894ce57680baad28422196eeab322fd61bd7f0bc54123e8d25b0a711c2833d8dee2299cd07a0497bdf6d43bbd3e453cad32b8119d1e05c0823e19dc2493b87642f0b66d857fcff01d33b0803eb714b809afef73bdfbf89c3924b2be0abb9567e1acfd65bf6949ae4e20abfd8b720d7f87dcb6e87f72482a246e91d9ad3e0477192b6825ebed29616c6b2862de9974479d26c6a1632768073255d8fdbf8c7047cb40441f153607536333ba3204d1ad804192300d0b0aa9e4eaba5a198d12dd8c1a7700f0763af9b19906a3e963bd2801647c35a7e408757d6c3ef345d7cdada00463178130feb768f3ed2040c9c3c4466ba1a162de228b9a6916b858218b94594da55b15b94ac08b990a1e912ee39ac92097a7309203680ae6674c0c6fc8d591ee9ebedc09c821db9e4e2ff511db243b9c304193b824d43d292a2e1853d5256fad7ee599d0075fcce8e84c679ec66ea5721bc933bec2197794109df94dc1dd9f0738a7903b42ef0a03a6d4d6ef02400d64371534240ba14099307c2b3266d1f1205e7044eb07f05ad2b4b938b88c64d07fc2f1b8736c078279cc5453aa1d77d50a3e36fdbb5b7c8934700a79d6baf8d4b93a0c5986d89c70710b2532a0ec186018e9c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="software test" scheme="http://example.com/categories/software-test/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux基础</title>
    <link href="http://example.com/2024/04/05/Linux%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2024/04/05/Linux%E5%9F%BA%E7%A1%80/</id>
    <published>2024-04-05T11:45:10.000Z</published>
    <updated>2024-04-19T12:59:37.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux系统目录结构"><a href="#Linux系统目录结构" class="headerlink" title="Linux系统目录结构"></a>Linux系统目录结构</h1><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/tree.png"></p><h2 id="目录说明"><a href="#目录说明" class="headerlink" title="目录说明"></a>目录说明</h2><ol><li>&#x2F;bin 存放常用命令，命令就是一个可执行程序，cd、ls等都是命令</li><li>&#x2F;lib 存放库文件例如，printf是一个库函数，它的实现在c库中。c库就存放在lib下。</li><li>&#x2F;home 所有普通用户的家目录</li><li>&#x2F;root 管理员用户的家目录管理员的家目录并不在&#x2F;home下面，而是在&#x2F;root。</li><li>&#x2F;boot 系统内核及启动有关的文件</li><li>&#x2F;etc 存放系统的配置文件</li><li>&#x2F;proc 虚拟文件系统目录，以进程为单位存储内存的映射</li><li>&#x2F;usr 存放系统应用程序及文档</li><li>&#x2F;dev 存放设备文件</li><li>&#x2F;mnt 临时挂载点</li><li>&#x2F;tmp 存放各种临时文件，是所有用户均可访问的地点</li><li>&#x2F;var 存放系统运行中常改变的文件，如系统日志</li></ol><h2 id="家目录"><a href="#家目录" class="headerlink" title="家目录"></a>家目录</h2><p>在&#x2F;home文件夹下创建stu1和stu2两个文件夹，把stu1创建的所有文件都存放到stu1文件夹下，这个文件夹中的内容只能stu1可以看到或操作，把stu2创建的文件都存放到stu2文件夹下，这个文件夹中的内容只能stu2可以看到或操作。每一个普通用户都会在&#x2F;home下面创建属于自己的文件夹，这个文件夹以该用户的名字来命名。后续，用户也可以在各自的文件夹下再创建其他的文件夹来存放其他的文件。每个用户都不能访问别的用户的目录以及目录下的子文件。起到了一个保护作用。如果是用户stu1，那么它的家目录是&#x2F;home&#x2F;stu1；如果是用户stu2，那么它的家目录是&#x2F;home&#x2F;stu2。用户不同，家目录也不同。</p><h1 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home <span class="comment">#切换至home目录，/为根目录</span></span><br><span class="line"><span class="built_in">cd</span> /home/rinta <span class="comment">#第一个/为根目录</span></span><br><span class="line"><span class="built_in">cd</span> rinta <span class="comment">#进入当前文件夹的下一级rinta文件夹</span></span><br><span class="line"><span class="built_in">pwd</span> 显示当前所在目录</span><br><span class="line"><span class="comment"># 路径以根目录开头为绝对路径</span></span><br><span class="line"><span class="built_in">cd</span> .. <span class="comment">#回到上一级目录</span></span><br><span class="line"><span class="built_in">cd</span> <span class="comment">#会直接切换到当前用户的家目录</span></span><br><span class="line"><span class="built_in">cd</span> ~ <span class="comment">#回到用户的home目录</span></span><br><span class="line"><span class="built_in">cd</span> - <span class="comment">#返回到上次执行cd命令的目录，即切换之前所在的目录</span></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240405214032948.png"></p><h1 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> <span class="comment">#显示当前目录下有哪些目录</span></span><br><span class="line"><span class="built_in">ls</span> -a <span class="comment">#显示当前目录下所有的目录,会显示隐形目录</span></span><br><span class="line"><span class="built_in">ls</span> -l <span class="comment">#显示文件的详细信息</span></span><br><span class="line"><span class="built_in">ls</span> -lh <span class="comment">#更人性化的方式显示</span></span><br><span class="line"><span class="built_in">ls</span> -lah <span class="comment">#所有的文件人性化的显示出来</span></span><br><span class="line">ll <span class="comment">#相当于ls -l</span></span><br><span class="line">ll -h <span class="comment">#人性化的显示</span></span><br><span class="line">ll -a<span class="comment">#显示所有文件</span></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240405214306028.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240405214331977.png"></p><h2 id="ls命令权限介绍"><a href="#ls命令权限介绍" class="headerlink" title="ls命令权限介绍"></a>ls命令权限介绍</h2><p>*<strong>匹配任意字符，#匹配一个字符，[]匹配范围！</strong></p><p>*<strong>匹配任意字符，#匹配一个字符，[]匹配范围！</strong></p><p>*<strong>匹配任意字符，#匹配一个字符，[]匹配范围！</strong></p><p>*<strong>匹配任意字符，#匹配一个字符，[]匹配范围！</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">drwxrwx-x <span class="comment">#d代表文件夹，-代表文件</span></span><br><span class="line">rwx rwx r-x <span class="comment">#三组，r：可读，w：可写，x：可执行，-：表示非</span></span><br><span class="line"><span class="comment"># 文件拥有者的权限 文件拥有组的权限 其他用户对该文件的权限</span></span><br><span class="line"><span class="built_in">ls</span> dir2 <span class="comment">#查看dir2目录下的内容</span></span><br><span class="line"><span class="built_in">ls</span> / <span class="comment">#查看根目录下的内容</span></span><br><span class="line"><span class="built_in">ls</span> -la / <span class="comment">#查看根目录下所有的内容</span></span><br><span class="line"><span class="built_in">ls</span> ../.. <span class="comment">#查看上级目录的上级目录</span></span><br><span class="line"><span class="built_in">ls</span> a* <span class="comment"># *匹配任意字符，查看以a开头的内容</span></span><br><span class="line"><span class="built_in">ls</span> a? <span class="comment"># ?代表一个任意字符</span></span><br><span class="line"><span class="built_in">ls</span> [abc]d <span class="comment">#d前面的字母匹配abc中其中一个</span></span><br><span class="line"><span class="built_in">ls</span> [a-x]d <span class="comment">#d前面的字母匹配a-x中其中一个</span></span><br><span class="line"><span class="built_in">ls</span> \*x <span class="comment">#查看*x，\为转义字符</span></span><br><span class="line"><span class="built_in">ls</span> *txt <span class="comment">#查看当前目录下所有以txt结尾的文件</span></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240405214441613.png"></p><h1 id="mkdir命令"><a href="#mkdir命令" class="headerlink" title="mkdir命令"></a>mkdir命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> pic <span class="comment">#在当前目录下创建文件夹pic</span></span><br><span class="line"><span class="built_in">mkdir</span> /home/admin/video <span class="comment">#绝对路径创建，要保证路径存在</span></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="comment">#创建的目录父目录不存在，直接创建(递归创建)</span></span><br><span class="line"><span class="built_in">mkdir</span> dir1 dir2 <span class="comment">#在当前目录创建dir1、dir2两个文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> 当前目录的文件夹/dir3 <span class="comment">#在目标路径下创建dir3</span></span><br><span class="line"><span class="built_in">mkdir</span> admin/demo1/dir4 dir5 <span class="comment">#dir4在demo1下，dir5在当前目录下</span></span><br><span class="line"><span class="built_in">mkdir</span> demo2/dir6 demo2/dir7 <span class="comment">#在demo2下创建dir6、dir7</span></span><br><span class="line"><span class="built_in">mkdir</span> demo3/&#123;dir8,dir9&#125; <span class="comment">#在demo3下创建dir8、dir9</span></span><br><span class="line"><span class="built_in">mkdir</span> .dir10 <span class="comment">#创建隐藏文件夹dir10</span></span><br><span class="line"><span class="comment"># .代表当前目录，..代表上一级目录</span></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240405215742288.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240405220244325.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240405222930238.png"></p><h1 id="touch命令"><a href="#touch命令" class="headerlink" title="touch命令"></a>touch命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> file1.txt <span class="comment">#创建单个文件</span></span><br><span class="line"><span class="built_in">touch</span> file2 file3 file 4 <span class="comment">#创建多个文件</span></span><br><span class="line"><span class="built_in">touch</span> dir1/file1.txt 在规定路径下创建文件</span><br><span class="line"><span class="comment">#touch要求在存在的目录下创建文件</span></span><br><span class="line"><span class="built_in">touch</span> .abc <span class="comment">#创建隐藏文件abc</span></span><br><span class="line">gedit file1.txt <span class="comment">#记事本修改文件</span></span><br><span class="line">gedit file5.txt <span class="comment">#不存在则新建file5并编辑</span></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240405223339439.png"></p><p><code>gedit</code>打开记事本<img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240405223634659.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240405223913763.png"></p><h1 id="rm命令"><a href="#rm命令" class="headerlink" title="rm命令"></a>rm命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> file1 <span class="comment">#删除file1</span></span><br><span class="line"><span class="built_in">rm</span> dir1 -r <span class="comment">#删除目录dir1</span></span><br><span class="line"><span class="built_in">rm</span> * -r <span class="comment">#将目录里的所有目录、文件删掉（隐藏文件除外）,如果目录里面有文件夹但是没有-r会报错</span></span><br><span class="line"><span class="built_in">rm</span> .abc <span class="comment">#删除隐藏文件abc</span></span><br><span class="line"><span class="built_in">rmdir</span> <span class="comment">#删除文件夹</span></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240405224203671.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240405224337791.png"></p><h1 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctrl+c <span class="comment">#结束命令（命令敲错了常用）</span></span><br><span class="line"><span class="built_in">command</span> [-options] [parameter] <span class="comment">#命令格式</span></span><br><span class="line"><span class="built_in">command</span> --<span class="built_in">help</span> <span class="comment">#不知道命令怎么使用，窗口自带的命令不能使用，如pwd</span></span><br><span class="line">man <span class="built_in">pwd</span> <span class="comment">#查看命令说明文档</span></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240405224802900.png"></p><h1 id="cp命令"><a href="#cp命令" class="headerlink" title="cp命令"></a>cp命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> 1.txt dir2 <span class="comment">#将1.txt复制到dir2目录下</span></span><br><span class="line"><span class="built_in">cp</span> 1.txt 2.txt <span class="comment">#将1.txt复制到当前目录下并命名为2.txt</span></span><br><span class="line"><span class="built_in">cp</span> -a 1.txt 3.txt <span class="comment">#复制文件并保持原有属性,原有属性是指文件或目录的元数据，包括文件权限、所有者、所属组、创建时间、修改时间等信息。使用`cp -a`命令可以保持原有文件的所有这些属性。</span></span><br><span class="line"><span class="built_in">cp</span> dir1 dir2 -r <span class="comment">#复制目录和目录下的所有子目录与文件</span></span><br><span class="line"><span class="built_in">cp</span> 1.txt 2.txt -i <span class="comment">#交互式复制，覆盖会让用户确认</span></span><br><span class="line"><span class="built_in">cp</span> ~/dir1 ~/dir2 -r <span class="comment">#拷贝指定目录至指定目录下</span></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240405232256405.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240405232625568.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240405232702421.png"></p><h1 id="mv命令"><a href="#mv命令" class="headerlink" title="mv命令"></a>mv命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> 1.txt abc.txt <span class="comment">#移动到当前目录下并重命名（类似于重命名文件）</span></span><br><span class="line"><span class="built_in">mv</span> abc.txt dir1 <span class="comment">#将abc文件移动至dir1</span></span><br><span class="line"><span class="built_in">mv</span> abc.txt dir1/abcrename.txt <span class="comment">#将abc文件移动至dir1并改名为abcrename</span></span><br><span class="line"><span class="built_in">mv</span> dir1 dir2 <span class="comment">#移动到当前目录下并重命名（类似于重命名文件夹）</span></span><br><span class="line"><span class="built_in">mv</span> dir2 dir3 <span class="comment">#将dir2移动到dir3目录下</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240406111141410.png"></p><h1 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#重定向</span></span><br><span class="line"><span class="built_in">ls</span> &gt;1.txt <span class="comment">#1.txt不存在则创建，存在则在内部内容编辑覆盖。ls返回的结果放入1.txt文件中</span></span><br><span class="line"><span class="built_in">ls</span> &gt;&gt;1.txt <span class="comment">#1.txt不存在则创建，存在则在内部内容编辑。ls返回的结果追加在1.txt文件中</span></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240406111343209.png"></p><h1 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat 1.txt #查看1.txt的内容</span><br><span class="line">cat 1.txt 2.txt #按顺序显示12的文件内容</span><br><span class="line">cat 1.txt 2.txt &gt; 3.txt #将1.tx和2.txt的内容合并到3.txt</span><br></pre></td></tr></table></figure><h1 id="more命令"><a href="#more命令" class="headerlink" title="more命令"></a>more命令</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">more 1.txt #查看文件1.txt，从文件开始显示，space向下翻一页，b往回翻一页，enter向下翻一行，按q键退出</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240406112100063.png"></p><h1 id="head"><a href="#head" class="headerlink" title="head"></a>head</h1><p>用于显示文件的开头内容。默认情况下，<strong>它显示文件的开头 10 行内容</strong></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240419170620948.png"></p><ul><li><code>head -15</code>查看前15行内容<ul><li><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240419170709848.png"></li></ul></li></ul><h1 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h1><p>用于显示文件的末尾内容。默认情况下，<strong>它显示文件的最后 10 行内容</strong></p><ul><li><code>-n &lt;num&gt;</code>：显示文件末尾的 <code>&lt;num&gt;</code> 行内容，例如 <code>-n 20</code> 表示显示最后 20 行。</li><li><code>-f</code>：实时跟踪文件的增长，在文件末尾显示新添加的内容，非常适用于查看日志文件。可以和数字组合，获取动态信息的某几行内容</li><li><code>-c &lt;num&gt;</code>：显示文件末尾的 <code>&lt;num&gt;</code> 字节内容，例如 <code>-c 1000</code> 表示显示最后 1000 字节。</li><li><code>-q</code>：禁止显示文件名。</li></ul><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240406120045126.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240406120300766.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240406120318737.png"></p><h2 id="案例：动态查看"><a href="#案例：动态查看" class="headerlink" title="案例：动态查看"></a>案例：动态查看</h2><p>模拟日志内容不断更新的场景</p><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240419171241982.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240419171350558.png"></p><h1 id="管道："><a href="#管道：" class="headerlink" title="管道：|"></a>管道：|</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">command1 | command2:command1的返回结果由command2处理</span><br><span class="line"><span class="built_in">ls</span> -al / | more <span class="comment">#以more查看文件的方式查看/目录下的内容，b按钮没用，只能往下翻</span></span><br><span class="line">ps aux | grep <span class="string">&quot;firefox&quot;</span> <span class="comment"># 用ps命令查看系统中运行的进程并通过管道命令传递给grep来筛选</span></span><br><span class="line"><span class="built_in">sort</span> file2 |<span class="built_in">uniq</span> <span class="comment"># sort对文件内容排序并通过uniq除去同步行</span></span><br><span class="line"><span class="built_in">tail</span> -f <span class="built_in">log</span> | grp <span class="string">&quot;error&quot;</span> <span class="comment"># 追踪日志，通过grep过滤关键字</span></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240406115419372.png"></p><h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><h2 id="查看进程ps"><a href="#查看进程ps" class="headerlink" title="查看进程ps"></a>查看进程ps</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ps -e <span class="comment">#显示系统中的所有进程</span></span><br><span class="line">ps -f <span class="comment">#显示完整的进程信息</span></span><br><span class="line">-u <span class="comment">#显示指定用户的进程</span></span><br><span class="line">-aux <span class="comment">#显示所有进程的详细信息</span></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240406112932011.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240419174403213.png"></p><h2 id="杀死进程kill"><a href="#杀死进程kill" class="headerlink" title="杀死进程kill"></a>杀死进程kill</h2><p><code>kill pid</code>杀死该进程</p><p><code>kill -9 pid</code>强制结束</p><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240419174511704.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240419174553865.png"></p><h2 id="命令行版任务管理器top"><a href="#命令行版任务管理器top" class="headerlink" title="命令行版任务管理器top"></a>命令行版任务管理器top</h2><p>动态的</p><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240419174715227.png"></p><h1 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h1><p>HTTP：80</p><p>HTTPS：443</p><p>SSH:22</p><p>MySQL：3306</p><h2 id="netstat查看端口"><a href="#netstat查看端口" class="headerlink" title="netstat查看端口"></a>netstat查看端口</h2><p>root能看到更详细的端口信息</p><p><code>netstat -anptu</code></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240419175757271.png"></p><p>pid一栏没有信息</p><p>切换至root</p><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240419180039730.png"></p><p>配合grep：<img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240419180400141.png"></p><h2 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h2><p><code>lsof -i</code>列出符合条件的进程</p><p><code>lsof -i:3306</code>列出使用端口3306的进程信息</p><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240419180545311.png"></p><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><ul><li>软链接：不占用磁盘空间，源文件删除则软链接直接失效</li><li>硬链接：只能链接普通文本，不能链接目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 软链接</span></span><br><span class="line"><span class="built_in">ln</span> -s 1.txt 1_soft_link <span class="comment">#创建1.txt的软链接，名称叫1_soft_link</span></span><br><span class="line"><span class="comment">#源文件改变，快捷方式也变。修改软连接相当于修改源文件，为源文件的别名</span></span><br><span class="line"><span class="comment">#软链接不储存内容，只记录指向文件的名称</span></span><br><span class="line"><span class="built_in">rm</span> 1.txt <span class="comment">#源文件删除后，软链接会报红，无法查看（但是软链接还存在）</span></span><br><span class="line"><span class="built_in">touch</span> 1.txt <span class="comment">#新建与源文件重名的文件，软链接会重新指向新的同名文件</span></span><br><span class="line"><span class="built_in">ln</span> -s /home/admin/demo1/1.txt ~/1_soft_link <span class="comment">#在家目录里创建该目录下1.txt的软链接（软链接与源文件不在同一目录时，需指明源文件所在的路径）</span></span><br><span class="line"><span class="built_in">ln</span> -s demo1 demo1_soft_link <span class="comment">#在当前目录下创建demo1的软链接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##硬链接 链接的内容改变，文件同步变化</span></span><br><span class="line"><span class="built_in">ln</span> 1.txt 1_hard_link <span class="comment">#当前目录下为1.txt创建硬链接</span></span><br><span class="line"><span class="comment">#源文件删除，不影响硬链接</span></span><br><span class="line"><span class="comment">#使用ll查看时，有一个数字代表有几个文字能同步发生变化</span></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240406125751783.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240406125819468.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240406130242614.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240406130756723.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240406130844262.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240406130933796.png"></p><h1 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#一般格式为：</span></span><br><span class="line">grep [-options] <span class="string">&#x27;content&#x27;</span> filename</span><br><span class="line">grep hello 1.txt <span class="comment">#在1.txt里搜索hello（按行搜索，匹配到文字返回该行）</span></span><br><span class="line">grep -n hello 1.txt  <span class="comment">#匹配内容及所在行</span></span><br><span class="line">grep -i hello 1.txt <span class="comment">#不区分大小写进行匹配</span></span><br><span class="line">grep -v hello 1.txt <span class="comment">#反向查找，过滤出不包含指定模式的行</span></span><br><span class="line">grep -n hello . -r <span class="comment">#会在当前目录（包括子目录）中递归地搜索包含字符串 &quot;hello&quot; 的文件，并显示匹配的行，并显示匹配的行的行号。</span></span><br><span class="line">grep -n ^h 1.txt <span class="comment">#匹配行以h开头的内容</span></span><br><span class="line">grep -n o$ 1.txt <span class="comment">#匹配行以o结尾的内容</span></span><br><span class="line"><span class="comment"># [] 匹配[]中任一字符</span></span><br><span class="line">grep h. 1.txt  <span class="comment">#h后跟任何一个字符的行，整行显示</span></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240406131608628.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240406131754336.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240406132123818.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240406132250880.png"></p><h1 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h1><p>查找文件名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#一般格式为：</span></span><br><span class="line">find directory -name filename</span><br><span class="line">find . -name 2.txt <span class="comment">#查找当前目录下2.txt所在的位置，会遍历所有的文件夹</span></span><br><span class="line">find ~ -name <span class="string">&#x27;*txt&#x27;</span> <span class="comment">#查找家目录下所有以txt结尾的文件 </span></span><br><span class="line">find . -<span class="built_in">type</span> d -name <span class="string">&quot;hello&quot;</span> <span class="comment">#在当前目录及其子目录中查找名字为 &quot;hello&quot; 的文件夹，并将它们列出来。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240406132622486.png"></p><h1 id="tar命令"><a href="#tar命令" class="headerlink" title="tar命令"></a>tar命令</h1><p>用于将多个文件打包成一个单独的文件（归档文件），通常以 <code>.tar</code> 为扩展名。它本身不具备压缩功能，但可以与 <code>gzip</code>、<code>bzip2</code> 等压缩工具结合使用，将打包的文件进行压缩，生成 <code>.tar.gz</code> 或 <code>.tar.bz2</code> 等格式的压缩文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建打包文件，注意f要写在最后，指定档案文件名称</span></span><br><span class="line">tar -cf a.tar 2.txt 3.txt <span class="comment">#将2.txt和3.txt打包到a.tar中,f-file。文件扩展名以tar结尾显示为红色</span></span><br><span class="line">tar cf a 2.txt 3.txt <span class="comment">#将2.txt和3.txt打包到a.tar中</span></span><br><span class="line"><span class="comment">#列出文件</span></span><br><span class="line">tar tf a.tar <span class="comment">#列包</span></span><br><span class="line">tar xf a.tar <span class="comment">#解包，文件会在当前目录下</span></span><br><span class="line"><span class="comment">#####################</span></span><br><span class="line">tar cvf a.tar *txt <span class="comment">#打包当前目录下所有txt文件，并展示过程</span></span><br><span class="line">tar xvf a.tar -C tar <span class="comment">#将解压的文件放入当前目录下的tar目录中，但是没有tar目录不会自动生成</span></span><br></pre></td></tr></table></figure><p>给已打包好的tar文件重新打包会覆盖里面的文件</p><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240406152501374.png"></p><h1 id="gzip命令"><a href="#gzip命令" class="headerlink" title="gzip命令"></a>gzip命令</h1><p>用于压缩文件，通常将文件压缩成 <code>.gz</code> 格式。它可以通过 <code>gzip</code> 命令进行压缩，通过 <code>gunzip</code> 或者 <code>gzip -d</code> 命令进行解压缩。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#一般格式为：</span></span><br><span class="line">gzip [options] file</span><br><span class="line">gzip -r a.tar <span class="comment">#-r压缩所有子目录，文件被压缩成新的文件a.tar.gz</span></span><br><span class="line">gzip -d a.tar.gz <span class="comment">#解压文件</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240406153633540.png"></p><h1 id="一步压缩解压"><a href="#一步压缩解压" class="headerlink" title="一步压缩解压"></a>一步压缩解压</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tar czf b.tar.gz *txt <span class="comment">#打包压缩所有txt文件,并命令为b.tar.gz</span></span><br><span class="line">tar xzf b.tar.gz -C btar <span class="comment">#解压解包文件b.tar.gz并存放在btar文件夹中</span></span><br><span class="line"><span class="comment">#bzip2用法</span></span><br><span class="line">tar jcf j.tar.bz2 *txt <span class="comment">#打包压缩所有txt文件,并命令为j.tar.bz2</span></span><br><span class="line">tar xjf j.tar.bz2 -C jtar  <span class="comment">#解压解包文件b.tar.bz2并存放在jtar文件夹中</span></span><br><span class="line"><span class="comment">#zip、unzip</span></span><br><span class="line">zip -r zz *txt <span class="comment">#将txt文件打包压缩成zz文件，会显示打包过程，生成文件扩展名为zip</span></span><br><span class="line">unzip -d zz zz.zip <span class="comment">#解压zz.zip里的文件至zz文件夹中，若文件夹不存在先创建文件夹</span></span><br><span class="line"><span class="comment">## 压缩率：zip&lt;gzip&lt;bzip2 </span></span><br><span class="line"><span class="comment">## 通用性：zip&gt;gzip&gt;bzip2</span></span><br><span class="line"><span class="comment">###一般以gizp为主</span></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240406154002585.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240406155501618.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240406155532657.png"></p><h1 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#which命令</span></span><br><span class="line"><span class="built_in">which</span> zip <span class="comment">#查看zip命令在的位置，命令是可执行的文件</span></span><br><span class="line"><span class="built_in">which</span> mysql <span class="comment"># 查看安装的文件位置</span></span><br><span class="line"><span class="comment"># who命令 查看当前系统中登录的所有用户信息</span></span><br><span class="line"><span class="built_in">whoami</span> <span class="comment">#当前用户</span></span><br><span class="line"><span class="built_in">who</span></span><br><span class="line"><span class="comment"># cd ls bash cp mv为shell命令</span></span><br><span class="line"><span class="comment">#su命令 切换到root用户</span></span><br><span class="line">su <span class="comment">#在命令行中切换至root用户</span></span><br><span class="line">su admin <span class="comment">#su + username 切换成对应的用户</span></span><br><span class="line"><span class="comment">#passwd命令</span></span><br><span class="line">passwd <span class="comment">#更改当前用户的密码</span></span><br><span class="line">passwd admin <span class="comment">#更改admin用户的密码</span></span><br><span class="line"><span class="comment">#exit命令</span></span><br><span class="line"><span class="built_in">exit</span> <span class="comment">#安装用户的顺序退出命令行窗口</span></span><br><span class="line"><span class="comment">#who命令</span></span><br><span class="line"><span class="built_in">who</span> <span class="comment">#查看当前登录的用户，tty表示用户登录操作系统，pts表示用户登录终端 </span></span><br><span class="line"><span class="comment">#reboot、shutdown命令,reboot不需要root权限，shutdown需要root权限</span></span><br><span class="line">reboot <span class="comment">#重启</span></span><br><span class="line">shutdown h +10<span class="comment">#系统再过十分钟后自动关机 </span></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240406160540306.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240406160705739.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/05/Linux%E5%9F%BA%E7%A1%80/image-20240419182014989.png"></p><h1 id="chmod命令"><a href="#chmod命令" class="headerlink" title="chmod命令"></a>chmod命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#按字母修改</span></span><br><span class="line"><span class="built_in">chmod</span> u/g/o/a +/-/= rwx file</span><br><span class="line"><span class="comment"># u:user表示该文件的所有者</span></span><br><span class="line"><span class="comment"># g:group表示与该文件所有者属于同一组者，即用户组</span></span><br><span class="line"><span class="comment"># o:other表示其他以外的人</span></span><br><span class="line"><span class="comment"># a:all表示这三者皆是</span></span><br><span class="line"><span class="comment"># +:增加权限</span></span><br><span class="line"><span class="comment"># -:减少权限</span></span><br><span class="line"><span class="comment"># =:赋值新的权限</span></span><br><span class="line"><span class="built_in">chmod</span> u+x test.txt <span class="comment">#给拥有者对于test.txt增加可执行权限</span></span><br><span class="line"><span class="built_in">chmod</span> u-r test.txt <span class="comment">#减去可读权限</span></span><br><span class="line"><span class="built_in">chmod</span> u=r test.txt <span class="comment">#给拥有者赋予test.txt可读权限</span></span><br><span class="line"><span class="built_in">chmod</span> u=rwx test.txt</span><br><span class="line"><span class="built_in">chmod</span> u-w test.txt</span><br><span class="line"><span class="built_in">chmod</span> u=- test.txt <span class="comment">#不赋予任何权限</span></span><br><span class="line"><span class="built_in">chmod</span> u+r,g-w,o=wx test.txt <span class="comment">#分别赋予权限</span></span><br><span class="line"><span class="built_in">chmod</span> a+w test.txt<span class="comment"># 共同改变权限</span></span><br><span class="line"><span class="comment">##数字修改</span></span><br><span class="line"><span class="comment"># r-&gt;4</span></span><br><span class="line"><span class="comment"># w-&gt;2</span></span><br><span class="line"><span class="comment"># x-&gt;1</span></span><br><span class="line"><span class="comment"># - -&gt;0</span></span><br><span class="line"><span class="built_in">chmod</span> 666 test.txt <span class="comment">#所有用户都有rw权限</span></span><br><span class="line"><span class="built_in">chmod</span> 777 test.txt <span class="comment">#所有用户都有rwx权限</span></span><br><span class="line"><span class="built_in">chmod</span> 135 text.txt <span class="comment"># x、wx、rx</span></span><br></pre></td></tr></table></figure><h1 id="yum命令"><a href="#yum命令" class="headerlink" title="yum命令"></a>yum命令</h1><p>软件包管理工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum list <span class="comment"># 列出所有可安装的软件清单</span></span><br><span class="line">yum search <span class="comment"># 查找软件包</span></span><br><span class="line">yum install <span class="comment"># 安装</span></span><br><span class="line">yum update <span class="comment"># 更新</span></span><br><span class="line">yum remove <span class="comment"># 删除</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux系统目录结构&quot;&gt;&lt;a href=&quot;#Linux系统目录结构&quot; class=&quot;headerlink&quot; title=&quot;Linux系统目录结构&quot;&gt;&lt;/a&gt;Linux系统目录结构&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;keep/source/images/star.</summary>
      
    
    
    
    <category term="os" scheme="http://example.com/categories/os/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>sql基础</title>
    <link href="http://example.com/2024/04/04/sql%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2024/04/04/sql%E5%9F%BA%E7%A1%80/</id>
    <published>2024-04-04T06:35:35.000Z</published>
    <updated>2024-04-05T11:40:36.863Z</updated>
    
    <content type="html"><![CDATA[<h1 id="表"><a href="#表" class="headerlink" title="表"></a>表</h1><p>由行和列组成的二维表格</p><ul><li>行，又叫记录</li><li>列，又叫字段</li></ul><h1 id="SQL语言（structured-query-language"><a href="#SQL语言（structured-query-language" class="headerlink" title="SQL语言（structured query language)"></a>SQL语言（structured query language)</h1><p>SQL语言主要分为:</p><ul><li>DQL：数据查询语言，如select</li><li>DDL：数据定义语言，进行数据库、表的管理等，如create、drop</li><li>DML：数据操作语言，增删改查，如insert、uupdate、delete</li><li>TPL：事务处理语言，如begin transaction、commit、rollback</li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li>单行注释：– 注释内容</li><li>多行注释：&#x2F;*     *&#x2F;</li></ul><h1 id="MySQL常用数据类型"><a href="#MySQL常用数据类型" class="headerlink" title="MySQL常用数据类型"></a>MySQL常用数据类型</h1><ul><li>整形 int</li><li>小整数tinyint</li><li>小数decimal：如decimal(5,2)表示共存5位数，小数占2位，不能超过2位；整数占3位</li><li>字符串varchar：如varchar(3)表示最多存3个 字符，一个中文或一个字母都占一个字符</li><li>日期实际datetime</li></ul><h2 id="表、字段、记录"><a href="#表、字段、记录" class="headerlink" title="表、字段、记录"></a>表、字段、记录</h2><ul><li>表：数据库中存储数据的基本单位<br>字段（列）–field      记录（行）–record</li></ul><h3 id="创建表-CREATE-TABLE"><a href="#创建表-CREATE-TABLE" class="headerlink" title="创建表 CREATE TABLE"></a>创建表 CREATE TABLE</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">字段名 数据类型;</span><br><span class="line">字段名 数据类型</span><br><span class="line">...</span><br><span class="line">)</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> a(NAME <span class="type">VARCHAR</span>(<span class="number">10</span>)); <span class="comment">-- 指定varchar长度为10</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> b(</span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">HEIGHT <span class="type">DECIMAL</span>(<span class="number">5</span>,<span class="number">2</span>)   <span class="comment">-- 数字五位，两位小数</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> c(</span><br><span class="line">id <span class="type">INT</span>,</span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">age TINYINT UNSIGNED</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/1.png"><br><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/2.png"><br><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/3.png"></p><h3 id="INSERT插入记录"><a href="#INSERT插入记录" class="headerlink" title="INSERT插入记录"></a>INSERT插入记录</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#值的顺序与字段顺序对应</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span> (...);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> c <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;张飞&#x27;</span>,<span class="number">30</span>);</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/4.png"></p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#部分字段设值，值的顺序与给出的字段顺序对应</span><br><span class="line">#<span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 (字段名,字段名) <span class="keyword">values</span> (值,值)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> c (id,NAME) <span class="keyword">VALUES</span> (<span class="number">2</span>,<span class="string">&#x27;老房子&#x27;</span>); </span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/5.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#插入多条记录，<span class="keyword">insert</span>语句用分号隔开</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> c <span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="string">&#x27;周瑜&#x27;</span>,<span class="number">24</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> c (NAME) <span class="keyword">VALUES</span> (<span class="string">&#x27;诸葛亮&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> c (id,NAME) <span class="keyword">VALUES</span> (<span class="number">7</span>,<span class="string">&#x27;黄忠&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/6.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#一条<span class="keyword">insert</span>语句插入多条记录</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> c <span class="keyword">VALUES</span> (<span class="number">10</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">10</span>),(<span class="number">12</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="number">20</span>),(<span class="number">11</span>,<span class="string">&#x27;赵六&#x27;</span>,<span class="number">31</span>);</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/7.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#一条<span class="keyword">insert</span>语句插入指定字段值</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> c (id,NAME) <span class="keyword">VALUES</span> (<span class="number">14</span>,<span class="string">&#x27;hua&#x27;</span>),(<span class="number">15</span>,<span class="string">&#x27;yu&#x27;</span>),(<span class="number">16</span>,<span class="string">&#x27;rain&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/8.png"></p><h3 id="SELECT-简单查询"><a href="#SELECT-简单查询" class="headerlink" title="SELECT 简单查询"></a>SELECT 简单查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> 表名;#<span class="operator">*</span>表示全部的字段</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/9.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#查询指定字段</span><br><span class="line"><span class="keyword">SELECT</span> id <span class="keyword">from</span> c;#查询id字段</span><br><span class="line"><span class="keyword">SELECT</span> id <span class="keyword">FROM</span> c;</span><br><span class="line"><span class="keyword">SELECT</span> id,age <span class="keyword">FROM</span> c;</span><br><span class="line"><span class="keyword">SELECT</span> id,age,NAME <span class="keyword">FROM</span> c;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/10.png"><br><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/11.png"><br><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/12.png"></p><h3 id="UPDATE-修改数据"><a href="#UPDATE-修改数据" class="headerlink" title="UPDATE 修改数据"></a>UPDATE 修改数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段<span class="number">1</span><span class="operator">=</span>值<span class="number">1</span>,字段<span class="number">2</span><span class="operator">=</span>值<span class="number">2</span> <span class="keyword">where</span> 条件；</span><br><span class="line"><span class="keyword">UPDATE</span> c <span class="keyword">SET</span> age<span class="operator">=</span><span class="number">50</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/13.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#设置条件修改</span><br><span class="line"><span class="keyword">UPDATE</span> c <span class="keyword">SET</span> NAME<span class="operator">=</span><span class="string">&#x27;di&#x27;</span>,age<span class="operator">=</span><span class="number">20</span> <span class="keyword">WHERE</span> id <span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> c <span class="keyword">SET</span> NAME<span class="operator">=</span><span class="string">&#x27;zhangfei&#x27;</span> <span class="keyword">WHERE</span> NAME <span class="operator">=</span><span class="string">&#x27;张飞&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/14.png"><br><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/15.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#让id大于<span class="number">10</span>的age都加一岁</span><br><span class="line"><span class="keyword">UPDATE</span> c <span class="keyword">SET</span> age<span class="operator">=</span>age<span class="operator">+</span><span class="number">1</span> <span class="keyword">WHERE</span> id <span class="operator">&gt;</span><span class="number">10</span> ;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/16.png"></p><h3 id="DELETE删除表的记录"><a href="#DELETE删除表的记录" class="headerlink" title="DELETE删除表的记录"></a>DELETE删除表的记录</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> c <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">6</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> c <span class="keyword">WHERE</span> NAME<span class="operator">=</span><span class="string">&#x27;诸葛亮&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/17.png"><br><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/18.png"></p><h3 id="TEUNCATE删除表的所有数据，保留表结构"><a href="#TEUNCATE删除表的所有数据，保留表结构" class="headerlink" title="TEUNCATE删除表的所有数据，保留表结构"></a>TEUNCATE删除表的所有数据，保留表结构</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/19.png"></p><h4 id="DELETE与TRUNCATE区别"><a href="#DELETE与TRUNCATE区别" class="headerlink" title="DELETE与TRUNCATE区别"></a>DELETE与TRUNCATE区别</h4><ul><li>速度上，turncate&gt;delete</li><li>如果只想删除部分数据用delete，带上where子句</li><li>如果想保留表而将所有数据删除，自增长字段恢复从1开始，用truncate,delete会从删除前的最大值开始增长</li></ul><h3 id="DROP-TABLE删除表"><a href="#DROP-TABLE删除表" class="headerlink" title="DROP TABLE删除表"></a>DROP TABLE删除表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> a;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如果表a存在，就删除表a，如果不存在，就什么都不做</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> if <span class="keyword">EXISTS</span> a;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/20.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/21.png"></p><h1 id="字段的约束"><a href="#字段的约束" class="headerlink" title="字段的约束"></a>字段的约束</h1><h2 id="常用的约束"><a href="#常用的约束" class="headerlink" title="常用的约束"></a>常用的约束</h2><ul><li>主键（primary key）：值不能重复，auto_increment代表值自动增长；</li><li>非空（not null）：此字段不参与空值；</li><li>唯一（unique）：此字段的值不允许重复</li><li>默认值（default）：当不填写此值时会使用默认值，如果填写时以填写为准</li></ul><h2 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h2><p>创建带约束字段的表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span>  <span class="keyword">table</span> 表名(</span><br><span class="line">字段名 数据类型 约束,</span><br><span class="line">字段名 数据类型 约束</span><br><span class="line">...</span><br><span class="line">)</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> d(</span><br><span class="line">id <span class="type">INT</span> UNSIGNED <span class="keyword">PRIMARY</span> KEY auto_increment, </span><br><span class="line">name <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">age TINYINT UNSIGNED</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> d (name,age) <span class="keyword">VALUES</span> (<span class="string">&#x27;liu&#x27;</span>,<span class="number">12</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> d (name,age) <span class="keyword">VALUES</span> (<span class="string">&#x27;wan&#x27;</span>,<span class="number">22</span>);</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/22.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> d (id,name,age) <span class="keyword">VALUES</span> (<span class="number">6</span>,<span class="string">&#x27;www&#x27;</span>,<span class="number">12</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> d (name,age) <span class="keyword">VALUES</span> (<span class="string">&#x27;ll&#x27;</span>,<span class="number">14</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> d;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/23.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 如果不指定字段，主键自增长的字段可以用占位符0或null</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> d <span class="keyword">VALUES</span> (<span class="number">0</span>,<span class="string">&#x27;wl&#x27;</span>,<span class="number">55</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> d <span class="keyword">VALUES</span> (<span class="keyword">null</span>,<span class="string">&#x27;sssdw&#x27;</span>,<span class="number">123</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> d;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/24.png"></p><h2 id="非空"><a href="#非空" class="headerlink" title="非空"></a>非空</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE e(</span><br><span class="line">id INT UNSIGNED,</span><br><span class="line">name VARCHAR(10) not null,</span><br><span class="line">age INT UNSIGNED</span><br><span class="line">);</span><br><span class="line">INSERT INTO e VALUES (1,&#x27;lbw&#x27;,38);</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/25.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> e (id,age) <span class="keyword">VALUES</span> (<span class="number">2</span>,<span class="number">22</span>);</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/26.png"></p><h2 id="唯一"><a href="#唯一" class="headerlink" title="唯一"></a>唯一</h2><p>此字段的值不允许重复</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> f(</span><br><span class="line">id <span class="type">INT</span> UNSIGNED <span class="keyword">PRIMARY</span> KEY auto_increment,</span><br><span class="line">name <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">UNIQUE</span>,</span><br><span class="line">age <span class="type">INT</span> UNSIGNED</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> f <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;ana&#x27;</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> f <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;lily&#x27;</span>,<span class="number">5</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> f;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/27.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO f VALUES(3,&#x27;ana&#x27;,5);</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/28.png"></p><h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> g(</span><br><span class="line">id <span class="type">INT</span> UNSIGNED <span class="keyword">PRIMARY</span> KEY auto_increment,</span><br><span class="line">name <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">UNIQUE</span>,</span><br><span class="line">age <span class="type">INT</span> UNSIGNED <span class="keyword">DEFAULT</span> <span class="number">30</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> g <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;zs&#x27;</span>,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> g (id,name) <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;lily&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> g <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;ana&#x27;</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> g <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;www&#x27;</span>,<span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> g <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;w5&#x27;</span>,<span class="number">22</span>);</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/29.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> g <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;w5&#x27;</span>,<span class="number">22</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> g <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;w6&#x27;</span>,<span class="number">32</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> g;</span><br><span class="line"><span class="comment">-- 因为约束数据没有录入，但是自增长的值会继续增长</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/30.png"></p><h1 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h1><h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> students;</span><br><span class="line"><span class="comment">/* 创建学生表students */</span> </span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> students (</span><br><span class="line">studentNo <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">primary</span> key, <span class="comment">/*学号，主键，值不能重复*/</span> </span><br><span class="line">name <span class="type">varchar</span>(<span class="number">10</span>), <span class="comment">/*姓名*/</span></span><br><span class="line">sex <span class="type">varchar</span>(<span class="number">1</span>), <span class="comment">/*性别*/</span></span><br><span class="line">hometown <span class="type">varchar</span>(<span class="number">20</span>), <span class="comment">/*家乡*/</span></span><br><span class="line">age tinyint, <span class="comment">/*年龄*/</span></span><br><span class="line">class <span class="type">varchar</span>(<span class="number">10</span>), <span class="comment">/*班级*/</span> card <span class="type">varchar</span>(<span class="number">20</span>) <span class="comment">/*身份证号码*/</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">/* 向学生表students插入数据 */</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students <span class="keyword">values</span></span><br><span class="line">(<span class="string">&#x27;001&#x27;</span>, <span class="string">&#x27;王昭君&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;30&#x27;</span>, <span class="string">&#x27;1班&#x27;</span>, <span class="string">&#x27;110101199003157654&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;002&#x27;</span>, <span class="string">&#x27;诸葛亮&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;29&#x27;</span>, <span class="string">&#x27;2班&#x27;</span>, <span class="string">&#x27;310102199104262354&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;003&#x27;</span>, <span class="string">&#x27;张飞&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;南京&#x27;</span>, <span class="string">&#x27;30&#x27;</span>, <span class="string">&#x27;3班&#x27;</span>, <span class="string">&#x27;320102199003047654&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;004&#x27;</span>, <span class="string">&#x27;白起&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;安徽&#x27;</span>, <span class="string">&#x27;35&#x27;</span>, <span class="string">&#x27;4班&#x27;</span>, <span class="string">&#x27;340202198505177654&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;005&#x27;</span>, <span class="string">&#x27;大乔&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;天津&#x27;</span>, <span class="string">&#x27;28&#x27;</span>, <span class="string">&#x27;3班&#x27;</span>, <span class="string">&#x27;120101199204067654&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;006&#x27;</span>, <span class="string">&#x27;孙尚香&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;河北&#x27;</span>, <span class="string">&#x27;25&#x27;</span>, <span class="string">&#x27;1班&#x27;</span>, <span class="string">&#x27;130502199506137654&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;007&#x27;</span>, <span class="string">&#x27;百里玄策&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;山西&#x27;</span>, <span class="string">&#x27;39&#x27;</span>, <span class="string">&#x27;2班&#x27;</span>, <span class="string">&#x27;140102198107277654&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;008&#x27;</span>, <span class="string">&#x27;小乔&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;河南&#x27;</span>, <span class="string">&#x27;25&#x27;</span>, <span class="string">&#x27;3班&#x27;</span>, <span class="keyword">null</span>),</span><br><span class="line">(<span class="string">&#x27;009&#x27;</span>, <span class="string">&#x27;百里守约&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;湖南&#x27;</span>, <span class="string">&#x27;31&#x27;</span>, <span class="string">&#x27;1班&#x27;</span>, <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;010&#x27;</span>, <span class="string">&#x27;妲己&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;广东&#x27;</span>, <span class="string">&#x27;24&#x27;</span>, <span class="string">&#x27;2班&#x27;</span>, <span class="string">&#x27;440701199607147654&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;011&#x27;</span>, <span class="string">&#x27;李白&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;30&#x27;</span>, <span class="string">&#x27;4班&#x27;</span>, <span class="string">&#x27;110202199005017754&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;012&#x27;</span>, <span class="string">&#x27;孙膑&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;新疆&#x27;</span>, <span class="string">&#x27;36&#x27;</span>, <span class="string">&#x27;3班&#x27;</span>, <span class="string">&#x27;650102198401297655&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/31.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `NAME` <span class="keyword">FROM</span> students;</span><br><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> students;</span><br><span class="line"><span class="keyword">SELECT</span> NAME <span class="keyword">FROM</span> students;</span><br><span class="line"><span class="comment">-- mysql中大小写不敏感</span></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/32.png"></p><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><p>字段的别名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> card <span class="keyword">as</span> 身份证,name <span class="keyword">as</span> 姓名,sex <span class="keyword">as</span> 性别 <span class="keyword">FROM</span> students;</span><br><span class="line"><span class="comment">-- as可以省略</span></span><br><span class="line"><span class="keyword">SELECT</span> card  身份证,name 姓名,sex 性别 <span class="keyword">FROM</span> students;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/33.png"><br>表的别名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">as</span> stu;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students  stu;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/34.png"></p><h3 id="去除重复distinct"><a href="#去除重复distinct" class="headerlink" title="去除重复distinct"></a>去除重复distinct</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- distinct可以过滤除select查询结果中重复的记录</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> sex <span class="keyword">from</span> students;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/35.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sex,class <span class="keyword">from</span> students;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/36.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> sex,class <span class="keyword">from</span> students;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/37.png"></p><h2 id="where子句"><a href="#where子句" class="headerlink" title="where子句"></a>where子句</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">WHERE</span> studentNO<span class="operator">=</span><span class="string">&#x27;001&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/38.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name,class <span class="keyword">from</span> students <span class="keyword">WHERE</span> age<span class="operator">=</span><span class="number">30</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/39.png"></p><ul><li>select控制查询返回什么样的列（字段)</li><li>where控制查询返回什么样的行（记录）</li></ul><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><ul><li>等于：&#x3D;<br><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/40.png"></li><li>大于：&gt;</li><li>大于等于：&gt;&#x3D;</li><li>小于：&lt;<br><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/41.png"></li><li>小于等于：&lt;&#x3D;<br><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/42.png"></li><li>不等于：!&#x3D;或&lt;&gt;<br><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/43.png"></li></ul><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ul><li><p>与and<br><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/44.png"></p></li><li><p>或or<br><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/45.png"></p></li><li><p>非not</p><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/46.png"></p><p>模糊查询</p></li><li><p><strong>like，表示模糊查询</strong></p></li><li><p><strong>%表示任意多个字符</strong></p></li><li><p><strong>下划线表示任意一个字符</strong></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 查询姓名以孙开头的学生信息</span><br><span class="line">SELECT * FROM students WHERE name like &#x27;孙%&#x27;;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/47.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询姓名以孙开头,且名字只有一个字的学生信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> name <span class="keyword">like</span> <span class="string">&#x27;孙_&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/48.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询名中带乔的学生信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> name <span class="keyword">like</span> <span class="string">&#x27;%乔&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/49.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询姓名中有白的学生信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> name <span class="keyword">like</span> <span class="string">&#x27;%白%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/50.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询姓名为两个字的学生记录</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> name <span class="keyword">like</span> <span class="string">&#x27;__&#x27;</span>;</span><br><span class="line"><span class="comment">-- 查询姓白且年龄大于30的学生记录</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> name <span class="keyword">like</span> <span class="string">&#x27;白%&#x27;</span> <span class="keyword">AND</span> age <span class="operator">&gt;</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 查询学号以1结尾的学生记录</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> studentNO <span class="keyword">like</span> <span class="string">&#x27;%1&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/51.png"><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/52.png"><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/53.png"></p><h3 id="范围查找"><a href="#范围查找" class="headerlink" title="范围查找"></a>范围查找</h3><ul><li>in：表示在一个非连续的范围内</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> hometown <span class="keyword">IN</span> (<span class="string">&#x27;北京&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>,<span class="string">&#x27;广东&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/54.png"><br><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/55.png"></p><ul><li>between…and…：表示在一个连续的范围内</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> age <span class="keyword">BETWEEN</span> <span class="number">25</span> <span class="keyword">AND</span> <span class="number">30</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/56.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询age年龄在20或25或30的女生记录</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> age <span class="keyword">in</span> (<span class="number">20</span>,<span class="number">25</span>,<span class="number">30</span>) <span class="keyword">AND</span> sex<span class="operator">=</span><span class="string">&#x27;女&#x27;</span>;</span><br><span class="line"><span class="comment">-- 查询age年龄25到30以外的学生记录</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> age <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> <span class="number">25</span> <span class="keyword">AND</span> <span class="number">30</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/57.png"></p><h3 id="空判断"><a href="#空判断" class="headerlink" title="空判断"></a>空判断</h3><p>在 SQL 中，<code>NULL</code> 代表未知值或缺失值，它与任何其他值（包括它自己）的比较结果都是未知的。因此，在 SQL 中，你不能使用 <code>=</code> 运算符来判断一个值是否为 <code>NULL</code>，因为任何值与 <code>NULL</code> 进行比较的结果都是未知的，包括自己与自己进行比较。</p><ul><li>判断空：is null</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> card <span class="keyword">is</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/58.png"></p><ul><li>判断非空：is not null</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> card <span class="keyword">is</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/59.png"></p><h2 id="where在update和delete"><a href="#where在update和delete" class="headerlink" title="where在update和delete"></a>where在update和delete</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> students <span class="keyword">SET</span> class <span class="operator">=</span> <span class="string">&#x27;2班&#x27;</span> <span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">25</span> <span class="keyword">AND</span> name<span class="operator">=</span><span class="string">&#x27;孙尚香&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/60.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> class <span class="operator">=</span> <span class="string">&#x27;1班&#x27;</span> <span class="keyword">and</span> age <span class="operator">&gt;</span><span class="number">30</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/61.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> students <span class="keyword">SET</span> class <span class="operator">=</span> <span class="string">&#x27;1班&#x27;</span> <span class="keyword">WHERE</span> name <span class="keyword">like</span> <span class="string">&#x27;孙%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/62.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> (age <span class="keyword">BETWEEN</span> <span class="number">20</span> <span class="keyword">and</span> <span class="number">30</span>) <span class="keyword">and</span> sex <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/63.png"></p><h2 id="排序-order-by"><a href="#排序-order-by" class="headerlink" title="排序 order by"></a>排序 order by</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 字段<span class="number">1</span> <span class="keyword">asc</span> <span class="operator">|</span><span class="keyword">desc</span>,字段<span class="number">2</span> <span class="keyword">asc</span><span class="operator">|</span><span class="keyword">desc</span>,...</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">ORDER</span> <span class="keyword">BY</span> age; <span class="comment">-- 默认为升序asc</span></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/64.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/65.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 按年龄从大到小排序，年龄相同时按学号从小到大排序</span></span><br><span class="line"><span class="comment">-- 优先级前面的字段在前面</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">DESC</span>,studentNO;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/66.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- where出现在oder by前面</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">WHERE</span> sex <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> class,studentNO <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/67.png"></p><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><h3 id="count总记录数"><a href="#count总记录数" class="headerlink" title="count总记录数"></a>count总记录数</h3><p><code>count(*) </code>表示总记录数，括号中写 * 与字段名、结果是相同的。字段记录有<code>null</code>时不同</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(name) <span class="keyword">FROM</span> students</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/68.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 统计班级数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> class) <span class="keyword">FROM</span> students</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/69.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 统计女同学的数量</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> sex<span class="operator">=</span><span class="string">&#x27;女&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/70.png"></p><h3 id="max最大值"><a href="#max最大值" class="headerlink" title="max最大值"></a>max最大值</h3><p><code>max(字段)</code>表示求此字段的最大值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(age) <span class="keyword">FROM</span> students;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/71.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(age) <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> sex<span class="operator">=</span><span class="string">&#x27;女&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/72.png"><br><strong>聚合函数不能用在where子句中</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> students <span class="keyword">where</span> age <span class="operator">=</span> <span class="built_in">max</span>(age); <span class="comment">-- 错误</span></span><br></pre></td></tr></table></figure><h3 id="min最小值"><a href="#min最小值" class="headerlink" title="min最小值"></a>min最小值</h3><p><code>min(字段)</code>表示求此字段的最小值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(age) <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> sex<span class="operator">=</span><span class="string">&#x27;女&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> students <span class="keyword">where</span> age <span class="operator">=</span> <span class="built_in">min</span>(age); <span class="comment">-- 错误</span></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/73.png"></p><h3 id="sum求和"><a href="#sum求和" class="headerlink" title="sum求和"></a>sum求和</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">sum</span>(age) <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> sex<span class="operator">=</span><span class="string">&#x27;女&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/74.png"></p><h3 id="avg平均年龄"><a href="#avg平均年龄" class="headerlink" title="avg平均年龄"></a>avg平均年龄</h3><p><code>avg</code>会忽略null</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">avg</span>(age) <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> sex<span class="operator">=</span><span class="string">&#x27;女&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/75.png"></p><h3 id="mod-取余"><a href="#mod-取余" class="headerlink" title="mod()取余"></a>mod()取余</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">MOD</span>(dividend, divisor)</span><br><span class="line"><span class="comment">-- dividend 是被除数，即要计算余数的数字。</span></span><br><span class="line"><span class="comment">-- divisor 是除数，即要除以的数字。</span></span><br></pre></td></tr></table></figure><h2 id="数据分组"><a href="#数据分组" class="headerlink" title="数据分组"></a>数据分组</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 聚合函数 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件 <span class="keyword">group</span> <span class="keyword">by</span> 字段;</span><br><span class="line"><span class="keyword">select</span> 聚合函数 <span class="keyword">from</span> 表名 <span class="keyword">group</span> <span class="keyword">by</span> 字段;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> students <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/76.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sex,<span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> students <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/77.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sex,<span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> class<span class="operator">=</span><span class="string">&#x27;1班&#x27;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/78.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> class,<span class="built_in">COUNT</span>(<span class="operator">*</span>) 总数,<span class="built_in">avg</span>(age),<span class="built_in">MAX</span>(age) ,<span class="built_in">min</span>(age) <span class="keyword">FROM</span> students <span class="keyword">GROUP</span> <span class="keyword">BY</span> class</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/79.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> class,<span class="built_in">COUNT</span>(<span class="operator">*</span>) 总数,<span class="built_in">avg</span>(age),<span class="built_in">MAX</span>(age) ,<span class="built_in">min</span>(age) <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> <span class="keyword">NOT</span> class<span class="operator">=</span><span class="string">&#x27;3班&#x27;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> class <span class="keyword">ORDER</span> <span class="keyword">BY</span> class <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/80.png"></p><h3 id="分组后进行筛选"><a href="#分组后进行筛选" class="headerlink" title="分组后进行筛选"></a>分组后进行筛选</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span>, 字段<span class="number">2</span>, 聚合.. <span class="keyword">from</span> 表名</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 字段<span class="number">1</span>，字段<span class="number">2</span>，字段<span class="number">3.</span>..</span><br><span class="line"><span class="keyword">having</span> 字段<span class="number">1</span>，...聚合...</span><br><span class="line"><span class="comment">-- 没有group by不能用having</span></span><br><span class="line"><span class="comment">--  where先筛选复合条件的记录，再聚合统计</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> sex<span class="operator">=</span><span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"><span class="comment">-- having先分组统计，在统计的结果中筛选</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">from</span> students <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex <span class="keyword">HAVING</span> sex<span class="operator">=</span><span class="string">&#x27;男&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/81.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 求班级人数大于2的班级</span></span><br><span class="line"><span class="keyword">SELECT</span> class <span class="keyword">FROM</span> students <span class="keyword">GROUP</span> <span class="keyword">BY</span> class <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/82.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询班级总人数大于2人的班级名称及班级对应的总人数</span></span><br><span class="line"><span class="keyword">SELECT</span> class,<span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> students <span class="keyword">GROUP</span> <span class="keyword">BY</span> class <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/83.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询平均年龄大于30岁的班级名称和班级总人数</span></span><br><span class="line"><span class="keyword">SELECT</span> class,<span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> students <span class="keyword">GROUP</span> <span class="keyword">BY</span> class <span class="keyword">HAVING</span> <span class="built_in">AVG</span>(age)<span class="operator">&gt;</span><span class="number">30</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/84.png"></p><h4 id="对比where和having"><a href="#对比where和having" class="headerlink" title="对比where和having"></a>对比where和having</h4><ul><li>where是对from后面指定的表进行筛选，是对原始数据进行筛选；</li><li>having是对group by的结果进行筛选；</li><li>having后面的条件可以用聚合函数，where后面的条件不可以使用聚合函数</li><li><code>WHERE</code> 用于筛选行，它指定了对哪些行进行聚合操作。<code>WHERE</code> 子句筛选出满足条件的行，并将其传递给 <code>GROUP BY</code> 子句进行分组。</li><li><code>GROUP BY</code> 用于对行进行分组，并对每个组应用聚合函数（如 <code>COUNT</code>、<code>SUM</code>、<code>AVG</code> 等）。<code>GROUP BY</code> 子句指定了按照哪些列对行进行分组，聚合函数将在每个组上计算。</li></ul><h2 id="数据分页显示"><a href="#数据分页显示" class="headerlink" title="数据分页显示"></a>数据分页显示</h2><p><code>limit 开始行,获取行数;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">start</span>,count <span class="comment">-- start默认第一行</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students LIMIT <span class="number">0</span>,<span class="number">3</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/85.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询从第四条记录开始的三条记录</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students LIMIT <span class="number">3</span>,<span class="number">3</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/86.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- limit总是出现在select语句的最后</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件 <span class="keyword">group</span> <span class="keyword">by</span> 字段 oder <span class="keyword">by</span> 字段 limit <span class="keyword">start</span>,count;</span><br><span class="line"><span class="comment">-- 获取年龄最大的同学的相关信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">DESC</span> LIMIT <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/87.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询年龄最小的女同学信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> sex <span class="operator">=</span><span class="string">&#x27;女&#x27;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> age  LIMIT <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/88.png"></p><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><p>已知每页显示m条数据，求：查询第n页的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students limit(n<span class="number">-1</span>)<span class="operator">*</span>m ,m</span><br><span class="line"><span class="comment">-- 每页显示4条记录，查询第3页的数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students limit <span class="number">8</span>,<span class="number">4</span>;</span><br><span class="line"><span class="comment">-- 查询students表，每页显示5条记录，求总页数</span></span><br><span class="line"><span class="number">1.</span> 查询记录总条数 a；</span><br><span class="line"><span class="number">2.</span> 使用a除以每页的条数<span class="number">5</span>，得到b；</span><br><span class="line"><span class="number">3.</span> 如果b为整数，b为总数</span><br></pre></td></tr></table></figure><h1 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h1><p>通过连接运算实现</p><ul><li>内连接</li><li>左连接</li><li>右连接</li></ul><h2 id="数据准备-1"><a href="#数据准备-1" class="headerlink" title="数据准备"></a>数据准备</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 创建学生表students */</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> students (</span><br><span class="line">  studentNo <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">primary</span> key, <span class="comment">/*学号，主键，值不能重复*/</span></span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">10</span>), <span class="comment">/*姓名*/</span></span><br><span class="line">  sex <span class="type">varchar</span>(<span class="number">1</span>), <span class="comment">/*性别*/</span></span><br><span class="line">  hometown <span class="type">varchar</span>(<span class="number">20</span>), <span class="comment">/*家乡*/</span></span><br><span class="line">  age tinyint, <span class="comment">/*年龄*/</span></span><br><span class="line">  class <span class="type">varchar</span>(<span class="number">10</span>), <span class="comment">/*班级*/</span></span><br><span class="line">  card <span class="type">varchar</span>(<span class="number">20</span>) <span class="comment">/*身份证号码*/</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 向学生表students插入数据 */</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students <span class="keyword">values</span></span><br><span class="line">(<span class="string">&#x27;001&#x27;</span>, <span class="string">&#x27;王昭君&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;30&#x27;</span>, <span class="string">&#x27;1班&#x27;</span>, <span class="string">&#x27;110101199003157654&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;002&#x27;</span>, <span class="string">&#x27;诸葛亮&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;29&#x27;</span>, <span class="string">&#x27;2班&#x27;</span>, <span class="string">&#x27;310102199104262354&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;003&#x27;</span>, <span class="string">&#x27;张飞&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;南京&#x27;</span>, <span class="string">&#x27;30&#x27;</span>, <span class="string">&#x27;3班&#x27;</span>, <span class="string">&#x27;320102199003047654&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;004&#x27;</span>, <span class="string">&#x27;白起&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;安徽&#x27;</span>, <span class="string">&#x27;35&#x27;</span>, <span class="string">&#x27;4班&#x27;</span>, <span class="string">&#x27;340202198505177654&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;005&#x27;</span>, <span class="string">&#x27;大乔&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;天津&#x27;</span>, <span class="string">&#x27;28&#x27;</span>, <span class="string">&#x27;3班&#x27;</span>, <span class="string">&#x27;120101199204067654&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;006&#x27;</span>, <span class="string">&#x27;孙尚香&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;河北&#x27;</span>, <span class="string">&#x27;25&#x27;</span>, <span class="string">&#x27;1班&#x27;</span>, <span class="string">&#x27;130502199506137654&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;007&#x27;</span>, <span class="string">&#x27;百里玄策&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;山西&#x27;</span>, <span class="string">&#x27;39&#x27;</span>, <span class="string">&#x27;2班&#x27;</span>, <span class="string">&#x27;140102198107277654&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;008&#x27;</span>, <span class="string">&#x27;小乔&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;河南&#x27;</span>, <span class="string">&#x27;25&#x27;</span>, <span class="string">&#x27;3班&#x27;</span>, <span class="keyword">null</span>),</span><br><span class="line">(<span class="string">&#x27;009&#x27;</span>, <span class="string">&#x27;百里守约&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;湖南&#x27;</span>, <span class="string">&#x27;31&#x27;</span>, <span class="string">&#x27;1班&#x27;</span>, <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;010&#x27;</span>, <span class="string">&#x27;妲己&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;广东&#x27;</span>, <span class="string">&#x27;24&#x27;</span>, <span class="string">&#x27;2班&#x27;</span>, <span class="string">&#x27;440701199607147654&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;011&#x27;</span>, <span class="string">&#x27;李白&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;30&#x27;</span>, <span class="string">&#x27;4班&#x27;</span>, <span class="string">&#x27;110202199005017754&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;012&#x27;</span>, <span class="string">&#x27;孙膑&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;新疆&#x27;</span>, <span class="string">&#x27;36&#x27;</span>, <span class="string">&#x27;3班&#x27;</span>, <span class="string">&#x27;650102198401297655&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 如果课程表courses存在，删除课程表courses */</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> courses;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建课程表courses */</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> courses (</span><br><span class="line">courseNo <span class="type">int</span> unsigned <span class="keyword">primary</span> key auto_increment, <span class="comment">/*课程号 主键，值不能重复，且自增长*/</span></span><br><span class="line">coursename <span class="type">varchar</span>(<span class="number">10</span>) <span class="comment">/*课程名称*/</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 向课程表courses插入数据 */</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (coursename) <span class="keyword">values</span></span><br><span class="line">(<span class="string">&#x27;数据库&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;html&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;linux&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;系统测试&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;单元测试&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;测试过程&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;python&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 如果成绩表scores存在，删除课程表scores */</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> scores;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建scores表 */</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> scores (</span><br><span class="line">id <span class="type">int</span> unsigned <span class="keyword">primary</span> key auto_increment,<span class="comment">/*主键，值不能重复，且自增长*/</span></span><br><span class="line">courseNo <span class="type">int</span> unsigned, <span class="comment">/*课程号，与courses表中courseNo关联*/</span></span><br><span class="line">studentNo <span class="type">varchar</span>(<span class="number">10</span>), <span class="comment">/*学号，与students表中studentNo关联*/</span></span><br><span class="line">score tinyint <span class="comment">/*成绩*/</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 向scores表插入数据 */</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> scores (courseNo, studentNo,score) <span class="keyword">values</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;001&#x27;</span>, <span class="number">90</span>),</span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;002&#x27;</span>, <span class="number">75</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;002&#x27;</span>, <span class="number">98</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;001&#x27;</span>, <span class="number">86</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;003&#x27;</span>, <span class="number">80</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;004&#x27;</span>, <span class="number">79</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;005&#x27;</span>, <span class="number">96</span>),</span><br><span class="line">(<span class="number">6</span>, <span class="string">&#x27;006&#x27;</span>, <span class="number">80</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 如果区域表areas存在，删除areas */</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> areas;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建区域表areas */</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> areas(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">pid <span class="type">int</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 向区域表areas插入数据 */</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> areas</span><br><span class="line"><span class="keyword">values</span> (<span class="string">&#x27;130000&#x27;</span>, <span class="string">&#x27;河北省&#x27;</span>, <span class="keyword">NULL</span>),</span><br><span class="line">(<span class="string">&#x27;130100&#x27;</span>, <span class="string">&#x27;石家庄市&#x27;</span>, <span class="string">&#x27;130000&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;130400&#x27;</span>, <span class="string">&#x27;邯郸市&#x27;</span>, <span class="string">&#x27;130000&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;130600&#x27;</span>, <span class="string">&#x27;保定市&#x27;</span>, <span class="string">&#x27;130000&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;130700&#x27;</span>, <span class="string">&#x27;张家口市&#x27;</span>, <span class="string">&#x27;130000&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;130800&#x27;</span>, <span class="string">&#x27;承德市&#x27;</span>, <span class="string">&#x27;130000&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;440000&#x27;</span>, <span class="string">&#x27;广东省&#x27;</span>, <span class="keyword">NULL</span>),</span><br><span class="line">(<span class="string">&#x27;440300&#x27;</span>, <span class="string">&#x27;深圳市&#x27;</span>, <span class="string">&#x27;440000&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;440100&#x27;</span>, <span class="string">&#x27;广州市&#x27;</span>, <span class="string">&#x27;440000&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;440500&#x27;</span>, <span class="string">&#x27;汕头市&#x27;</span>, <span class="string">&#x27;440000&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;440600&#x27;</span>, <span class="string">&#x27;佛山市&#x27;</span>, <span class="string">&#x27;440000&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;440200&#x27;</span>, <span class="string">&#x27;韶关市&#x27;</span>, <span class="string">&#x27;440000&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h2><p>查询的结果只显示两个表中满足连接条件的部分，即A∩B</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表<span class="number">1</span></span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 表<span class="number">1.</span>字段<span class="operator">=</span>表<span class="number">2.</span>字段</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> if <span class="keyword">EXISTS</span> a;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> a(id <span class="type">INT</span>, name <span class="type">VARCHAR</span>(<span class="number">10</span>));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> a <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;张三&#x27;</span>),(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>),(<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;王五&#x27;</span>);</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> if <span class="keyword">EXISTS</span> b;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> b(id <span class="type">INT</span>, score <span class="type">int</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> b <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;30&#x27;</span>),(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;40&#x27;</span>),(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;50&#x27;</span>),(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;60&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> a <span class="keyword">INNER</span> <span class="keyword">JOIN</span> b <span class="keyword">ON</span> a.id<span class="operator">=</span>b.id;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/89.png"><br>id(1)为别名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">INNER</span> <span class="keyword">JOIN</span> scores <span class="keyword">ON</span> students.studentNo<span class="operator">=</span>scores.studentNo;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/90.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name,courseNo,score <span class="keyword">FROM</span> students,scores <span class="keyword">WHERE</span> students.studentNo<span class="operator">=</span>scores.studentNo;</span><br><span class="line"><span class="comment">-- 使用表的别名</span></span><br><span class="line"><span class="keyword">SELECT</span> name,courseNo,score <span class="keyword">FROM</span> students st,scores sc <span class="keyword">WHERE</span> st.studentNo<span class="operator">=</span>sc.studentNo;</span><br><span class="line"><span class="comment">-- 别名</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="keyword">SELECT</span> name 姓名,courseNo 课程编号,score 成绩 <span class="keyword">FROM</span> students st <span class="keyword">INNER</span> <span class="keyword">JOIN</span> scores sc <span class="keyword">ON</span> st.studentNo<span class="operator">=</span>sc.studentNo;</span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="keyword">SELECT</span> name 姓名,courseNo 课程编号,score 成绩 <span class="keyword">FROM</span> students st,scores sc <span class="keyword">WHERE</span> st.studentNo<span class="operator">=</span>sc.studentNo;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/91.png"><br>连接courses表和scores表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> scores <span class="keyword">INNER</span> <span class="keyword">JOIN</span> courses <span class="keyword">on</span> scores.courseNo<span class="operator">=</span>courses.courseNo;</span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> scores s <span class="keyword">INNER</span> <span class="keyword">JOIN</span> courses c <span class="keyword">on</span> s.courseNo<span class="operator">=</span>c.courseNo;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/92.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name,courseNo,score <span class="keyword">FROM</span> students s1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> scores s2 <span class="keyword">on</span> s1.studentNo<span class="operator">=</span>s2.studentNo <span class="keyword">WHERE</span> s1.name<span class="operator">=</span><span class="string">&#x27;王昭君&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/93.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name,score <span class="keyword">FROM</span> students s1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> scores s2 <span class="keyword">on</span> s1.studentNo<span class="operator">=</span>s2.studentNo <span class="keyword">WHERE</span> s1.name<span class="operator">=</span><span class="string">&#x27;王昭君&#x27;</span> <span class="keyword">AND</span> s2.score<span class="operator">&lt;</span><span class="number">90</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/94.png"></p><h3 id="隐式内连接"><a href="#隐式内连接" class="headerlink" title="隐式内连接"></a>隐式内连接</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 隐式内连接</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表<span class="number">1</span>,表<span class="number">2</span> <span class="keyword">where</span> 表<span class="number">1.</span>字段<span class="operator">=</span>表<span class="number">2.</span>字段;</span><br></pre></td></tr></table></figure><h3 id="多表内连接"><a href="#多表内连接" class="headerlink" title="多表内连接"></a>多表内连接</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students s1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> scores sc <span class="keyword">on</span> s1.studentNo<span class="operator">=</span>sc.studentNo <span class="keyword">INNER</span> <span class="keyword">JOIN</span> courses s2 <span class="keyword">on</span> sc.courseNo<span class="operator">=</span>s2.courseNo;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/95.png"><br>查询学生的linux成绩：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  name,score,coursename <span class="keyword">FROM</span> students s1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> scores sc <span class="keyword">on</span> s1.studentNo<span class="operator">=</span>sc.studentNo <span class="keyword">INNER</span> <span class="keyword">JOIN</span> courses s2 <span class="keyword">on</span> sc.courseNo<span class="operator">=</span>s2.courseNo <span class="keyword">where</span> s2.coursename<span class="operator">=</span><span class="string">&#x27;linux&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/96.png"><br>查询成绩最高的男生的信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  name,score,coursename <span class="keyword">FROM</span> students s1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> scores sc <span class="keyword">on</span> s1.studentNo<span class="operator">=</span>sc.studentNo <span class="keyword">INNER</span> <span class="keyword">JOIN</span> courses s2 <span class="keyword">on</span> sc.courseNo<span class="operator">=</span>s2.courseNo <span class="keyword">where</span> s1.sex<span class="operator">=</span><span class="string">&#x27;男&#x27;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> sc.score <span class="keyword">DESC</span> LIMIT <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/97.png"></p><h2 id="左连接"><a href="#左连接" class="headerlink" title="左连接"></a>左连接</h2><p>用于从左表中选择所有的行，并且对于右表中没有匹配的行，返回 NULL 值。</p><p>在 LEFT JOIN 中，左表是指位于 JOIN 关键字左侧的表，右表是指位于 JOIN 关键字右侧的表。LEFT JOIN 会返回左表的所有行，以及与左表中的行匹配的右表的行。如果右表中没有与左表中的行匹配的行，则会在结果中将右表的列设置为 NULL。</p><p>左连接适用于以下情况：</p><ol><li>你想要保留左表的所有行，并将与左表中的行匹配的右表的行加入结果集。</li><li>左表是主表，右表是从表，你想要基于主表的内容来扩展结果集。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表<span class="number">1</span></span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 表<span class="number">1.</span>字段<span class="operator">=</span>表<span class="number">2.</span>字段</span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> scores <span class="keyword">ON</span> students.studentNo<span class="operator">=</span>scores.studentNo;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/98.png"></p><h2 id="右连接"><a href="#右连接" class="headerlink" title="右连接"></a>右连接</h2><p>与左连接类似，不同之处在于它会返回右表的所有行，以及与右表中的行匹配的左表的行。如果左表中没有与右表中的行匹配的行，则会在结果中将左表的列设置为 NULL。</p><p>右连接适用于以下情况：</p><ol><li>你想要保留右表的所有行，并将与右表中的行匹配的左表的行加入结果集。</li><li>右表是主表，左表是从表，你想要基于主表的内容来扩展结果集。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表<span class="number">1</span></span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 表<span class="number">1.</span>字段<span class="operator">=</span>表<span class="number">2.</span>字段</span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> scores <span class="keyword">right</span> <span class="keyword">JOIN</span> courses <span class="keyword">ON</span> scores.courseNo<span class="operator">=</span>courses.courseNo;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/99.png"></p><h1 id="自关联"><a href="#自关联" class="headerlink" title="自关联"></a>自关联</h1><ul><li>表中的相同字段所表示的含义不同</li><li>自关联是同一张表做连接查询</li><li>自关联下，一定要找到同一张表可关联的不同字段</li></ul><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/100.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询有多少个省</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> areas <span class="keyword">WHERE</span> pid <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/101.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询多少个市</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> areas <span class="keyword">WHERE</span> pid <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/102.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询广东省所有的城市</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> areas a1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> areas a2 <span class="keyword">ON</span> a1.id<span class="operator">=</span>a2.pid <span class="keyword">WHERE</span> a2.pid<span class="operator">=</span><span class="string">&#x27;440000&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> areas a1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> areas a2 <span class="keyword">ON</span> a1.id<span class="operator">=</span>a2.pid <span class="keyword">WHERE</span> a1.name<span class="operator">=</span><span class="string">&#x27;广东省&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/103.png"></p><h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><blockquote><p>一条select语句中，嵌入了另一个select语句，那么嵌入的select语句称之为子查询。</p><blockquote><p>外层的第一条select语句为主查询</p></blockquote></blockquote><h2 id="子查询和主查询的关系"><a href="#子查询和主查询的关系" class="headerlink" title="子查询和主查询的关系"></a>子查询和主查询的关系</h2><ul><li><p>子查询嵌入到主查询中</p></li><li><p>子查询是辅助主查询的，要么充当条件，要么充当数据源；</p></li><li><p>子查询是可以独立存在的语句，是一条完整的select语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询大于平均年龄的学生记录</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> age<span class="operator">&gt;</span>(<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(age) <span class="keyword">FROM</span> students);</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/104.png"></p><blockquote><p>标量子查询：子查询返回的结果只有一个值（一行一列），在主查询的条件中一般用比较运算符</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询30岁学生的成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> score <span class="keyword">FROM</span> scores <span class="keyword">WHERE</span> studentNo <span class="keyword">IN</span>(<span class="keyword">SELECT</span> studentNo <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> age <span class="operator">=</span><span class="number">30</span>)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/105.png"></p><blockquote><p>列子查询：子查询返回的结果是一列（一列多行），条件中一般用in</p></blockquote></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询所有女生的信息和成绩</span></span><br><span class="line"><span class="comment">-- 内连接：</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">inner</span> <span class="keyword">join</span> scores <span class="keyword">on</span> students.studentNo<span class="operator">=</span>scores.studentNo <span class="keyword">where</span> sex<span class="operator">=</span><span class="string">&#x27;女&#x27;</span>;</span><br><span class="line"><span class="comment">--   where为子查询的条件</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> sex <span class="operator">=</span><span class="string">&#x27;女&#x27;</span>) femalestu <span class="keyword">INNER</span> <span class="keyword">JOIN</span> scores sc <span class="keyword">ON</span> femalestu.studentNo<span class="operator">=</span>sc.studentNo</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/106.png"></p><blockquote><p>表级子查询：子查询的结果返回一张表（多行多列），一般和其他表联合查询</p></blockquote><h2 id="数据准备-2"><a href="#数据准备-2" class="headerlink" title="数据准备"></a>数据准备</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> departments; </span><br><span class="line"><span class="comment">/* 创建部门表 */</span> </span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> departments ( </span><br><span class="line">deptid <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">primary</span> key, <span class="comment">/* 部门编号， 与 employees 表 deptid 关联 */</span> </span><br><span class="line">deptname <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="comment">/* 部门名称 */</span> </span><br><span class="line">); <span class="comment">/* 向部门表插入数据 */</span> </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> departments <span class="keyword">values</span> (<span class="string">&#x27;1001&#x27;</span>, <span class="string">&#x27; 市场部 &#x27;</span> ); </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> departments <span class="keyword">values</span> (<span class="string">&#x27;1002&#x27;</span>, <span class="string">&#x27; 测试部 &#x27;</span> ); </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> departments <span class="keyword">values</span> (<span class="string">&#x27;1003&#x27;</span>, <span class="string">&#x27; 开发部 &#x27;</span> ) ; </span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> employees; <span class="comment">/* 创建员工表 */</span> </span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employees ( </span><br><span class="line">empid <span class="type">int</span> <span class="keyword">primary</span> key, <span class="comment">/* 职工编号 */</span> </span><br><span class="line">empname <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>, <span class="comment">/* 姓名 */</span> <span class="comment">-- 姓名 </span></span><br><span class="line">sex <span class="type">varchar</span>(<span class="number">4</span>) <span class="keyword">default</span> <span class="keyword">null</span>, <span class="comment">/* 性别 */</span> <span class="comment">-- 性别 </span></span><br><span class="line">deptid <span class="type">int</span> <span class="keyword">default</span> <span class="keyword">null</span>, <span class="comment">/* 部门编号， 与 departments 表 deptid 关联 */</span> </span><br><span class="line">jobs <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="keyword">null</span>, <span class="comment">/* 岗位名称 */</span> </span><br><span class="line">politicalstatus <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="keyword">null</span>, <span class="comment">/* 政治面貌 */</span> </span><br><span class="line">leader <span class="type">int</span> <span class="keyword">default</span> <span class="keyword">null</span> <span class="comment">/* 上级领导的职工编号 */</span> </span><br><span class="line">); <span class="comment">/* 向员工表插入数据 */</span> </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employees <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27; 王昭君 &#x27;</span> , <span class="string">&#x27; 女 &#x27;</span> , <span class="string">&#x27; 1003&#x27;</span>, <span class="string">&#x27; 开发 &#x27;</span> , <span class="string">&#x27; 群众 &#x27;</span> , <span class="string">&#x27;9&#x27;</span>); </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employees <span class="keyword">values</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27; 诸葛亮 &#x27;</span> , <span class="string">&#x27; 男 &#x27;</span> , <span class="string">&#x27; 1003&#x27;</span>, <span class="string">&#x27; 开发 &#x27;</span> , <span class="string">&#x27; 群众 &#x27;</span> , <span class="string">&#x27;9&#x27;</span>); </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employees <span class="keyword">values</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27; 张飞 &#x27;</span> , <span class="string">&#x27; 男 &#x27;</span> , <span class="string">&#x27; 1002&#x27;</span>, <span class="string">&#x27; 测试 &#x27;</span> , <span class="string">&#x27; 团员 &#x27;</span> , <span class="string">&#x27;4&#x27;</span>); </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employees <span class="keyword">values</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27; 白起 &#x27;</span> , <span class="string">&#x27; 男 &#x27;</span> , <span class="string">&#x27; 1002&#x27;</span>, <span class="string">&#x27; 测试经理 &#x27;</span> , <span class="string">&#x27; 党员 &#x27;</span> , <span class="keyword">null</span>); </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employees <span class="keyword">values</span> (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27; 大乔 &#x27;</span> , <span class="string">&#x27; 女 &#x27;</span> , <span class="string">&#x27; 1002&#x27;</span>, <span class="string">&#x27; 测试 &#x27;</span> , <span class="string">&#x27; 党员 &#x27;</span> , <span class="string">&#x27;4&#x27;</span>); </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employees <span class="keyword">values</span> (<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27; 孙尚香 &#x27;</span> , <span class="string">&#x27; 女 &#x27;</span> , <span class="string">&#x27; 1001&#x27;</span>, <span class="string">&#x27; 市场 &#x27;</span> , <span class="string">&#x27; 党员 &#x27;</span> , <span class="string">&#x27; 12&#x27;</span>); </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employees <span class="keyword">values</span> (<span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27; 百里玄策 &#x27;</span> , <span class="string">&#x27; 男 &#x27;</span> , <span class="string">&#x27; 1001&#x27;</span>, <span class="string">&#x27; 市场 &#x27;</span> , <span class="string">&#x27; 团员 &#x27;</span> , <span class="string">&#x27; 12&#x27;</span>); </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employees <span class="keyword">values</span> (<span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27; 小乔 &#x27;</span> , <span class="string">&#x27; 女 &#x27;</span> , <span class="string">&#x27; 1002&#x27;</span>, <span class="string">&#x27; 测试 &#x27;</span> , <span class="string">&#x27; 群众 &#x27;</span> , <span class="string">&#x27;4&#x27;</span>); </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employees <span class="keyword">values</span> (<span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27; 百里守约 &#x27;</span> , <span class="string">&#x27; 男 &#x27;</span> , <span class="string">&#x27; 1003&#x27;</span>, <span class="string">&#x27; 开发经理 &#x27;</span> , <span class="string">&#x27; 党员 &#x27;</span> , <span class="keyword">null</span>); </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employees <span class="keyword">values</span> (<span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27; 妲己 &#x27;</span> , <span class="string">&#x27; 女 &#x27;</span> , <span class="string">&#x27; 1003&#x27;</span>, <span class="string">&#x27; 开发 &#x27;</span> , <span class="string">&#x27; 团员 &#x27;</span> , <span class="string">&#x27;9&#x27;</span>); </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employees <span class="keyword">values</span> (<span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27; 李白 &#x27;</span> , <span class="string">&#x27; 男 &#x27;</span> , <span class="string">&#x27; 1002&#x27;</span>, <span class="string">&#x27; 测试 &#x27;</span> , <span class="string">&#x27; 团员 &#x27;</span> , <span class="string">&#x27;4&#x27;</span>); </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employees <span class="keyword">values</span> (<span class="string">&#x27;12&#x27;</span>, <span class="string">&#x27; 孙膑 &#x27;</span> , <span class="string">&#x27; 男 &#x27;</span> , <span class="string">&#x27; 1001&#x27;</span>, <span class="string">&#x27; 市场经理 &#x27;</span> , <span class="string">&#x27; 党员 &#x27;</span> , <span class="keyword">null</span>); </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employees <span class="keyword">values</span> (<span class="string">&#x27;13&#x27;</span>, <span class="string">&#x27; 周瑜 &#x27;</span> , <span class="string">&#x27; 男 &#x27;</span> , <span class="string">&#x27; 1001&#x27;</span>, <span class="string">&#x27; 市场 &#x27;</span> , <span class="string">&#x27; 群众 &#x27;</span> , <span class="string">&#x27; 12&#x27;</span>); </span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> salary; <span class="comment">/* 创建工资表 */</span> </span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> salary ( </span><br><span class="line">sid <span class="type">int</span> <span class="keyword">primary</span> key, </span><br><span class="line">empid <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>, <span class="comment">/* 职工编号 , 与 employees 表 empid 关联 */</span> </span><br><span class="line">salary <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="comment">/* 工资 */</span> </span><br><span class="line">); <span class="comment">/* 向工资表插入数据 */</span> </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salary <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;2100&#x27;</span>); </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salary <span class="keyword">values</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;2000&#x27;</span>); </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salary <span class="keyword">values</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;12&#x27;</span>, <span class="string">&#x27;5000&#x27;</span>); </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salary <span class="keyword">values</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;1999&#x27;</span>); </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salary <span class="keyword">values</span> (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;1900&#x27;</span>); </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salary <span class="keyword">values</span> (<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;3000&#x27;</span>); </span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/1119.png"></p><h2 id="查询练习"><a href="#查询练习" class="headerlink" title="查询练习"></a>查询练习</h2><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/107.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/108.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 列出男职工的总数和女职工的总数</span></span><br><span class="line"><span class="keyword">SELECT</span> sex,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> employees <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/109.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 列出非党员职工的总数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> <span class="keyword">NOT</span> politicalstatus <span class="operator">=</span> <span class="string">&#x27; 党员 &#x27;</span></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/110.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 列出所有职工工号、姓名以及所在部门名称</span></span><br><span class="line"><span class="keyword">SELECT</span> empid,empname,deptname <span class="keyword">FROM</span> employees emp <span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments dp <span class="keyword">ON</span> emp.deptid<span class="operator">=</span>dp.deptid</span><br><span class="line"><span class="comment">-- 想要部门相同的一起列出在后面加oder by deptname</span></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/111.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 列出所有职工工号、姓名和对应工资</span></span><br><span class="line"><span class="keyword">SELECT</span> emp.empid,empname,salary <span class="keyword">FROM</span> employees emp <span class="keyword">INNER</span> <span class="keyword">JOIN</span> salary s <span class="keyword">ON</span> emp.empid<span class="operator">=</span>s.empid <span class="keyword">ORDER</span> <span class="keyword">BY</span> emp.empid;</span><br><span class="line"><span class="comment">-- left join，没有工资的员工也显示</span></span><br><span class="line"><span class="keyword">SELECT</span> emp.empid,empname,salary <span class="keyword">FROM</span> employees emp <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> salary s <span class="keyword">ON</span> emp.empid<span class="operator">=</span>s.empid <span class="keyword">ORDER</span> <span class="keyword">BY</span> emp.empid;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/112.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/113.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 列出领导岗的姓名以及所在部门名称</span></span><br><span class="line"><span class="keyword">SELECT</span> empname,deptname <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> leader <span class="keyword">is</span> <span class="keyword">NULL</span>) l <span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments d <span class="keyword">ON</span> l.deptid<span class="operator">=</span>d.deptid</span><br><span class="line"><span class="comment">-- 方法2</span></span><br><span class="line"><span class="keyword">select</span> empname,deptname <span class="keyword">from</span> employees e <span class="keyword">inner</span> <span class="keyword">join</span> departments d <span class="keyword">on</span> e.depid <span class="operator">=</span>d.depid <span class="keyword">where</span> leader <span class="keyword">is</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/114.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 列出职工总人数大于4的部门号和总人数</span></span><br><span class="line"><span class="keyword">SELECT</span> deptid,<span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> employees <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptid <span class="keyword">HAVING</span> <span class="built_in">count</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">4</span> </span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/115.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 列出职工总人数大于4的部门号和部门名称</span></span><br><span class="line"><span class="keyword">SELECT</span> e.deptid,deptname <span class="keyword">FROM</span> departments d <span class="keyword">INNER</span> <span class="keyword">JOIN</span> employees e <span class="keyword">ON</span> d.deptid<span class="operator">=</span>e.deptid <span class="keyword">GROUP</span> <span class="keyword">BY</span> e.deptid <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">4</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/116.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 列出开发部和测试部的职工号，姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> e.empid,e.empname <span class="keyword">FROM</span> employees e <span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments d <span class="keyword">ON</span> e.deptid<span class="operator">=</span>d.deptid <span class="keyword">WHERE</span> deptname <span class="keyword">IN</span>(<span class="string">&#x27; 开发部 &#x27;</span>,<span class="string">&#x27; 测试部 &#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/117.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 列出市场部所有女职工的姓名和政治面貌</span></span><br><span class="line"><span class="keyword">SELECT</span> e.empname,e.politicalstatus <span class="keyword">FROM</span> employees e <span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments d <span class="keyword">ON</span> e.deptid<span class="operator">=</span>d.deptid <span class="keyword">WHERE</span> deptname<span class="operator">=</span><span class="string">&#x27; 市场部 &#x27;</span> <span class="keyword">AND</span> sex<span class="operator">=</span><span class="string">&#x27; 女 &#x27;</span></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/118.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 显示出所有职工姓名和工资，包括没有工资的职工姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> e.empname,salary <span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> salary s <span class="keyword">ON</span> e.empid<span class="operator">=</span>s.empid</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/119.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 求不姓孙的所有职工的工资总和</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(salary) <span class="keyword">FROM</span> salary s <span class="keyword">INNER</span> <span class="keyword">JOIN</span> employees e <span class="keyword">ON</span> s.empid<span class="operator">=</span>e.empid <span class="keyword">WHERE</span> empname <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">&#x27; 孙% &#x27;</span></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/120png"></p><h1 id="MySQL常用内置函数"><a href="#MySQL常用内置函数" class="headerlink" title="MySQL常用内置函数"></a>MySQL常用内置函数</h1><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><ul><li>拼接字符串<code>concat(str1,str2...)</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 把12,34，&#x27;ab&#x27;拼接为一个字符串&#x27;1234ab&#x27;</span><br><span class="line">CONCAT(12,34,&#x27;ab&#x27;)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/121.png"></p><ul><li>计算字符串中字节个数<code>length(str) </code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT LENGTH(&#x27;abc&#x27;);</span><br><span class="line">SELECT LENGTH(&#x27;我&#x27;);</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/122.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 查询名字为3个字的学生信息</span><br><span class="line">SELECT * FROM students WHERE LENGTH(name)=9;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/123.png"></p><ul><li>获取字符串中的字符数<code>char_length()</code></li><li>截取字符串<ul><li><code>left(str,len)</code>返回字符串str左端的len个字符,中文和英文字母一样</li><li><code>right(str,len)</code>返回字符串str右端的len个字符</li><li><code>substring(str,pos,len)</code>返回字符串str的位置pos起len个字符，<strong>pos从1开始计数</strong></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT left(&#x27;我和你们&#x27;,3)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/124.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT right(&#x27;我和你abc&#x27;,4)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/125.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT substring(&#x27;我和你abc&#x27;,2,2)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/126.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 查询所有学生信息，按年龄从大到小排序</span><br><span class="line">SELECT * FROM students ORDER BY SUBSTRING(card,7,8)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/127.png"></p><ul><li>去除空格<ul><li><code>ltrim(str)</code>返回删除左侧空格的字符串</li><li><code>rtrim(str)</code>返回删除右侧空格的字符串</li><li><code>trim(str)</code>去除两侧空格</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT LTRIM(&#x27;                 abcd                     &#x27;);</span><br><span class="line">SELECT RTRIM(&#x27;                 abcd                     &#x27;);</span><br><span class="line">SELECT TRIM(&#x27;                 abcd                     &#x27;);</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/128.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/129.png"></p><h2 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h2><ul><li>求四舍五入值<code>round(n,d)</code>,n表示原数，d表示小数位数，默认为0</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT ROUND(1.653)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/130.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT ROUND(1.653,2)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/131.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 求学生的平均年龄并保留2位小数</span><br><span class="line">SELECT ROUND(AVG(age),2) FROM students;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/132.png"></p><ul><li>随机数<code>rand()</code>产生从0到1.0的随机浮点数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT RAND();</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/133.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 随机排序</span><br><span class="line">SELECT * FROM students ORDER BY RAND();</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/134.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/135.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 随机抽取一名学生</span><br><span class="line">SELECT name FROM students ORDER BY RAND() LIMIT 1;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/136.png"></p><h2 id="日期时间函数"><a href="#日期时间函数" class="headerlink" title="日期时间函数"></a>日期时间函数</h2><ul><li>当前日期<code>current_date()</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CURRENT_DATE</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/137.png"></p><ul><li>当前时间<code>current_time()</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CURRENT_TIME</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/138.png"></p><ul><li>当前时间（具体）<code>now()</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT NOW()</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/139.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 记录当前时间，比如下单时间</span><br><span class="line">CREATE table a (id INT,indate DATETIME);</span><br><span class="line">INSERT INTO a VALUE(1,NOW());</span><br><span class="line">SELECT * FROM a;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/140.png"></p><h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><p>存储过程procedure，即存储程序，是一条或者多条SQL语句的集合。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> 存储过程名称(参数名称)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">sql</span> 语句</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建存储过程</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> stu()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/141.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 调用存储过程stu()，用CALL</span></span><br><span class="line"><span class="keyword">CALL</span> stu();</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/142.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除存储过程</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> 存储过程;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> if <span class="keyword">exists</span> 存储过程;</span><br><span class="line"><span class="comment">-- 删除时不用括号</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> stu;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> IF <span class="keyword">EXISTS</span> stu;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/143.png"></p><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><p>视图（View）是一种虚拟的表，它是由一个或多个表的行数据经过某种逻辑组合而形成的，它本身并不存储数据，只是对查询结果的一种抽象表示。通过视图，我们可以将复杂的查询、逻辑和数据组织进行封装，以简化数据访问和管理。视图的本质就是对查询的封装。</p><ol><li><strong>虚拟性</strong>：视图本身不存储数据，它只是对查询结果的一种逻辑表示。</li><li><strong>透明性</strong>：使用视图的应用程序无需关心视图的底层实现，可以像访问普通表一样访问视图。</li><li><strong>安全性</strong>：视图可以隐藏底层表的部分列或行，只向用户暴露需要的数据，从而提高数据安全性。</li><li><strong>简化复杂性</strong>：通过视图，可以将复杂的查询逻辑封装起来，使用户可以通过简单的查询访问数据。</li><li><strong>重用性</strong>：视图可以被多个查询或应用程序共享，提高了代码的重用性。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建视图</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> 视图名称 <span class="keyword">as</span> <span class="keyword">select</span> 语句;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> boys <span class="keyword">as</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> sex<span class="operator">=</span><span class="string">&#x27;男&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/144.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看视图</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> boys <span class="keyword">WHERE</span> age<span class="operator">&gt;</span><span class="number">30</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/145.png"></p><p><strong>注意：视图的表是只读的</strong>。需要注意的是，视图中的数据是动态的，当基础表中的数据发生变化时，视图中的数据也会相应地更新。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 视图和表进行内连接操作</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> boys <span class="keyword">INNER</span> <span class="keyword">JOIN</span> scores <span class="keyword">ON</span> boys.studentNo<span class="operator">=</span>scores.studentNO</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/146.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除视图</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> 视图名称;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> if <span class="keyword">exists</span> 视图名称;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> boys;</span><br></pre></td></tr></table></figure><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>事务是多条更改数据操作的sql语句集合，是一个操作序列，这些操作要么都执行，要么都不执行，是一个不可分割的工作单位</p><ul><li>开启事务</li></ul><p>begin：开启事务后执行<strong>修改</strong>UPDATE或者<strong>删除</strong>DELETE记录语句，<strong>变更会写到缓存中而不会立刻生效</strong></p><ul><li>回滚事务</li></ul><p>rollback：放弃修改</p><ul><li>提交事务</li></ul><p>commit：将修改的事务写入实际的表中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> studentNo<span class="operator">=</span><span class="string">&#x27;001&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> scores <span class="keyword">WHERE</span> studentNo<span class="operator">=</span><span class="string">&#x27;001&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/147.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/148.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 回滚操作</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> scores;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/149.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/150.png"></p><p><strong>如果开启了一个事务，之后没有rollback也没有commit，系统出现了错误，会默认rollback</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 开启事务，删除学生信息和成绩，提交事务使两个表的删除同时生效</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> studentNo<span class="operator">=</span><span class="string">&#x27;001&#x27;</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> scores <span class="keyword">WHERE</span> studentNo<span class="operator">=</span><span class="string">&#x27;001&#x27;</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;<span class="comment">-- 一旦提交事务，两个删除操作同时生效</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> scores;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/151.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/152.png"></p><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>可以加快select查询的速度，但是会降低更新表的速度，因为在保存文件的同时会同时保存索引文件。可以在更改记录前先删除索引</p><h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index 索引名称 <span class="keyword">on</span> 表名(字段名称(长度))</span><br><span class="line"><span class="comment">-- 如果指定字段是字符串，需要指定长度，建议长度与定义字段时长度一致</span></span><br><span class="line"><span class="comment">-- 字段类型如果不是字符串，可以不填写长度部分</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 为students表的age字段创建索引，名为age_index</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX age_index <span class="keyword">ON</span> students (age);</span><br><span class="line"><span class="comment">-- 为students表的name字段创建索引，名为name_index</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX name_index <span class="keyword">ON</span> students (name(<span class="number">10</span>));</span><br><span class="line"><span class="comment">-- varchar(10)</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- where条件后面的字段，数据库系统会自动查找是否有索引</span></span><br><span class="line"><span class="comment">-- 自动调用age_index</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> age<span class="operator">=</span><span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 自动调用name_index</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> name<span class="operator">=</span><span class="string">&#x27;李白&#x27;</span></span><br><span class="line"><span class="comment">-- 不会调用任何索引，因为没有创建索引，会全表一个个查找</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> name<span class="operator">=</span><span class="string">&#x27;李白&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> index <span class="keyword">from</span> 表名</span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> students</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/153.png"></p><p>系统会为主键自动创建索引</p><h2 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> index 索引名 <span class="keyword">on</span> 表名;</span><br><span class="line"><span class="keyword">DROP</span> INDEX age_index <span class="keyword">ON</span> students;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/154.png"></p><h1 id="使用命令行"><a href="#使用命令行" class="headerlink" title="使用命令行"></a>使用命令行</h1><h2 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 登录</span></span><br><span class="line">mysql <span class="operator">-</span>h[主机名] <span class="operator">-</span>u 用户名 <span class="operator">-</span>p</span><br><span class="line"><span class="comment">-- -u的意思是用户名</span></span><br><span class="line"><span class="comment">-- -h，当登录的mysql不在本机上，后跟主机ip地址</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u root <span class="operator">-</span>p</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/155.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看数据库</span></span><br><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/156.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 打开数据库</span></span><br><span class="line">use mydb;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看数据库中的表</span></span><br><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/157.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询内容</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/158.png"></p><p>可以使用<code>chcp 65001</code>将命令行编码方式改为utf-8</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看表的结构</span></span><br><span class="line"><span class="keyword">desc</span> students;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/159.png"></p><hr><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">create</span> database 数据库名 <span class="keyword">default</span> charset[默认字符集];</span><br><span class="line"><span class="keyword">create</span> database test1 <span class="keyword">default</span> charset utf8;</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/160.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除数据库</span></span><br><span class="line"><span class="keyword">drop</span> database test1;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/04/04/sql%E5%9F%BA%E7%A1%80/161.png"></p><h2 id="修改用户密码"><a href="#修改用户密码" class="headerlink" title="修改用户密码"></a>修改用户密码</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> 数据库名 <span class="keyword">to</span> 用户名@<span class="string">&#x27;登录主机&#x27;</span> indentified <span class="keyword">by</span> <span class="string">&#x27;密码&#x27;</span> <span class="keyword">with</span> <span class="keyword">grant</span> option;</span><br></pre></td></tr></table></figure><ul><li><code>grant all on</code>:代表为用户赋权；</li><li>数据库名：可以是*，代表所有数据库；</li><li>表名：可以是*，代表所有表，</li><li><code>to 用户名</code>：指定要创建用户的名称</li><li><code>@&#39;登录主机&#39; </code>:@localhost代表只能在本机登录，@’%‘代表可以远程</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;表&quot;&gt;&lt;a href=&quot;#表&quot; class=&quot;headerlink&quot; title=&quot;表&quot;&gt;&lt;/a&gt;表&lt;/h1&gt;&lt;p&gt;由行和列组成的二维表格&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;行，又叫记录&lt;/li&gt;
&lt;li&gt;列，又叫字段&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;SQL语言（s</summary>
      
    
    
    
    <category term="database" scheme="http://example.com/categories/database/"/>
    
    
    <category term="sql" scheme="http://example.com/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>git操作</title>
    <link href="http://example.com/2024/03/31/git%E6%93%8D%E4%BD%9C/"/>
    <id>http://example.com/2024/03/31/git%E6%93%8D%E4%BD%9C/</id>
    <published>2024-03-31T07:58:57.000Z</published>
    <updated>2024-03-31T13:03:16.102Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初步操作"><a href="#初步操作" class="headerlink" title="初步操作"></a>初步操作</h1><p>先进入相关的目录，输入</p><p><code>git config --global user.name &quot;username&quot;</code></p><p><code>git config --global user.email &quot;email&quot;</code>进行全局配置。输入<code>git init</code>在本地进行初始化，相关目录下会生成.git文件夹</p><p><img src="keep/source/images/star.gif" data-original="/2024/03/31/git%E6%93%8D%E4%BD%9C/image-20240331164159001.png"></p><p>这个文件夹会保存每个git版本和变化</p><h1 id="记录文件"><a href="#记录文件" class="headerlink" title="记录文件"></a>记录文件</h1><p>初始化后，文件没有被记录，使用<code>git add</code>将文件加进git版本控制系统中，文件全部添加使用<code>git add .</code>。添加后git暂时保存。提交需要使用<code>git commit</code>命令，会出现vim终端编辑器写提交说明。</p><p><img src="keep/source/images/star.gif" data-original="/2024/03/31/git%E6%93%8D%E4%BD%9C/image-20240331202057759.png"></p><p>pycharm的terminal按esc退出无效，左键点击terminal的同时按esc。</p><p>git按行来比对文件的不同。只有新增和删除，同一行的修改则是删除一行，新增一行</p><p><img src="keep/source/images/star.gif" data-original="/2024/03/31/git%E6%93%8D%E4%BD%9C/image-20240331202617796.png"></p><p>提交成功后，可以用<code>git log</code>来查看提交的日志信息（每次git提交都会记录）。</p><p><img src="keep/source/images/star.gif" data-original="/2024/03/31/git%E6%93%8D%E4%BD%9C/image-20240331203815030.png"></p><p>commit后的字符是随机id，是提交的唯一标识。</p><p><code> git commit -m &quot;the second try&quot;</code>是写提交说明的简单化操作</p><p><img src="keep/source/images/star.gif" data-original="/2024/03/31/git%E6%93%8D%E4%BD%9C/image-20240331204610196.png"></p><p>修改文件后：</p><p><img src="keep/source/images/star.gif" data-original="/2024/03/31/git%E6%93%8D%E4%BD%9C/image-20240331204725265.png"></p><p>提交规范说明<code>git commit -m &quot;fix(test): change content&quot;</code></p><h1 id="回退版本"><a href="#回退版本" class="headerlink" title="回退版本"></a>回退版本</h1><h2 id="硬重置"><a href="#硬重置" class="headerlink" title="硬重置"></a>硬重置</h2><p>会覆盖所有变更。</p><p>用<code>git log</code>查看几次提交的id，输入<code>git  reset --hard commit id</code>就可以回退到这次提交的状态</p><p><img src="keep/source/images/star.gif" data-original="/2024/03/31/git%E6%93%8D%E4%BD%9C/image-20240331205334737.png"></p><p>后面提交的其他版本也被清空，可以用<code>git reflog</code>查看</p><h1 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h1><p>想要在不同版本切换的好方法，团队也可以利用这个合并（merge）团队合作的代码。</p><p><code>git branch branchname</code>创建分支。<code>git branch -a</code>查看当前已建立的分支。</p><p><img src="keep/source/images/star.gif" data-original="/2024/03/31/git%E6%93%8D%E4%BD%9C/image-20240331205744383.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/03/31/git%E6%93%8D%E4%BD%9C/image-20240331205829466.png"></p><p>使用<code>git checkout branchname</code>进行切换分支操作</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;初步操作&quot;&gt;&lt;a href=&quot;#初步操作&quot; class=&quot;headerlink&quot; title=&quot;初步操作&quot;&gt;&lt;/a&gt;初步操作&lt;/h1&gt;&lt;p&gt;先进入相关的目录，输入&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git config --global user.name &amp;quot;u</summary>
      
    
    
    
    <category term="GitHub" scheme="http://example.com/categories/GitHub/"/>
    
    
    <category term="github" scheme="http://example.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Dos命令</title>
    <link href="http://example.com/2024/03/30/Dos%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2024/03/30/Dos%E5%91%BD%E4%BB%A4/</id>
    <published>2024-03-30T12:11:50.000Z</published>
    <updated>2024-03-30T13:44:34.279Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><p><code>dir</code>显示当前目录</p><p><img src="keep/source/images/star.gif" data-original="/2024/03/30/Dos%E5%91%BD%E4%BB%A4/image-20240330203130125.png"></p><p><code>dir /p</code>分页展示</p><p><img src="keep/source/images/star.gif" data-original="/2024/03/30/Dos%E5%91%BD%E4%BB%A4/image-20240330203735575.png"></p><p><code>dir /b</code>只显示文件名称</p><p><img src="keep/source/images/star.gif" data-original="/2024/03/30/Dos%E5%91%BD%E4%BB%A4/image-20240330205351092.png"></p><p><code>盘符:</code>切换盘符</p><p><img src="keep/source/images/star.gif" data-original="/2024/03/30/Dos%E5%91%BD%E4%BB%A4/image-20240330203243075.png"></p><p><code>cd dir</code>切换到当前盘的某个目录下，tab键可以帮助补全</p><p><img src="keep/source/images/star.gif" data-original="/2024/03/30/Dos%E5%91%BD%E4%BB%A4/image-20240330203452073.png"></p><p><code>md</code>创建文件夹，<code>rd</code>删除文件夹</p><p><img src="keep/source/images/star.gif" data-original="/2024/03/30/Dos%E5%91%BD%E4%BB%A4/image-20240330203941665.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/03/30/Dos%E5%91%BD%E4%BB%A4/image-20240330203957640.png"></p><p>复制文件要进入到被粘贴文件的路径，将1.txt复制到demo1目录下，<code>copy 1.txt demo1\1.txt</code></p><p><img src="keep/source/images/star.gif" data-original="/2024/03/30/Dos%E5%91%BD%E4%BB%A4/image-20240330204312224.png"></p><p>复制文件到当前路径下并重命名，<code>copy 1.txt 2.txt</code></p><p><img src="keep/source/images/star.gif" data-original="/2024/03/30/Dos%E5%91%BD%E4%BB%A4/image-20240330204855205.png"></p><p>重命名文件名，<code>ren oldfilename newfilename</code></p><p><img src="keep/source/images/star.gif" data-original="/2024/03/30/Dos%E5%91%BD%E4%BB%A4/image-20240330205233019.png"></p><p>将命令的结果保存到文件，<code>&gt; filename</code></p><p><img src="keep/source/images/star.gif" data-original="/2024/03/30/Dos%E5%91%BD%E4%BB%A4/image-20240330205444840.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/03/30/Dos%E5%91%BD%E4%BB%A4/image-20240330205510501.png"></p><p><code>cls</code>清屏命令</p><p><code>del</code>删除文件</p><p><img src="keep/source/images/star.gif" data-original="/2024/03/30/Dos%E5%91%BD%E4%BB%A4/image-20240330210233942.png"></p><p>批处理文件</p><p><img src="keep/source/images/star.gif" data-original="/2024/03/30/Dos%E5%91%BD%E4%BB%A4/image-20240330210531461.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/03/30/Dos%E5%91%BD%E4%BB%A4/image-20240330210627780.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/03/30/Dos%E5%91%BD%E4%BB%A4/image-20240330210642523.png"></p><p>命令管道符<code>command1|command2|command3</code>，后一个命令是对前一个命令结果进行处理</p><p><img src="keep/source/images/star.gif" data-original="/2024/03/30/Dos%E5%91%BD%E4%BB%A4/image-20240330213827544.png"></p><p>查看文件夹的目录及<code>tree</code>，详细显示<code>tree /f</code></p><p><img src="keep/source/images/star.gif" data-original="/2024/03/30/Dos%E5%91%BD%E4%BB%A4/image-20240330214112032.png"></p><h1 id="非文件"><a href="#非文件" class="headerlink" title="非文件"></a>非文件</h1><p>查看时间<code>time</code></p><p><img src="keep/source/images/star.gif" data-original="/2024/03/30/Dos%E5%91%BD%E4%BB%A4/image-20240330210735475.png"></p><p>查看日期<code>date</code></p><p><img src="keep/source/images/star.gif" data-original="/2024/03/30/Dos%E5%91%BD%E4%BB%A4/image-20240330210803779.png"></p><p>退出Dos：<code>exit</code></p><p>查看Dos命令：<code>help</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;文件&quot;&gt;&lt;a href=&quot;#文件&quot; class=&quot;headerlink&quot; title=&quot;文件&quot;&gt;&lt;/a&gt;文件&lt;/h1&gt;&lt;p&gt;&lt;code&gt;dir&lt;/code&gt;显示当前目录&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;keep/source/images/star.gif&quot; d</summary>
      
    
    
    
    
    <category term="Dos" scheme="http://example.com/tags/Dos/"/>
    
  </entry>
  
  <entry>
    <title>web应用</title>
    <link href="http://example.com/2024/03/30/web%E5%BA%94%E7%94%A8/"/>
    <id>http://example.com/2024/03/30/web%E5%BA%94%E7%94%A8/</id>
    <published>2024-03-30T12:04:11.000Z</published>
    <updated>2024-03-31T04:09:20.561Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络体系"><a href="#网络体系" class="headerlink" title="网络体系"></a>网络体系</h1><p>计算机网络是用通信设备和线路将分散在不同地点的有独立功能的多个计算机系统互相连接起来，并按照网络协议进行数据通信，实现资源共享的计算机集合。</p><h2 id="网络分类"><a href="#网络分类" class="headerlink" title="网络分类"></a>网络分类</h2><h3 id="范围划分"><a href="#范围划分" class="headerlink" title="范围划分"></a>范围划分</h3><ul><li><p>局域网LAN（local area network）</p><p>范围较小，几公里作用，一栋楼房或者一个单位</p></li><li><p>广域网WAN（wide area network）</p><ul><li>范围通常为几十~几千公里，也称为远程网</li></ul></li><li><p>域域网或市域网（metropolitan area network）</p><p>范围在广域网和局域网之间，例如一个城市</p></li></ul><h3 id="拓扑结构划分"><a href="#拓扑结构划分" class="headerlink" title="拓扑结构划分"></a>拓扑结构划分</h3><ul><li>星型</li><li>总线型</li><li>环型</li><li>树形</li><li>网状</li></ul><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><p>为进行数据交换而建立的规则、标准或约定。协议庞大且复杂但不绝对可靠</p><h2 id="网络分层"><a href="#网络分层" class="headerlink" title="网络分层"></a>网络分层</h2><p><img src="keep/source/images/star.gif" data-original="/2024/03/30/web%E5%BA%94%E7%94%A8/image-20240330221523889.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/03/30/web%E5%BA%94%E7%94%A8/image-20240330222349986.png"></p><p>优点：</p><p>1、使复杂系统简化</p><p>2、易于维护、系统的更新</p><p>3、某层功能变化不会影响系统的其他部分</p><p>缺点：</p><p>1、有些功能可能在不同层次重复出现</p><p>2、某层的功能可能需要仅存在其他某层的信息</p><h3 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h3><h4 id="网线"><a href="#网线" class="headerlink" title="网线"></a>网线</h4><p><img src="keep/source/images/star.gif" data-original="/2024/03/30/web%E5%BA%94%E7%94%A8/image-20240330222832939.png"></p><h4 id="强制解调器"><a href="#强制解调器" class="headerlink" title="强制解调器"></a>强制解调器</h4><p>即猫，它能把计算机的数字信号翻译成可沿普通电话线传送的模拟信号，而这些模拟信号又可被线路另一端的另一个调制解调器接收，并译成计算机可懂的语言。这一简单过程完成了两台计算机间的通信。</p><h3 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h3><h4 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h4><p>二层交换机：工作于OSI模型的第二层的交换机，故称为二层交换机，可以识别数据包中的mac地址信息，根据mac地址进行转发，并将这些mac地址与对应的端口记录在自己内部的一个地址表中。</p><h3 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h3><p>协议：IP协议</p><h4 id="ip（Internet-Protocol）分类"><a href="#ip（Internet-Protocol）分类" class="headerlink" title="ip（Internet Protocol）分类"></a>ip（Internet Protocol）分类</h4><p>是能使连接到网上的所有计算机网络实现互相通信的一套规则，只要遵守IP协议就可以与因特网互联通。ip具有唯一性，根据用户性质的不同分为5类。</p><p><img src="keep/source/images/star.gif" data-original="/2024/03/30/web%E5%BA%94%E7%94%A8/image-20240330223931631.png"></p><h3 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h3><h4 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h4><ul><li><h2 id="（Transmission-Control-Protocol）传输控制协议，基于连接的协议-建立连接：三次握手"><a href="#（Transmission-Control-Protocol）传输控制协议，基于连接的协议-建立连接：三次握手" class="headerlink" title="（Transmission Control Protocol）传输控制协议，基于连接的协议- 建立连接：三次握手"></a>（Transmission Control Protocol）传输控制协议，基于连接的协议<br>- 建立连接：三次握手</h2><pre><code>- 第一次握手：客户端发送syn包给服务器，询问是否可以连接- 第二次握手：服务器接受请求，发送syn+ack给客户端确认可以连接- 由客户端发送ack给服务器，确认连接，建立起连接</code></pre><ul><li><h2 id="断开连接：四次挥手"><a href="#断开连接：四次挥手" class="headerlink" title="断开连接：四次挥手"></a>断开连接：四次挥手</h2><ul><li>第一次挥手：客户端发送fin包给服务器，请求关闭连接</li><li>第二次挥手：服务器端对请求关闭连接进行确认</li><li>第三次挥手：服务器主动发送关闭连接的请求给客户</li><li>第四次挥手：客户端发送确认关闭连接给服务器端，服务器客户端连接关闭</li></ul></li></ul></li></ul><h4 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h4><ul><li>（User Data Protocol）用户数据报协议，基于非连接的协议</li></ul><h4 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h4><ul><li>TCP比UDP复杂，资源占用损耗大一些，信息准备，稳定性好<ul><li>文件传输、邮件发送，网页浏览一般使用TCP</li></ul></li><li>UDP性能损耗少，资源占用少，稳定性差，只适用于一次只传送少量数据，对可靠性要求不高的应用环境。<ul><li>电话、直播使用udp</li></ul></li></ul><h3 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a>会话层</h3><p>建立或解除端对端之间的联系</p><h3 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a>表示层</h3><p>对数据进行处理加密</p><h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><p>文件传输、电子右键、文件服务…</p><h4 id="协议-1"><a href="#协议-1" class="headerlink" title="协议"></a>协议</h4><ul><li>文件传输：FTP、TFTP、NFS</li><li>电子邮件：SCHP、POP3</li><li>WWW应用：HTTP</li><li>远程登陆：Telnet、rlogin</li><li>网络管理：SNMP</li><li>名字管理DNS</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;网络体系&quot;&gt;&lt;a href=&quot;#网络体系&quot; class=&quot;headerlink&quot; title=&quot;网络体系&quot;&gt;&lt;/a&gt;网络体系&lt;/h1&gt;&lt;p&gt;计算机网络是用通信设备和线路将分散在不同地点的有独立功能的多个计算机系统互相连接起来，并按照网络协议进行数据通信，实现资源共</summary>
      
    
    
    
    
    <category term="network" scheme="http://example.com/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>测试点设计</title>
    <link href="http://example.com/2024/03/25/%E6%B5%8B%E8%AF%95%E7%82%B9%E8%AE%BE%E8%AE%A1/"/>
    <id>http://example.com/2024/03/25/%E6%B5%8B%E8%AF%95%E7%82%B9%E8%AE%BE%E8%AE%A1/</id>
    <published>2024-03-25T10:27:24.000Z</published>
    <updated>2024-04-06T15:42:34.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对穷举场景设计测试点"><a href="#对穷举场景设计测试点" class="headerlink" title="对穷举场景设计测试点"></a>对穷举场景设计测试点</h1><h2 id="等价类划分法"><a href="#等价类划分法" class="headerlink" title="等价类划分法"></a>等价类划分法</h2><h3 id="说明-分类-步骤"><a href="#说明-分类-步骤" class="headerlink" title="说明|分类|步骤"></a>说明|分类|步骤</h3><p>一种典型的、重要的黑盒测试方法，是指某个输入域的子集合，在该子集合中，所有的输入数据对于揭露软件中的错误都是等效的。</p><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E6%B5%8B%E8%AF%95%E7%82%B9%E8%AE%BE%E8%AE%A1/des.png"></p><ul><li>有效等价只取其一，每个无效集合取1个</li><li>设计一个新的测试用例，使其<strong>尽可能多的覆盖</strong>尚未被覆盖的有效等价类，重复这一步直到所有的有效等价类都被覆盖为止；设计一个新的测试用例，使其<strong>仅覆盖一个</strong>尚未被覆盖的无效等价类，重复这一步直到所有的无效等价类都被覆盖为止</li></ul><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E6%B5%8B%E8%AF%95%E7%82%B9%E8%AE%BE%E8%AE%A1/scene.png"></p><p>通过等价类把穷尽测试转化为有限的有效测试</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><ul><li>用户名长度6~18，必须以字母数字下划线两者或两者以上组合</li><li>微信红包<ul><li>按数据范围划分：不超过两位小数的值</li></ul></li></ul><h1 id="对限定边界规则设计测试点"><a href="#对限定边界规则设计测试点" class="headerlink" title="对限定边界规则设计测试点"></a>对限定边界规则设计测试点</h1><h2 id="边界值分析法"><a href="#边界值分析法" class="headerlink" title="边界值分析法"></a>边界值分析法</h2><h3 id="边界范围节点"><a href="#边界范围节点" class="headerlink" title="边界范围节点"></a>边界范围节点</h3><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E6%B5%8B%E8%AF%95%E7%82%B9%E8%AE%BE%E8%AE%A1/boundaries.png"><br>内点一般取居中的点<br><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E6%B5%8B%E8%AF%95%E7%82%B9%E8%AE%BE%E8%AE%A1/dot.png"><br>最多7条</p><h3 id="边界值法设计用例步骤"><a href="#边界值法设计用例步骤" class="headerlink" title="边界值法设计用例步骤"></a>边界值法设计用例步骤</h3><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E6%B5%8B%E8%AF%95%E7%82%B9%E8%AE%BE%E8%AE%A1/process.png"></p><h3 id="案例优化"><a href="#案例优化" class="headerlink" title="案例优化"></a>案例优化</h3><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E6%B5%8B%E8%AF%95%E7%82%B9%E8%AE%BE%E8%AE%A1/case.png"></p><h3 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h3><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E6%B5%8B%E8%AF%95%E7%82%B9%E8%AE%BE%E8%AE%A1/sce.png"><br>单个输入框，常用的方式：边界+等效类</p><h1 id="对多条件依赖关系设计测试点"><a href="#对多条件依赖关系设计测试点" class="headerlink" title="对多条件依赖关系设计测试点"></a>对多条件依赖关系设计测试点</h1><h2 id="因果图法"><a href="#因果图法" class="headerlink" title="因果图法"></a>因果图法</h2><p>使用场景：当需求中存在多个条件，不同条件中存在不同的结果，就会使用因果图法。</p><p>分别列出需求中的因子（条件）和结果</p><h2 id="判定表法"><a href="#判定表法" class="headerlink" title="判定表法"></a>判定表法</h2><ul><li>等价类边界值分析法主要关注单个输入类条件的测试</li><li>并未考虑输入条件之间的各种组合、输入条件于输出结果之间有相互制约关系的测试</li><li>判定表法要求多个条件之间有依赖或制约关系</li></ul><h3 id="判定表定义及组成部分"><a href="#判定表定义及组成部分" class="headerlink" title="判定表定义及组成部分"></a>判定表定义及组成部分</h3><p>判定表&#x3D;条件桩（需求中的因子）+动作桩（需求中的结果）+条件项（不同因子的组合）+动作项（不同因子造成结果的组合） </p><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E6%B5%8B%E8%AF%95%E7%82%B9%E8%AE%BE%E8%AE%A1/table1.png"><br><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E6%B5%8B%E8%AF%95%E7%82%B9%E8%AE%BE%E8%AE%A1/table2.png"><br><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E6%B5%8B%E8%AF%95%E7%82%B9%E8%AE%BE%E8%AE%A1/table3.png"><br><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E6%B5%8B%E8%AF%95%E7%82%B9%E8%AE%BE%E8%AE%A1/table4.png"></p><h3 id="判定表法设计用例步骤"><a href="#判定表法设计用例步骤" class="headerlink" title="判定表法设计用例步骤"></a>判定表法设计用例步骤</h3><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E6%B5%8B%E8%AF%95%E7%82%B9%E8%AE%BE%E8%AE%A1/tablepro.png"></p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E6%B5%8B%E8%AF%95%E7%82%B9%E8%AE%BE%E8%AE%A1/used.png"><br>如果条件超过4个，就不适合覆盖所有条件，应采用正交法来解决。</p><h2 id="正交实验法"><a href="#正交实验法" class="headerlink" title="正交实验法"></a>正交实验法</h2><p>利用因果图设计测试用例时，作为输入条件的原因和输出结果之间的因果关系，有时候很难从软件需求规格说明中得到。往往因果关系非常庞大，提取的用例数目多的惊人，则可以采用正交实验设计方法。</p><h3 id="正交表"><a href="#正交表" class="headerlink" title="正交表"></a>正交表</h3><p>$$<br>L_n(m^k)<br>$$</p><ul><li><p>n是表的行数，也就是需要测试组合的次数</p></li><li><p>k是表的列数，表示控件的个数（因素的个数，或因子个数）</p></li><li><p>m是每个控件包含的取值个数（各因素的水平数，即各因素的状态数）</p></li><li><p>如<br>$$<br>L_9(3^4)<br>$$<br>有4个控件</p><p>每个控件有3个取值</p><p>9为需要测试的组合个数</p></li></ul><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E6%B5%8B%E8%AF%95%E7%82%B9%E8%AE%BE%E8%AE%A1/form.png"></p><h1 id="对于项目业务设计测试点"><a href="#对于项目业务设计测试点" class="headerlink" title="对于项目业务设计测试点"></a>对于项目业务设计测试点</h1><h2 id="场景法"><a href="#场景法" class="headerlink" title="场景法"></a>场景法</h2><p>对项目的业务流程功能用例的设计基于场景法来进行设计</p><p>通过场景描述的业务流程（业务逻辑），也包括代码实现逻辑，设计用例来遍历场景（路径），验证软件系统功能的正确性</p><p>正常流&#x2F;基本流：从起点开始，通过各个路径，在最后的节点结束。模拟用户正常操作的流程</p><p>异常流&#x2F;错误流&#x2F;备选流：从起点开始，可能在某个节点结束或者会返回上一节点，模拟用户错误的操作的流程。</p><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p>业务流程图是基于场景法设计测试用例的依据，由产品去提供业务流程图</p><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E6%B5%8B%E8%AF%95%E7%82%B9%E8%AE%BE%E8%AE%A1/business1.png"><br><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E6%B5%8B%E8%AF%95%E7%82%B9%E8%AE%BE%E8%AE%A1/business2.png"></p><ul><li>覆盖业务测试需要使用流程图法</li><li>先测试业务、再测试单功能、单模块、单页面<br><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E6%B5%8B%E8%AF%95%E7%82%B9%E8%AE%BE%E8%AE%A1/oder.png"></li></ul><h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E6%B5%8B%E8%AF%95%E7%82%B9%E8%AE%BE%E8%AE%A1/site1.png"><br><strong>业务用例必须先测</strong><br>案例3-1：<br><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E6%B5%8B%E8%AF%95%E7%82%B9%E8%AE%BE%E8%AE%A1/case1.png"><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E6%B5%8B%E8%AF%95%E7%82%B9%E8%AE%BE%E8%AE%A1/case2.png"></p><h2 id="错误推测法（反推法）"><a href="#错误推测法（反推法）" class="headerlink" title="错误推测法（反推法）"></a>错误推测法（反推法）</h2><ul><li>通过经验推测程序中所有可能出现的问题，主要依靠经验、知识、直觉</li><li>根据经验列举出可能出现问题的清单，根据清单分析问题可能原因，推测发现缺陷。</li><li>探索性测试</li></ul><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E6%B5%8B%E8%AF%95%E7%82%B9%E8%AE%BE%E8%AE%A1/faultcase.png"></p><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E6%B5%8B%E8%AF%95%E7%82%B9%E8%AE%BE%E8%AE%A1/sites.png"></p><ul><li>当项目用例都执行完毕且BUG修复完成，离上线还有一段时间，在这段时间中可以使用错误推测法复测主要业务或未测试的功能</li></ul><h1 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h1><ol><li>语句覆盖：可执行语句至少被执行一次；</li><li>判定覆盖：每个判断的取真分支和取假分支至少经历一次；</li><li>条件覆盖：每个条件的可能取值一次；</li><li>判定条件覆盖：每个判定真假各一次，每个判定中的条件各取一次</li><li>条件组合覆盖：每个条件的所有可能都至少出现一次，并且判定结果至少出现一次 ；与条件覆盖的区别：他不是简单要求每个条件出现“真”和“假”两种结果，而是要求这些结果所有可能至少出现一次；<strong>判定中所有条件的总和</strong></li><li>路径测试：执行所有可能的执行路径；</li><li>基本路径测试（判断&#x2F;条件覆盖）： 路径测试执行了每个路径，每个判定的结果肯定经历过一次</li><li>循环测试：是一种测试方法，其核心思想是多次重复执行相同或类似的测试用例，以发现软件系统在长时间运行或多次执行下的稳定性、性能、内存管理等方面的问题。循环测试通常用于评估软件系统在长时间运行或重复执行下的表现，并且可以帮助识别潜在的内存泄漏、资源泄漏、性能下降等问题。</li></ol><h1 id="用例评审"><a href="#用例评审" class="headerlink" title="用例评审"></a>用例评审</h1><p>设计完用例后要进行用例评审，评审要检测用例的覆盖率和检查是否错写测试用例。评审分为组内和组外评审用例评审通过之后进行用例归档，再进入用例执行阶段。</p><h2 id="笔试面试题"><a href="#笔试面试题" class="headerlink" title="笔试面试题"></a>笔试面试题</h2><ol><li><p>用例需要评审么？紧急情况用例也需要评审么？</p><p>需要评审，紧急情况也需要评审，可能不通过会议进行评审，会通过邮件发给相关人员</p></li><li><p>如果被测项目很紧急，来不及写用例，怎么办？</p><p>check list，使用xmind列出测试点，根据检查点进行测试，测试完之后时间足够的时候补充用例——后期要进行回归测试，也可以知道当时是怎么覆盖的</p></li><li><p>遇到隐形需求如何写用例（需求不明确）</p><p>熟悉当前的功能，参考成熟产品，站在用户角度挖掘需求，去和产品沟通</p></li><li><p>用例有没有优先级？如果一定要有优先级，依据什么来确定呢？</p><p>有，根据功能，使用的场景是不是重要的，核心的</p></li><li><p>如何去编写测试用例？（以项目为基础来讲一个小模块用例设计，手机号）</p></li><li><p>编写测试用例会用到什么方法？</p><p>先去了解项目的业务流程，对于业务流程的用例使用场景法写，针对某些输入功能用等价类边界值来进行设计，需求里面存在多个条件多个组合，使用因果图判定表设计</p></li></ol><h1 id="web测试"><a href="#web测试" class="headerlink" title="web测试"></a>web测试</h1><p>测试点：前端页面发布上线之前需要检查（描述不恰当的文字出现）所有注释或去除注释<br>img图片必须要有title属性（悬停和未加载显示）<br>按钮测试点：统一使用value赋值</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;对穷举场景设计测试点&quot;&gt;&lt;a href=&quot;#对穷举场景设计测试点&quot; class=&quot;headerlink&quot; title=&quot;对穷举场景设计测试点&quot;&gt;&lt;/a&gt;对穷举场景设计测试点&lt;/h1&gt;&lt;h2 id=&quot;等价类划分法&quot;&gt;&lt;a href=&quot;#等价类划分法&quot; class=&quot;</summary>
      
    
    
    
    <category term="software test" scheme="http://example.com/categories/software-test/"/>
    
    
  </entry>
  
  <entry>
    <title>用例执行及缺陷</title>
    <link href="http://example.com/2024/03/25/%E7%94%A8%E4%BE%8B%E6%89%A7%E8%A1%8C%E5%8F%8A%E7%BC%BA%E9%99%B7/"/>
    <id>http://example.com/2024/03/25/%E7%94%A8%E4%BE%8B%E6%89%A7%E8%A1%8C%E5%8F%8A%E7%BC%BA%E9%99%B7/</id>
    <published>2024-03-25T10:08:52.000Z</published>
    <updated>2024-04-02T11:35:20.068Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用例执行"><a href="#用例执行" class="headerlink" title="用例执行"></a>用例执行</h1><p>执行结果与用例的期望结果不一致（含义），为缺陷，需要进行缺陷管理</p><h1 id="测试计划"><a href="#测试计划" class="headerlink" title="测试计划"></a>测试计划</h1><p>一份描述测试工作计划的测试文档，对测试工作进行统筹计划安排</p><p>测试计划编写者：测试主管&#x2F;leader</p><p>测试计划的查阅者：测试人员、测试主管&#x2F;leader、产品、开发、销售人员</p><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><ol><li><p>测试计划包含哪些内容？（测试人员会查阅评审测试计划）</p><p>5W1H—&gt;目的（why）、测试范围（what）、时间安排（when）、测试环境（where）、测试人员（who），怎么去测试（how 测试方法、测试工具）</p><p>测试风险评估，一般存在风险（需求变更&#x2F;需求做增加），测试的时间会增加—&gt;方案：测试时间拉长，人员调配，协调，加班，做计划的时候，时间安排做一些需求变更的预留。测试人员的变动—&gt;人员调配、协调、加班</p></li><li><p>在测试阶段，如何保证用例的覆盖率？</p><p>先做测试需求分析，进行评审，防止错测和漏测。进行用例设计的时候结合不同的设计，用到不同的设计方法，尽可能的去模拟用户所有的测试数据及测试场景，把对应的测试点全部进行覆盖。写完用例之后也会进行评审。</p></li><li><p>测试的工作量占整个项目的时间比例多少</p><p>测试30%&#x2F;<del>40%,开发70%</del>60%</p></li></ol><h1 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h1><ul><li>软件在使用过程中存在的任何问题都叫软件的缺陷，简称bug。广义概念除此之外还包括测试工程师或用户所发现和提出软件可改进的细节、或与需求文档存在差异的功能实现</li></ul><h2 id="缺陷的判定标准"><a href="#缺陷的判定标准" class="headerlink" title="缺陷的判定标准"></a>缺陷的判定标准</h2><p> <img src="keep/source/images/star.gif" data-original="/2024/03/25/%E7%94%A8%E4%BE%8B%E6%89%A7%E8%A1%8C%E5%8F%8A%E7%BC%BA%E9%99%B7/standard.png"></p><h2 id="bug的类型"><a href="#bug的类型" class="headerlink" title="bug的类型"></a>bug的类型</h2><ul><li>代码（功能）错误：功能错误、性能、安全</li><li>界面优化：界面、易用性测试</li><li>设计缺陷：建议优化的bug</li></ul><h2 id="bug的等级"><a href="#bug的等级" class="headerlink" title="bug的等级"></a>bug的等级</h2><p>bug等级越高，修复的优先级也越高，问题越严重数字越小</p><p>（1）致命错误（blocker）：</p><ol><li>常规操作引起的系统崩溃、死机、死循环、闪退</li><li>造成数据泄露的安全性问题，比如恶意攻击造成的账户私密信息泄露</li><li>涉及金钱计算（延时不算致命）</li><li>阻断性测试，所有测试工作进行不下去（冒烟测试）</li></ol><p>（2）严重错误（critical）：</p><ol><li>重要功能不能实现</li><li>错误的波及面广，影响到其他重要功能正常实现（次要功能影响到关联的核心功能）</li><li>非常规操作导致的程序崩溃、死机、死循环、闪退</li><li>外观（界面）难以接受的缺陷</li><li>密码明文显示（界面+数据库）</li><li>偶现的致命性bug（记录复现率）</li></ol><p>（3）一般错误（major）：</p><p>不影响产品的运行、不会成为故障起因，但对产品外观和下道工序影响较大的缺陷</p><ol><li>次要功能不能正常实现</li><li>操作界面的错误（包括数据窗口内列名定义、含义不一致）</li><li>查询错误，数据显示错误</li><li>简单的输入限制未放在前端进行控制</li><li>删除操作未给出提示</li><li>偶现的严重性bug</li></ol><p>（4）细微错误（minor）：</p><ol><li>界面方面的问题</li><li>描述错误、错别字</li></ol><p>（5）改进建议（enhancement）</p><h2 id="缺陷产生的原因"><a href="#缺陷产生的原因" class="headerlink" title="缺陷产生的原因"></a>缺陷产生的原因</h2><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E7%94%A8%E4%BE%8B%E6%89%A7%E8%A1%8C%E5%8F%8A%E7%BC%BA%E9%99%B7/reason.png"></p><ul><li>需求文档</li><li>架构设计</li><li>编码实现</li><li>环境（硬件、软件）</li></ul><h2 id="软件缺陷生命周期"><a href="#软件缺陷生命周期" class="headerlink" title="软件缺陷生命周期"></a>软件缺陷生命周期</h2><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E7%94%A8%E4%BE%8B%E6%89%A7%E8%A1%8C%E5%8F%8A%E7%BC%BA%E9%99%B7/period.png"></p><h2 id="软件缺陷的核心内容"><a href="#软件缺陷的核心内容" class="headerlink" title="软件缺陷的核心内容"></a>软件缺陷的核心内容</h2><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E7%94%A8%E4%BE%8B%E6%89%A7%E8%A1%8C%E5%8F%8A%E7%BC%BA%E9%99%B7/core1.png"><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E7%94%A8%E4%BE%8B%E6%89%A7%E8%A1%8C%E5%8F%8A%E7%BC%BA%E9%99%B7/core2.png"></p><h2 id="缺陷提交要素"><a href="#缺陷提交要素" class="headerlink" title="缺陷提交要素"></a>缺陷提交要素</h2><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E7%94%A8%E4%BE%8B%E6%89%A7%E8%A1%8C%E5%8F%8A%E7%BC%BA%E9%99%B7/factor.png"></p><h3 id="测试报告内容"><a href="#测试报告内容" class="headerlink" title="测试报告内容"></a>测试报告内容</h3><p>包括测试范围、测试环境、<strong>数据统计</strong>（bug数据、bug状态、bug类型统计、按功能模块统计）、测试总结（测试用例数、执行率、成功率【用例通过率】、缺陷的关闭率、遗留bug情况【一二级修复情况，遗留bug等级，及情况说明】，结论是ST测试通过&#x2F;不通过）</p><h2 id="软件缺陷类型"><a href="#软件缺陷类型" class="headerlink" title="软件缺陷类型"></a>软件缺陷类型</h2><p><img src="keep/source/images/star.gif" data-original="/%5Ctypes.png"></p><ul><li>工作流程</li></ul><ol><li>设计用例-&gt;执行用例（执行测试）-&gt;缺陷（提交、验证、关闭）</li><li>缺陷定义：任何问题Bug</li><li>缺陷标准；多功能、少功能、错误、缺少隐形功能、易用性</li><li>项目中缺陷管理流程：提交、验证、关闭</li><li>描述缺陷：缺陷标题、前置条件、复现步骤、预期结果、实际结果、附件备注</li><li>提交缺陷信息：指派人、缺陷等级、修复优先级、类型、状态（统计）</li></ol><h2 id="缺陷编写"><a href="#缺陷编写" class="headerlink" title="缺陷编写"></a>缺陷编写</h2><h3 id="缺陷编写示例"><a href="#缺陷编写示例" class="headerlink" title="缺陷编写示例"></a>缺陷编写示例</h3><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E7%94%A8%E4%BE%8B%E6%89%A7%E8%A1%8C%E5%8F%8A%E7%BC%BA%E9%99%B7/sample.png"></p><h3 id="缺陷的跟踪流程"><a href="#缺陷的跟踪流程" class="headerlink" title="缺陷的跟踪流程"></a>缺陷的跟踪流程</h3><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E7%94%A8%E4%BE%8B%E6%89%A7%E8%A1%8C%E5%8F%8A%E7%BC%BA%E9%99%B7/progress.png"></p><h3 id="提交缺陷注意事项"><a href="#提交缺陷注意事项" class="headerlink" title="提交缺陷注意事项"></a>提交缺陷注意事项</h3><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E7%94%A8%E4%BE%8B%E6%89%A7%E8%A1%8C%E5%8F%8A%E7%BC%BA%E9%99%B7/cautions.png"><br>当发现缺陷后，首先应该保证缺陷的可复现，确定是bug再提交。提交时，要检查缺陷是否已存在</p><h3 id="缺陷编写规范"><a href="#缺陷编写规范" class="headerlink" title="缺陷编写规范"></a>缺陷编写规范</h3><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E7%94%A8%E4%BE%8B%E6%89%A7%E8%A1%8C%E5%8F%8A%E7%BC%BA%E9%99%B7/specification.png"></p><h3 id="缺陷标题分析"><a href="#缺陷标题分析" class="headerlink" title="缺陷标题分析"></a>缺陷标题分析</h3><ul><li>描述测试数据+实际结果（预期结果）：标题15位纯数字结果合法（期望：不合法）</li><li>测试数据描述+预期结果（实际结果）：标题15位纯数字预期不合法（实际：合法）</li><li>测试数据描述+实际结果（需求）：标题15位纯数字结果合法（需求：标题为15位字符）</li></ul><h2 id="项目管理流程"><a href="#项目管理流程" class="headerlink" title="项目管理流程"></a>项目管理流程</h2><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E7%94%A8%E4%BE%8B%E6%89%A7%E8%A1%8C%E5%8F%8A%E7%BC%BA%E9%99%B7/project.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;用例执行&quot;&gt;&lt;a href=&quot;#用例执行&quot; class=&quot;headerlink&quot; title=&quot;用例执行&quot;&gt;&lt;/a&gt;用例执行&lt;/h1&gt;&lt;p&gt;执行结果与用例的期望结果不一致（含义），为缺陷，需要进行缺陷管理&lt;/p&gt;
&lt;h1 id=&quot;测试计划&quot;&gt;&lt;a href=&quot;#测</summary>
      
    
    
    
    <category term="software test" scheme="http://example.com/categories/software-test/"/>
    
    
  </entry>
  
  <entry>
    <title>认识软件及测试</title>
    <link href="http://example.com/2024/03/25/%E8%AE%A4%E8%AF%86%E8%BD%AF%E4%BB%B6%E5%8F%8A%E6%B5%8B%E8%AF%95/"/>
    <id>http://example.com/2024/03/25/%E8%AE%A4%E8%AF%86%E8%BD%AF%E4%BB%B6%E5%8F%8A%E6%B5%8B%E8%AF%95/</id>
    <published>2024-03-25T09:34:38.000Z</published>
    <updated>2024-04-09T15:01:28.333Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是软件测试"><a href="#什么是软件测试" class="headerlink" title="什么是软件测试"></a>什么是软件测试</h1><h2 id="什么是软件？"><a href="#什么是软件？" class="headerlink" title="什么是软件？"></a>什么是软件？</h2><p>控制计算机硬件工作的工具，分为：</p><ul><li><p>应用软件：计算机用户为了解决某些具体问题而购买、开发或研制的各种程序或软件包</p><ul><li>C&#x2F;S架构：client-server，需要安装客户端才能够使用的软件，每次更新都需要更新服务端和客户端</li><li>B&#x2F;S架构：browser-server，只需要更新服务器，通过浏览器访问</li></ul></li><li><p>系统软件：生成、准备和执行其他程序所需要的一组文件和程序。</p></li></ul><h2 id="软件基本组成"><a href="#软件基本组成" class="headerlink" title="软件基本组成"></a>软件基本组成</h2><p>软件是计算机程序、程序所用的数据及相关文档资料。</p><p>软件&#x3D;程序+数据+文档</p><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E8%AE%A4%E8%AF%86%E8%BD%AF%E4%BB%B6%E5%8F%8A%E6%B5%8B%E8%AF%95/software.png"></p><p>软件的产生过程：</p><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E8%AE%A4%E8%AF%86%E8%BD%AF%E4%BB%B6%E5%8F%8A%E6%B5%8B%E8%AF%95/process.png"></p><h2 id="什么是软件测试？"><a href="#什么是软件测试？" class="headerlink" title="什么是软件测试？"></a>什么是软件测试？</h2><p>使用人工和自动手段来运行或测试某个系统的过程，其目的在于检验它是否满足规定的需求或弄清预期结果与实际结果之间的差别。</p><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E8%AE%A4%E8%AF%86%E8%BD%AF%E4%BB%B6%E5%8F%8A%E6%B5%8B%E8%AF%95/st.png"></p><h2 id="软件测试的目的"><a href="#软件测试的目的" class="headerlink" title="软件测试的目的"></a>软件测试的目的</h2><ul><li>为了发现程序（软件）存在的代码或业务逻辑错误（找到bug）</li><li>为了检验产品是否符合用户需求（提升质量）</li><li>为了提供用户的体验（提高用户体验）</li></ul><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E8%AE%A4%E8%AF%86%E8%BD%AF%E4%BB%B6%E5%8F%8A%E6%B5%8B%E8%AF%95/target.png"></p><h1 id="测试的主流技能"><a href="#测试的主流技能" class="headerlink" title="测试的主流技能"></a>测试的主流技能</h1><ol><li>功能测试：根据文档执行，将反馈结果与预期结果比较。功能测试主要验证程序的功能是否满足需求</li><li>自动化测试：使用代码或工具代替手工，对项目进行测试</li><li>接口测试：使用代码或工具对服务端提供的接口进行测试，验证程序中的接口是否访问正常。</li><li>性能测试-工具实现：模拟多人使用软件，查找服务器缺陷<ol><li><strong>负载测试（Load Testing）</strong>：模拟实际用户的使用情况，测试系统在不同负载下的性能表现。</li><li><strong>压力测试（Stress Testing）</strong>：通过逐渐增加负载，测试系统的极限性能，以确定系统在超负荷情况下的表现及其响应能力。</li><li><strong>容量测试（Capacity Testing）</strong>：评估系统在预期负载下的性能，并确定系统是否能够满足预期的容量需求。</li><li><strong>性能基准测试（Performance Benchmarking）</strong>：与已知标准或竞争对手进行比较，评估系统的性能表现。</li><li><strong>稳定性测试（Stability Testing）</strong>：在长时间负载下测试系统的稳定性，以检测潜在的内存泄漏、资源泄漏或其他性能问题。</li></ol></li></ol><h1 id="常见的测试分类"><a href="#常见的测试分类" class="headerlink" title="常见的测试分类"></a>常见的测试分类</h1><h3 id="按测试阶段划分"><a href="#按测试阶段划分" class="headerlink" title="按测试阶段划分"></a>按测试阶段划分</h3><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E8%AE%A4%E8%AF%86%E8%BD%AF%E4%BB%B6%E5%8F%8A%E6%B5%8B%E8%AF%95/classification.png"></p><ul><li><p>单元测试：为了确保各单元模块被正确的编译，比如有具体到模块的测试，也有具体到类、函数、方法的测试。bug太多，修复率太低，开发人员自测</p></li><li><p>集成测试（接口测试）：单元测试后，将各单元组合成完整的体系，测试单位之间的接口是否正确、数据能否正常传递。</p><ul><li><strong>组件整合</strong>：将各个独立开发的模块或组件整合到一个系统中，并测试它们在集成后的行为。</li><li><strong>接口测试</strong>：验证模块之间的接口是否正确地传递数据和调用功能。</li><li><strong>功能测试</strong>：确保整个系统的功能按照规格说明书的要求正常工作。</li><li><strong>异常处理</strong>：测试系统在异常条件下的行为，例如错误输入或非预期操作。</li><li><strong>性能测试</strong>：在集成环境中评估系统的性能，包括响应时间、吞吐量和资源利用率等方面。</li></ul><p>集成测试通常分为两种策略：</p><ol><li><strong>自下而上（Bottom-Up）</strong>：从最底层的模块开始测试，逐步向上测试到系统的顶层。这种方法可以尽早发现低层模块的问题，但需要模拟高层模块的行为。</li><li><strong>自上而下（Top-Down）</strong>：从系统的顶层开始测试，逐步向下测试到最底层的模块。这种方法可以更早地测试到系统整体的行为，但需要使用模拟或桩程序替代尚未开发完成的低层模块。</li></ol></li><li><p>系统测试：把软件系统搭建起来，按照软件规格说明书中所要求，测试软件其性能功能是否和用户需求相符合，在系统运行中是否存在漏洞。看做整体进行测试，除功能以外，需求、兼容性也需要考虑。</p><ul><li><strong>功能测试</strong>：验证系统的功能是否符合规格说明书中的要求，包括正常功能和边界情况下的功能。</li><li><strong>性能测试</strong>：评估系统在正常和负载条件下的性能表现，包括响应时间、吞吐量、资源利用率等指标。</li><li><strong>兼容性测试</strong>：测试系统在不同操作系统、浏览器、设备和网络环境下的兼容性。</li><li><strong>安全性测试</strong>：评估系统的安全性，包括数据保护、身份验证、授权和防范潜在攻击的能力。</li><li><strong>可靠性测试</strong>：验证系统在长时间运行和异常条件下的稳定性和可靠性。</li><li><strong>易用性测试</strong>：评估系统的用户界面和交互设计是否符合用户的期望，以及系统是否易于使用和理解。</li></ul></li><li><p>验收测试（Acceptance Testing）：软件开发生命周期的最后一项测试活动，也是在软件交付给最终用户之前的最后一道关卡。其目的是确保软件系统满足最终用户的需求，并且符合预期的使用情境和业务流程。验收测试通常由最终用户、客户或业务代表来执行，因为他们最了解软件系统应该如何满足业务需求。</p><ul><li><strong>确认需求满足</strong>：验证软件系统是否满足了最初的用户需求和业务规格。</li><li><strong>功能完整性</strong>：确保系统的所有功能都按照规格说明书和用户期望的方式运行。</li><li><strong>用户体验</strong>：评估系统的易用性、用户界面设计、交互流程等，确保用户能够轻松地使用系统。</li><li><strong>业务流程</strong>：验证系统是否支持所需的业务流程，并且在真实的业务环境中能够正常运行。</li><li><strong>性能</strong>：确认系统在预期负载条件下的性能表现是否符合要求。</li><li>α测试：在开发者环境中由客户或最终用户进行测试。测试环境受开发方控制，测试人员不多，测试时间比较集中。执行者：测试人员、用户、公司内部人员</li><li>β测试：在真实的生产环境中由一组选择的最终用户进行测试。</li><li><strong>合同验收测试</strong>：在合同规定的时间和地点由客户和供应商共同进行的测试。</li><li>一般先做α测试再做β测试</li></ul></li></ul><h3 id="按代码可见度划分"><a href="#按代码可见度划分" class="headerlink" title="按代码可见度划分"></a>按代码可见度划分</h3><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E8%AE%A4%E8%AF%86%E8%BD%AF%E4%BB%B6%E5%8F%8A%E6%B5%8B%E8%AF%95/clas1.png"></p><ul><li><p>黑盒测试（Black Box Testing）：是一种软件测试方法，它着眼于测试软件的功能性而不考虑其内部结构或实现细节。在黑盒测试中，测试人员不需要了解软件的内部逻辑、算法或源代码，而是将软件看作一个黑盒子，只关注输入与输出之间的关系。针对功能、兼容性进行测试。对应系统测试</p><p>在黑盒测试中，测试人员根据软件的需求规格说明书、用户文档和设计文档等外部文档来设计和执行测试用例，以验证软件的功能是否按照预期工作。测试人员主要关注以下几个方面：</p><ol><li><strong>功能测试</strong>：验证软件的功能是否符合规格说明书和用户需求。</li><li><strong>界面测试</strong>：测试软件的用户界面是否符合设计要求，以及用户是否可以轻松地与软件进行交互。</li><li><strong>用户体验测试</strong>：评估软件的易用性、可理解性和用户满意度。</li><li><strong>输入验证</strong>：检查软件对于各种输入的响应是否正确，包括合法输入、非法输入和边界值输入。</li><li><strong>状态转换测试</strong>：测试软件在不同状态下的行为，例如登录状态、注销状态等。</li><li><strong>错误处理</strong>：验证软件对于异常情况的处理是否正确，例如错误输入、系统故障等。</li></ol></li><li><p>白盒测试（White Box Testing）：又称为结构测试或透明盒测试，是一种软件测试方法，旨在评估软件系统的内部结构和逻辑，以验证其是否按照预期进行操作。白盒测试的重点在于测试软件的内部工作方式，包括代码覆盖率、路径覆盖率以及逻辑覆盖率等方面。</p><p>白盒测试的主要特点包括：</p><ol><li><strong>了解内部结构</strong>：测试人员需要深入了解软件的内部结构和源代码，以便设计和执行测试用例。</li><li><strong>代码覆盖</strong>：白盒测试通常包括评估测试用例覆盖的代码范围，例如语句覆盖、分支覆盖、路径覆盖等。</li><li><strong>逻辑测试</strong>：验证软件系统的逻辑是否正确，包括条件语句、循环语句和异常处理等。</li><li><strong>数据流分析</strong>：评估软件中的数据流和变量的使用，以确保数据的正确性和一致性。</li><li><strong>性能测试</strong>：评估系统的性能和资源利用率，包括内存使用、处理时间和吞吐量等方面。</li><li><strong>安全测试</strong>：评估系统的安全性和防御机制，包括对潜在的安全漏洞和攻击面的分析。</li></ol><p>白盒测试通常由具有开发或编程经验的测试人员来执行，因为他们需要深入理解软件的内部工作原理和代码结构。白盒测试通常在软件开发的早期阶段进行，以便及早发现和解决潜在的问题，并在软件发布前提供更高的质量保证。</p><p>白盒测试与黑盒测试相辅相成，可以共同确保软件系统的质量。白盒测试主要关注软件内部的正确性和结构，而黑盒测试则关注软件的外部功能和用户需求是否得到满足。</p></li><li><p>灰盒测试（Gray Box Testing）：是介于白盒测试和黑盒测试之间的一种软件测试方法。在灰盒测试中，测试人员部分了解软件的内部结构和实现细节，但不需要深入到源代码的层面。灰盒测试旨在结合黑盒测试的功能性测试和白盒测试的结构性测试，以提高测试覆盖率和效率。</p><p>在灰盒测试中，测试人员通常可以访问一些关于系统内部的信息，例如数据库结构、应用程序框架或部分源代码。这种了解使得测试人员可以更有效地设计测试用例，并更好地理解系统的内部运行机制，以便更有针对性地进行测试。</p><p>灰盒测试通常涉及以下几个方面：</p><ol><li><strong>功能测试</strong>：类似于黑盒测试，验证系统的功能是否按照规格说明书和用户需求工作。</li><li><strong>接口测试</strong>：验证系统的不同模块之间的接口是否正确，以及数据传递是否正常。</li><li><strong>性能测试</strong>：评估系统在不同负载条件下的性能表现，包括响应时间、吞吐量和资源利用率等指标。</li><li><strong>安全性测试</strong>：评估系统的安全性，包括身份验证、授权、数据保护等方面。</li><li><strong>代码覆盖率分析</strong>：通过部分了解系统内部结构，测试人员可以评估测试覆盖率，并确定哪些部分需要更多的测试。</li></ol><p>由于灰盒测试结合了黑盒测试和白盒测试的优点，因此可以更全面地测试软件系统，并发现更多的潜在问题。然而，灰盒测试可能需要测试人员具备更多的技术知识和理解能力，以便更好地利用系统内部信息进行测试。</p></li></ul><h3 id="被测对象是否运行"><a href="#被测对象是否运行" class="headerlink" title="被测对象是否运行"></a>被测对象是否运行</h3><ul><li>动态测试：运行被测试系统而进行的测试</li><li>静态测试：不需要运行被测试系统而进行的测试（界面检查、文档检查、代码走查）</li></ul><h3 id="包含内容划分"><a href="#包含内容划分" class="headerlink" title="包含内容划分"></a>包含内容划分</h3><ul><li>功能测试</li><li>界面测试</li><li>易用性测试</li><li>性能测试（负载测试、压力测试）</li><li>安全测试</li></ul><h3 id="其他测试"><a href="#其他测试" class="headerlink" title="其他测试"></a>其他测试</h3><ul><li>冒烟测试：硬件测试中产生的概念。在进行正式测试前对主要核心功能进行的测试，一般由开发或者测试主管来负责。不通过会发回给开发</li><li>回归测试：开发对存在问题的功能进行修改后再一次进行的测试，也需要验证相关功能</li><li>探索性测试&#x2F;自由测试：根据项目经验进行的随意测试</li></ul><h1 id="软件的生命周期"><a href="#软件的生命周期" class="headerlink" title="软件的生命周期"></a>软件的生命周期</h1><h2 id="SDLC"><a href="#SDLC" class="headerlink" title="SDLC"></a>SDLC</h2><p>Systems Development Life Cycle指的是软件从概念阶段到终止阶段的完整过程。它描述了软件开发团队在设计、开发、测试、部署和维护软件产品时所遵循的步骤和阶段。</p><p>SDLC通常包括以下阶段：</p><ol><li><strong>需求分析（Requirements Analysis）</strong>：在这个阶段，团队和利益相关者确定软件系统的功能、性能、安全性等方面的需求，并将其记录在需求规格说明书中。</li><li><strong>设计（Design）</strong>：在这个阶段，基于需求分析的结果，设计团队开始制定软件系统的结构、组件和界面等，通常包括高级设计（High-Level Design）和详细设计（Detailed Design）。</li><li><strong>实现（Implementation）</strong>：在这个阶段，开发团队开始根据设计文档编写和测试代码，创建软件系统的各个功能模块，并逐步集成和测试这些模块。</li><li><strong>测试（Testing）</strong>：在这个阶段，测试团队对软件系统进行功能测试、性能测试、安全测试等，确保系统符合预期的功能和质量标准。</li><li><strong>部署（Deployment）</strong>：在这个阶段，将已经测试通过的软件系统部署到生产环境中，并进行最后的验证和配置。</li><li><strong>维护（Maintenance）</strong>：在这个阶段，团队负责维护软件系统，修复已知的缺陷、更新和升级系统，以确保系统的稳定性和安全性。</li></ol><h3 id="瀑布型生命周期"><a href="#瀑布型生命周期" class="headerlink" title="瀑布型生命周期"></a>瀑布型生命周期</h3><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E8%AE%A4%E8%AF%86%E8%BD%AF%E4%BB%B6%E5%8F%8A%E6%B5%8B%E8%AF%95/cycle.png"></p><p>特点：自上而下、有顺序性</p><p>缺点：回测成本比较高、测试周期比较长</p><h3 id="W模型"><a href="#W模型" class="headerlink" title="W模型"></a>W模型</h3><ul><li>W 模型是一种经典的软件开发和测试模型，它将软件开发和测试分为两个主要阶段：左侧的开发阶段和右侧的测试阶段。在开发阶段，软件需求被转化为软件设计、编码和集成，而在测试阶段，各种测试活动，如单元测试、集成测试、系统测试和验收测试，与相应的开发阶段相对应。</li><li>W 模型强调了测试活动与开发活动的对应关系，同时在测试活动的各个阶段都可以进行相应的验证和确认，以确保软件质量。它适用于大型软件项目和要求高质量的软件开发过程。</li><li>活动串行：测试与开发同步进行，在V模型的基础上增加了在开发阶段的同步测试</li><li>局限：不支持迭代，减少了一定错误发生率，但是需按照流水线进行设计、编码和测试</li></ul><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E8%AE%A4%E8%AF%86%E8%BD%AF%E4%BB%B6%E5%8F%8A%E6%B5%8B%E8%AF%95/wmodel.png"></p><h3 id="V模型"><a href="#V模型" class="headerlink" title="V模型"></a>V模型</h3><ul><li>V 模型是一种与 W 模型相似的软件测试模型，它强调了软件开发阶段与相应的测试阶段之间的对应关系。与 W 模型不同的是，V 模型将每个开发阶段都与一个相应的测试阶段直接相对应，形成了一个”V”字形的结构。</li><li>V 模型强调了测试活动与开发活动之间的紧密关系，每个开发阶段的产物都可以直接对应一个相应的测试活动，以确保每个阶段的质量控制。它适用于需求明确、项目周期较短的软件开发项目。</li><li>局限：仅仅把测试过程作为编码之后的一个阶段</li></ul><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E8%AE%A4%E8%AF%86%E8%BD%AF%E4%BB%B6%E5%8F%8A%E6%B5%8B%E8%AF%95/vmodel.png"></p><p>需求分析阶段会产生需求规格说明书（SRS），测试根据这个编写测试用例。</p><p>V模型开发中，测试在需求阶段就已经介入了，可以降低测试成本，缩短开发周期。</p><p>传统、周期长的项目使用V模型</p><h3 id="H模型"><a href="#H模型" class="headerlink" title="H模型"></a>H模型</h3><ul><li>H 模型是一种将软件开发和测试交错进行的测试模型，它将软件开发过程和软件测试过程在时间上交错进行，以加快软件交付的速度。在 H 模型中，软件开发和测试活动是同时进行的，并且它们之间会有多次的交互和反馈。</li><li>H 模型强调了软件开发和测试的并行进行，测试活动可以早早地介入到软件开发过程中，及时发现和修复问题。它适用于需要快速迭代和交付的敏捷开发项目。</li><li>活动并行：过程活动完全独立，贯穿于整个产品的周期，与其他流程并发地进行，某个测试点准备就绪时，就可以从测试准备阶段进行到测试执行阶段；软件测试可以进行尽早的进行；软件测试可以根据被测物的不同而分层次进行。</li></ul><h3 id="X模型"><a href="#X模型" class="headerlink" title="X模型"></a>X模型</h3><ul><li>X 模型是一种将软件开发和测试活动交叉进行的测试模型，它强调了开发和测试活动之间的协作和合作。在 X 模型中，开发和测试活动是并行进行的，并且它们之间会有多次的交互和沟通。</li><li>X 模型强调了团队协作和质量管理，在软件开发和测试的过程中，开发团队和测试团队可以紧密合作，共同推动软件的开发和测试工作。它适用于迭代开发和敏捷开发项目。</li><li>单独的单元设计开发测试，测试完成后凭借接口集成在一起。支持探索性测试。</li><li>支持需求不断变化，并且加入探索性测试，便于发现测试计划之外，发现更多的缺陷。</li></ul><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E8%AE%A4%E8%AF%86%E8%BD%AF%E4%BB%B6%E5%8F%8A%E6%B5%8B%E8%AF%95/xmodel.jpg"></p><h3 id="敏捷模型"><a href="#敏捷模型" class="headerlink" title="敏捷模型"></a>敏捷模型</h3><ul><li>强调以人文本，把一个大项目分为多个相互联系但也可以独立运行的小项目并分别完成，在这个过程中软件一直处于可使用状态。</li><li>开发与测试并行，项目周期快，模块提交快，测试时比较有压力；注重团队沟通，测试人员几乎要参加整个项目组的讨论决策会议；独立完成各项测试计划，测试执行工作；</li><li>具备良好的自动化测试框架支持进行快速测试；</li><li>在活动中关注产品需求，产品设计，解读源代码。</li><li>特点：快，迭代周期短。弱化文档，通过人与人的沟通实现需求</li></ul><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E8%AE%A4%E8%AF%86%E8%BD%AF%E4%BB%B6%E5%8F%8A%E6%B5%8B%E8%AF%95/fastdev.png"></p><h2 id="软件生命周期的各阶段"><a href="#软件生命周期的各阶段" class="headerlink" title="软件生命周期的各阶段"></a>软件生命周期的各阶段</h2><h3 id="问题的定义及规划"><a href="#问题的定义及规划" class="headerlink" title="问题的定义及规划"></a>问题的定义及规划</h3><p>主要确定软件的开发目的及其可行性，制定项目总体开发计划</p><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>在确定软件开发可行的情况下，对软件需要实现的各个功能进行详细分析，明确客户的需求，输出<strong>需求规格说明书终版（原型图）</strong>，提交评审</p><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><p>把需求分析得到的结果转换为软件结构和数据结构，形成系统架构</p><p>概要设计：主要是架构的实现，指搭建架构、表述各模块功能、模块接口连接和数据传递的实现等项事务</p><p>详细设计：对概要设计中表述的各模块进行深入分析等，其中需要包含数据库设计说明</p><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>按照详细设计好的模块功能表，编程人员编写出计算机可运行的程序代码</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>单元测试、集成测试、系统测试、验收测试</p><h3 id="运行维护"><a href="#运行维护" class="headerlink" title="运行维护"></a>运行维护</h3><p>是软件生命周期中持续时间最长的阶段，在软件开发完成并投入使用之后，由于多方面的原因，软件不能继续适应用户的需求。要延续软件的使用寿命，就必须对软件进行维护。软件的维护主要包括纠错性维护和改进性维护两方面。</p><h1 id="质量模型"><a href="#质量模型" class="headerlink" title="质量模型"></a>质量模型</h1><p>衡量一个优秀软件的纬度<br><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E8%AE%A4%E8%AF%86%E8%BD%AF%E4%BB%B6%E5%8F%8A%E6%B5%8B%E8%AF%95/massmodel.png"></p><ul><li><strong>功能性：</strong><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E8%AE%A4%E8%AF%86%E8%BD%AF%E4%BB%B6%E5%8F%8A%E6%B5%8B%E8%AF%95/functional.png"></li><li><strong>性能：</strong><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E8%AE%A4%E8%AF%86%E8%BD%AF%E4%BB%B6%E5%8F%8A%E6%B5%8B%E8%AF%95/performance.png"></li><li><strong>兼容性：</strong><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E8%AE%A4%E8%AF%86%E8%BD%AF%E4%BB%B6%E5%8F%8A%E6%B5%8B%E8%AF%95/compatibility.png"></li><li><strong>易用性：</strong><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E8%AE%A4%E8%AF%86%E8%BD%AF%E4%BB%B6%E5%8F%8A%E6%B5%8B%E8%AF%95/acceptable.png"></li><li><strong>安全：</strong><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E8%AE%A4%E8%AF%86%E8%BD%AF%E4%BB%B6%E5%8F%8A%E6%B5%8B%E8%AF%95/security.png"></li><li>可靠性：<img src="keep/source/images/star.gif" data-original="/2024/03/25/%E8%AE%A4%E8%AF%86%E8%BD%AF%E4%BB%B6%E5%8F%8A%E6%B5%8B%E8%AF%95/relia.png"></li><li>可维护性：核心代码要有说明，该独立的要独立</li><li>可移植性：<img src="keep/source/images/star.gif" data-original="/2024/03/25/%E8%AE%A4%E8%AF%86%E8%BD%AF%E4%BB%B6%E5%8F%8A%E6%B5%8B%E8%AF%95/planta.png"></li></ul><h1 id="软件测试流程"><a href="#软件测试流程" class="headerlink" title="软件测试流程"></a>软件测试流程</h1><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E8%AE%A4%E8%AF%86%E8%BD%AF%E4%BB%B6%E5%8F%8A%E6%B5%8B%E8%AF%95/proceeding.png"></p><p>在什么条件下可以发布？剩余bug数量很少，达到一定的用例执行覆盖率</p><p>发布流程：开发打包—&gt;运维&#x2F;运营&#x2F;开发—&gt;部署到生产环境（用户的使用环境）</p><ul><li><p>开发环境：开发人员写代码的环境</p></li><li><p>测试环境：测试人员进行测试的环境（1个或一个以上）</p></li><li><p>预发布环境（UAT环境）：验收测试（UAT测试）进行的环境。</p></li><li><p>生产环境：真实用户使用环境</p></li></ul><h3 id="测试方式"><a href="#测试方式" class="headerlink" title="测试方式"></a>测试方式</h3><ul><li><p>灰度测试（Gray Testing）：是软件测试中一种渐进式的测试方法，也被称为渐进式部署测试或金丝雀测试。在灰度测试中，新版本的软件系统被部署到一小部分用户或用户群体中进行测试，而不是立即对所有用户进行全面的部署。灰度测试的主要目的是逐步引入新版本的软件系统，以确保其在真实环境下的稳定性和可靠性。通过将新版本的软件系统部署到一小部分用户中进行测试，可以及早发现和解决潜在的问题，减少对全体用户的影响。</p></li><li><p>A&#x2F;B测试：A&#x2F;B测试是一种在在线环境中常用的实验设计方法，用于比较两个或多个版本的产品或服务，以确定哪个版本能够更好地实现预期的目标。在A&#x2F;B测试中，将用户随机分成多个组，每个组将被暴露于不同的版本中，并记录用户的行为数据，最后分析数据以确定哪个版本更有效。</p></li></ul><h4 id="二者区别"><a href="#二者区别" class="headerlink" title="二者区别"></a>二者区别</h4><p>灰度测试（Gray Testing）和 A&#x2F;B 测试是两种不同的测试方法，虽然它们都涉及将用户分成不同的组来比较不同版本的产品或服务，但在实践中有着不同的应用场景和目的。</p><ol><li><strong>目的和应用场景</strong>：<ul><li>灰度测试通常用于验证新版本的软件系统在真实生产环境中的稳定性和可靠性。它通过逐步将新版本应用于一小部分用户来测试系统的性能和用户反馈，以减少对整个用户群体的风险。灰度测试的主要目的是确保新版本的软件系统在全面部署之前已经经过了充分的测试和验证。</li><li>A&#x2F;B 测试主要用于比较两个或多个不同版本的产品或服务，并确定哪个版本能够更有效地实现预期的目标。它通常在在线环境中使用，例如网站、移动应用或电子邮件营销中，通过将用户随机分成多个组，向不同组展示不同版本，并收集用户行为数据来确定哪个版本更有效。</li></ul></li><li><strong>用户分组方式</strong>：<ul><li>在灰度测试中，用户通常被随机分成不同的组，但是每个组中的用户都暴露于相同的版本。灰度测试的目标<strong>是在一小部分用户中测试一个版本的性能，而不是比较不同版本之间的差异</strong>。</li><li>在 A&#x2F;B 测试中，用户也被随机分成不同的组，但是每个组中的用户将暴露于不同的版本。例如，一个组将看到版本 A，而另一个组将看到版本 B。A&#x2F;B 测试的目标是比较不同版本之间的差异，并确定哪个版本更有效。</li></ul></li><li><strong>测试内容和指标</strong>：<ul><li>灰度测试通常关注新版本的软件系统在生产环境中的性能、稳定性和用户反馈等方面的指标。</li><li>A&#x2F;B 测试通常关注不同版本的产品或服务在用户行为、转化率、点击率等方面的指标。</li></ul></li></ol><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E8%AE%A4%E8%AF%86%E8%BD%AF%E4%BB%B6%E5%8F%8A%E6%B5%8B%E8%AF%95/flowpath.png"></p><h3 id="各个阶段的输出"><a href="#各个阶段的输出" class="headerlink" title="各个阶段的输出"></a>各个阶段的输出</h3><p>需求分析——根据需求规格说明书输出项目需求分析测试点列表</p><p>用例设计——测试用例文档</p><p>执行测试——bug</p><p>评估测试——测试报告的输出</p><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E8%AE%A4%E8%AF%86%E8%BD%AF%E4%BB%B6%E5%8F%8A%E6%B5%8B%E8%AF%95/proced.png"></p><ol><li>需求评审</li></ol><ul><li>参与角色：产品经理、开发、测试</li><li>目的：需求一致、在各角度对需求进行查漏补缺、知道被测项目有哪些功能模块</li></ul><ol start="2"><li>测试计划</li></ol><ul><li>测什么、谁来测、怎么测</li></ul><ol start="3"><li>用例设计 针对穷举进行设计</li><li>用例执行</li><li>缺陷管理</li><li>测试报告</li></ol><h1 id="测试需求分析"><a href="#测试需求分析" class="headerlink" title="测试需求分析"></a>测试需求分析</h1><p>解决测什么的问题，一般来自需求规格说明书中原始需求。测试需求应全部覆盖已定义的业务流程，以及功能和非功能方面的需求。</p><p>功能：业务流程</p><p>非功能：界面、文档、兼容性、易用性、性能、安全性</p><p>根据需求规格说明书明确的测试的内容提取测试点，测试点是软件的最小单元</p><h2 id="测试需求分析的目的"><a href="#测试需求分析的目的" class="headerlink" title="测试需求分析的目的"></a>测试需求分析的目的</h2><ul><li>测试需求分析是编写测试用例的依据</li><li>有助于保证测试的质量与进度</li><li>测试需求是衡量测试覆盖率的重要指标</li></ul><h2 id="需求分析的步骤"><a href="#需求分析的步骤" class="headerlink" title="需求分析的步骤"></a>需求分析的步骤</h2><ol><li>查阅需求规格说明书（原型图），初步熟悉被测软件的核心的业务流程</li><li>针对某个功能，细化需求，列出测试点</li><li>根据业务逻辑的先后顺序来进行分析按钮，一般按钮存在（什么条件）操作成功，（什么条件）操作失败，验证操作结果（验证交互功能、即关联功能），验证当前操作的结果的功能</li></ol><h3 id="一个页面进行测试需求分析"><a href="#一个页面进行测试需求分析" class="headerlink" title="一个页面进行测试需求分析"></a>一个页面进行测试需求分析</h3><ol><li>进行页面检查，参考原型图，查看界面是否一致</li><li>依次分析每个输入项，从上到下从左到右的顺序进行分析约束限制、是否必填、是否重复、隐形需求（如手机号码的格式验证）。</li></ol><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E8%AE%A4%E8%AF%86%E8%BD%AF%E4%BB%B6%E5%8F%8A%E6%B5%8B%E8%AF%95/%E7%94%B5%E5%95%86%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90.png"></p><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><ol><li><p>遇到隐形需求怎么办？</p><p>要充分熟悉产品，参考成熟的同类产品，站在用户的角度去考虑，从而挖掘需求</p></li><li><p>给你一个带logo的水杯，你会如何去测试？<br>先明确测试的对象，什么样的杯子</p><p>对应功能：能否装水，是否漏水，能否装热水冰水饮料，是否保温</p><p>对应非功能：logo是否与原型图一致，美观，是否掉色，材质是否环保安全</p><p>对应易用性：防滑，防烫，是否带手把，边缘是否光滑，携带是否方便</p><p>兼容性：是否能装其他液体</p><p>安全性：装热水的时候会有毒素吗</p><p>性能：（如果是保温杯的化可以保温多久），是否防摔，挤压被子会不会坏，容不容易被水泡软</p></li><li><p>你会如何测试朋友圈，购物车等熟知的软件产品（支付，优惠券，二维码）</p><p><img src="keep/source/images/star.gif" data-original="/2024/03/25/%E8%AE%A4%E8%AF%86%E8%BD%AF%E4%BB%B6%E5%8F%8A%E6%B5%8B%E8%AF%95/%E5%BE%AE%E4%BF%A1%E6%9C%8B%E5%8F%8B%E5%9C%88%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90.png"></p></li></ol><h1 id="需求评审"><a href="#需求评审" class="headerlink" title="需求评审"></a>需求评审</h1><p>需求分析完成后要对需求进行评审，评审是否存在漏测和错测的测试点。</p><p>参与人员：测试人员、组内人员、测试主管&#x2F;组长、产品、开发</p><h1 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h1><h2 id="什么是用例？"><a href="#什么是用例？" class="headerlink" title="什么是用例？"></a>什么是用例？</h2><p>用例：用户使用的案例</p><h2 id="什么是测试用例？"><a href="#什么是测试用例？" class="headerlink" title="什么是测试用例？"></a>什么是测试用例？</h2><p>测试用例：为项目需求而编制的一组测试输入、执行条件以及预期结果，以便测试某个程序是否满足客户需求。每一个测试点的数据设计和步骤设计</p><h2 id="测试用例的作用"><a href="#测试用例的作用" class="headerlink" title="测试用例的作用"></a>测试用例的作用</h2><ul><li>防止漏测</li><li>实施测试的标准</li></ul><h2 id="用例格式标准"><a href="#用例格式标准" class="headerlink" title="用例格式标准"></a>用例格式标准</h2><h3 id="用例执行的八大要素"><a href="#用例执行的八大要素" class="headerlink" title="用例执行的八大要素"></a>用例执行的八大要素</h3><p>| 用例编号 | 项目&#x2F;模块  | 用例标题 | 优先级 | 前置条件 | 测试步骤 | 测试数据 | 预期结果 |</p><ul><li><p>用例编号：项目简称_模块简称_编号，产品名-测试阶段（it、st、uat）-测试项-xxx（英文）或者项目+编号</p></li><li><p>项目&#x2F;模块：所属项目或模块</p></li><li><p>用例标题：主要描述测试的目的，输入内容＋结果，用例标题不要重复</p></li><li><p>优先级：表示用例重要程度或者影响力P0~P4（P0最高，用户使用频率最高为核心功能）。高（主要核心业务功能，冒烟用例）中（错误异常的测试点，如注册失败）低（兼容性、界面错误）</p></li><li><p>前置条件&#x2F;预置条件：要执行此条用例，有哪些前置操作。可以用来简化步骤。如果用例不需要其他条件，可以无条件</p></li><li><p>测试步骤：执行用例步骤</p><ul><li><ol><li>路径</li><li>具体数据</li><li>操作动作</li></ol></li></ul></li><li><p>测试数据：操作的数据，没有的话可以为空（可以和操作步骤分开）</p></li><li><p>预期结果：按照操作步骤，应该有什么结果，分为一对一（一个步骤对一个结果）和多对一（多个步骤对一个结果）用例执行结果+不同角色隐形结果</p></li><li><p>实际结果：通过、不通过、阻塞（当前用例无法执行）</p></li><li><p>（备注）：bugid&#x2F;测试无法执行原因</p></li><li><p>（测试版本）</p></li><li><p>（用例设计者）</p></li><li><p>（测试时间）</p></li></ul><p>用例是根据测试点进行编辑，但并不是针对每个测试点编辑一条用例，否则会造成重复测试</p><h1 id="软件测试八大原则"><a href="#软件测试八大原则" class="headerlink" title="软件测试八大原则"></a>软件测试八大原则</h1><ol><li>所有的软件测试都应追溯到用户需求</li><li>应当把“尽早地和不断地进行软件测试”作为软件测试者的座右铭（在需求阶段介入是最好的）（重复测试挖掘更多bug）</li><li>完全测试是不可能的，测试需要终止</li><li>测试无法显示软件潜在的缺陷</li><li>充分注意测试中的群集现象（80%的bug出现在20%的模块中）</li><li>开发工程师应避免测试自己的程序</li><li>尽量避免测试的随意性（容易出现漏测）</li><li>测试的抗药性</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是软件测试&quot;&gt;&lt;a href=&quot;#什么是软件测试&quot; class=&quot;headerlink&quot; title=&quot;什么是软件测试&quot;&gt;&lt;/a&gt;什么是软件测试&lt;/h1&gt;&lt;h2 id=&quot;什么是软件？&quot;&gt;&lt;a href=&quot;#什么是软件？&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="software test" scheme="http://example.com/categories/software-test/"/>
    
    
  </entry>
  
  <entry>
    <title>Web自动化</title>
    <link href="http://example.com/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    <id>http://example.com/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/</id>
    <published>2024-03-12T03:02:44.000Z</published>
    <updated>2024-04-19T07:46:52.294Z</updated>
    
    <content type="html"><![CDATA[<p>自动化测试解决的问题：回归测试、压力测试、兼容性测试。</p><p>自动化测试的误区：自动化测试可以完全代替手工测试，自动化测试一定比手工测试更厉害，自动化测试可以捕获更多的bug，自动化测试适用于所有功能</p><blockquote><p>什么样的web项目适合做自动化测试？</p><ol><li>需求变动不频繁</li><li>项目周期长</li><li>项目需要回归测试</li></ol></blockquote><p>自动化测试在什么阶段开始–&gt;功能测试完毕（手工测试）</p><blockquote><p>web自动化属于黑盒测试（功能测试）</p></blockquote><h1 id="元素定位"><a href="#元素定位" class="headerlink" title="元素定位"></a>元素定位</h1><p>元素定位就是通过元素的信息或元素层级结构来定位</p><p>selenium提供的8种定位元素方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. id</span><br><span class="line">2. name</span><br><span class="line">3. class_name</span><br><span class="line">4. tag_name(&lt;标签名.../&gt;)</span><br><span class="line">5. link_text(定位超链接a标签)</span><br><span class="line">6. partial_link_text(定位超链接a标签 模糊)</span><br><span class="line">7. XPath(基于元素路径)</span><br><span class="line">8. CSS(元素选择器)</span><br></pre></td></tr></table></figure><h2 id="id定位"><a href="#id定位" class="headerlink" title="id定位"></a>id定位</h2><p>html规定id属性在整个html文档中必须是唯一的</p><p><code>el=driver.find_element(by=By.ID, value=&#39;id值&#39;)</code></p><p>打开百度输入内容进行查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 获取浏览器对象</span></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line"><span class="comment"># 打开url</span></span><br><span class="line">browser.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment"># 通过id定位搜索框</span></span><br><span class="line">el = browser.find_element(by=By.ID, value=<span class="string">&#x27;kw&#x27;</span>)</span><br><span class="line"><span class="comment"># 搜索框输入内容</span></span><br><span class="line">el.send_keys(<span class="string">&#x27;怪物猎人&#x27;</span>)</span><br><span class="line"><span class="comment"># 通过id查找搜索按钮并点击</span></span><br><span class="line">browser.find_element(by=By.ID, value=<span class="string">&#x27;su&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">20</span>)</span><br><span class="line">browser.quit()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/id.png"></p><h2 id="name定位"><a href="#name定位" class="headerlink" title="name定位"></a>name定位</h2><p>html中name属性值是可以重复的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">browser.find_element(by=By.NAME,value=<span class="string">&#x27;wd&#x27;</span>).clear()</span><br><span class="line">el = browser.find_element(by=By.NAME, value=<span class="string">&#x27;wd&#x27;</span>)</span><br><span class="line">el.send_keys(<span class="string">&#x27;索尼&#x27;</span>)</span><br><span class="line">browser.find_element(by=By.ID, value=<span class="string">&#x27;su&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">20</span>)</span><br><span class="line">browser.quit()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/nameexample.png"></p><h2 id="class-name定位"><a href="#class-name定位" class="headerlink" title="class name定位"></a>class name定位</h2><p>根据元素class属性值定位元素，html通过class来定义元素的样式。如果class有多个属性值，只使用其中一个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&quot;https://www.bilibili.com/&quot;</span>)</span><br><span class="line">browser.find_element(by=By.CLASS_NAME, value=<span class="string">&#x27;channel-link&#x27;</span>).click() <span class="comment"># 有多个相同元素，返回第一个</span></span><br><span class="line">time.sleep(<span class="number">20</span>)</span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/class.png"></p><p>查找第三个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&quot;https://www.bilibili.com/&quot;</span>)</span><br><span class="line">browser.find_elements(by=By.CLASS_NAME, value=<span class="string">&#x27;channel-link&#x27;</span>)[<span class="number">2</span>].click()</span><br><span class="line">time.sleep(<span class="number">20</span>)</span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/classlist.png"></p><h2 id="tag-name定位"><a href="#tag-name定位" class="headerlink" title="tag_name定位"></a>tag_name定位</h2><p>通过标签名来定位，一般有多个。如果存在多个相同标签则返回第一个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">dr = webdriver.Chrome()</span><br><span class="line">dr.get(<span class="string">&#x27;https://www.csdn.net/&#x27;</span>)</span><br><span class="line">dr.find_elements(By.TAG_NAME, <span class="string">&#x27;dl&#x27;</span>)[<span class="number">0</span>].click()</span><br><span class="line">time.sleep(<span class="number">20</span>)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/tagname.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/tagname2.png"></p><h2 id="link-text"><a href="#link-text" class="headerlink" title="link_text"></a>link_text</h2><p>定位a标签，link_text定位元素的内容必须全部匹配（不然会报错）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&#x27;https://rinta.top/&#x27;</span>)</span><br><span class="line">browser.find_element(By.LINK_TEXT,<span class="string">&#x27;Python&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">20</span>)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/linktext.png"></p><h2 id="partial-link-text"><a href="#partial-link-text" class="headerlink" title="partial_link_text"></a>partial_link_text</h2><p>模糊匹配linktext定位找到元素，但是要保证唯一性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&#x27;https://rinta.top/&#x27;</span>)</span><br><span class="line">browser.find_element(By.LINK_TEXT,<span class="string">&#x27;Python&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">browser.find_element(By.PARTIAL_LINK_TEXT,<span class="string">&#x27;AR&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">20</span>)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/partial.png"></p><h2 id="Xpath"><a href="#Xpath" class="headerlink" title="Xpath"></a>Xpath</h2><p>xpath是XML路径定位器，HTML与XML相似，所以也可以用xpath来定位。针对定位到多个元素时也可以下标取值，下标从1开始</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//*[text()=<span class="string">&quot;xxx&quot;</span>]     <span class="comment"># 文本内容是xxx的元素</span></span><br><span class="line">//*[contains(@attribute,<span class="string">&#x27;xxx&#x27;</span>)] <span class="comment"># 属性中含有xxx的元素</span></span><br><span class="line">//*[starts-<span class="keyword">with</span>(@attribute,<span class="string">&#x27;xxx&#x27;</span>)] <span class="comment"># 属性以xxx开头的元素</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>nodename</td><td>选取此节点的所有子节点</td></tr><tr><td>&#x2F;</td><td>从当前节点选取直接子节点</td></tr><tr><td>&#x2F;&#x2F;</td><td>从当前节点选取子孙节点</td></tr><tr><td>.</td><td>选取当前节点</td></tr><tr><td>. .</td><td>选取当前节点的父节点</td></tr><tr><td>@</td><td>选取属性</td></tr><tr><td>*</td><td>任何元素</td></tr></tbody></table><h3 id="通过路径定位"><a href="#通过路径定位" class="headerlink" title="通过路径定位"></a>通过路径定位</h3><p>绝对路径：以&#x2F;开头，不能跳级</p><p>相对路径：以&#x2F;&#x2F;开头，后跟元素名称，不知道名称可以用*代替（*代表所有元素）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">dr = webdriver.Chrome()</span><br><span class="line">dr.get(<span class="string">&#x27;https://www.bilibili.com/&#x27;</span>)</span><br><span class="line">dr.find_element(By.XPATH, value=<span class="string">&#x27;//*[@id=&quot;i_cecream&quot;]/div[2]/div[1]/div[3]/div[2]/div[1]/a[8]&#x27;</span>).click()<span class="comment"># @为添加属性,//开头为相对路径</span></span><br><span class="line"><span class="comment"># value=&#x27;//*[@class=&quot;channel-items__left&quot;]/a[8]</span></span><br><span class="line">time.sleep(<span class="number">20</span>)</span><br><span class="line">//*</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/xpath.png"></p><h3 id="利用元素属性"><a href="#利用元素属性" class="headerlink" title="利用元素属性"></a>利用元素属性</h3><p><code>dr.find_element(By.XPATH, value=&#39;//*[@id=&quot;i_cecream&quot;]/div[2]/div[1]/div[3]/div[2]/div[1]/a[8]&#39;).click()# @修饰属性</code></p><h3 id="属性和逻辑结合"><a href="#属性和逻辑结合" class="headerlink" title="属性和逻辑结合"></a>属性和逻辑结合</h3><p>通过and连接两个属性</p><p><code>//*[@id=&#39;id值&#39; and @属性=&#39;属性值&#39;]</code></p><h3 id="层级与属性结合"><a href="#层级与属性结合" class="headerlink" title="层级与属性结合"></a>层级与属性结合</h3><p><code>//*[@id=&#39;父级id值&#39; ]/input</code></p><h2 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h2><p>css用来描述html元素的显示样式，在css中，选择题是一种模式用于选择需要添加样式的元素。</p><p>css定位常用策略：id选择器、class选择器、元素选择器、属性选择器、层级选择器</p><p><strong>符号.代表class, 符号 # 代表id</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># id选择器</span></span><br><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 获取浏览器对象</span></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line"><span class="comment"># 打开url</span></span><br><span class="line">browser.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment"># 通过css定位搜索框,#代表id</span></span><br><span class="line">el = browser.find_element(by=By.CSS_SELECTOR, value=<span class="string">&#x27;#kw&#x27;</span>)</span><br><span class="line"><span class="comment"># 搜索框输入内容</span></span><br><span class="line">el.send_keys(<span class="string">&#x27;怪物猎人&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">20</span>)</span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/css1.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 获取浏览器对象</span></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line"><span class="comment"># 打开url</span></span><br><span class="line">browser.get(<span class="string">&quot;https://www.bilibili.com/&quot;</span>)</span><br><span class="line"><span class="comment"># 通过css定位搜索框,#代表id,结合xpath</span></span><br><span class="line">el = browser.find_element(by=By.CSS_SELECTOR, value=<span class="string">&#x27;#i_cecream &gt; div.bili-feed4 &gt; div.bili-header.large-header &gt; div.bili-header__channel &gt; div.right-channel-container &gt; div.channel-items__left &gt; a:nth-child(6)&#x27;</span></span><br><span class="line"><span class="comment"># el = browser.find_element(by=By.CSS_SELECTOR, value=&#x27;.channel-items__left &gt; a:nth-child(6)&#x27;)                     </span></span><br><span class="line"><span class="comment"># 搜索框输入内容</span></span><br><span class="line">el.click()</span><br><span class="line">time.sleep(<span class="number">20</span>)</span><br><span class="line">browser.quit()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/css2.png"></p><h3 id="定位下拉框"><a href="#定位下拉框" class="headerlink" title="定位下拉框"></a>定位下拉框</h3><h4 id="通过css定位"><a href="#通过css定位" class="headerlink" title="通过css定位"></a>通过css定位</h4><p><code>[属性名=属性值]</code>定位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取浏览器对象</span></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 最大化窗口</span></span><br><span class="line">browser.maximize_window()</span><br><span class="line"><span class="comment"># 隐式等待，每次查找元素前等待</span></span><br><span class="line">browser.implicitly_wait(<span class="number">10</span>) </span><br><span class="line">browser.get(<span class="string">&quot;https://www.ke.com/city/&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 找到下拉框元素</span></span><br><span class="line">el = browser.find_elements(By.CSS_SELECTOR, value=<span class="string">&#x27;.chang-city&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">el.click()</span><br><span class="line"><span class="comment"># []来指定属性值</span></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">browser.find_element(By.CSS_SELECTOR, <span class="string">&#x27;[data-province_id=&quot;130000&quot;]&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">10</span>)</span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/cssselect.png"></p><h4 id="通过select类定位"><a href="#通过select类定位" class="headerlink" title="通过select类定位"></a>通过select类定位</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># value</span></span><br><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取浏览器对象</span></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">browser.maximize_window()</span><br><span class="line">browser.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">browser.get(</span><br><span class="line">    <span class="string">&quot;https://signup.live.com/signup?lcid=1033&amp;wa=wsignin1.0&amp;rpsnv=13&amp;ct=1667977589&amp;rver=7.0.6737.0&amp;wp=MBI_SSL&amp;wreply=https%3a%2f%2foutlook.live.com%2fowa%2f%3fnlp%3d1%26signup%3d1%26RpsCsrfState%3d03e6f63b-7b44-e3a7-1cec-67445341a6de&amp;id=292841&amp;CBCXT=out&amp;lw=1&amp;fl=dob%2cflname%2cwld&amp;cobrandid=90015&amp;lic=1&amp;uaid=5cd6f6e2004b4d5f96bcb3f20e670a07&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">browser.find_element(By.CSS_SELECTOR, value=<span class="string">&#x27;#iSignupAction&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 找到下拉框元素</span></span><br><span class="line"><span class="comment"># 使id属性定位下拉框</span></span><br><span class="line">el = browser.find_element(By.CSS_SELECTOR, value=<span class="string">&#x27;#LiveDomainBoxList&#x27;</span>)</span><br><span class="line"><span class="comment"># 使name属性定位下拉框</span></span><br><span class="line">el = browser.find_element(By.CSS_SELECTOR, value=<span class="string">&#x27;[name = LiveDomainBoxList]&#x27;</span>)</span><br><span class="line"><span class="comment"># option通过value定位</span></span><br><span class="line">Select(el).select_by_value(<span class="string">&#x27;hotmail.com&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">10</span>)</span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/selectvalue.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># index</span></span><br><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取浏览器对象</span></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">browser.maximize_window()</span><br><span class="line">browser.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">browser.get(</span><br><span class="line">    <span class="string">&quot;https://signup.live.com/signup?lcid=1033&amp;wa=wsignin1.0&amp;rpsnv=13&amp;ct=1667977589&amp;rver=7.0.6737.0&amp;wp=MBI_SSL&amp;wreply=https%3a%2f%2foutlook.live.com%2fowa%2f%3fnlp%3d1%26signup%3d1%26RpsCsrfState%3d03e6f63b-7b44-e3a7-1cec-67445341a6de&amp;id=292841&amp;CBCXT=out&amp;lw=1&amp;fl=dob%2cflname%2cwld&amp;cobrandid=90015&amp;lic=1&amp;uaid=5cd6f6e2004b4d5f96bcb3f20e670a07&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">browser.find_element(By.CSS_SELECTOR, value=<span class="string">&#x27;#iSignupAction&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># # 找到下拉框元素</span></span><br><span class="line">el = browser.find_element(By.CSS_SELECTOR, value=<span class="string">&#x27;#LiveDomainBoxList&#x27;</span>)</span><br><span class="line"><span class="comment"># 使用index定位下拉框</span></span><br><span class="line">Select(el).select_by_index(<span class="number">1</span>)</span><br><span class="line">time.sleep(<span class="number">10</span>)</span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># visible_text</span></span><br><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取浏览器对象</span></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">browser.maximize_window()</span><br><span class="line">browser.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">browser.get(</span><br><span class="line">    <span class="string">&quot;https://signup.live.com/signup?lcid=1033&amp;wa=wsignin1.0&amp;rpsnv=13&amp;ct=1667977589&amp;rver=7.0.6737.0&amp;wp=MBI_SSL&amp;wreply=https%3a%2f%2foutlook.live.com%2fowa%2f%3fnlp%3d1%26signup%3d1%26RpsCsrfState%3d03e6f63b-7b44-e3a7-1cec-67445341a6de&amp;id=292841&amp;CBCXT=out&amp;lw=1&amp;fl=dob%2cflname%2cwld&amp;cobrandid=90015&amp;lic=1&amp;uaid=5cd6f6e2004b4d5f96bcb3f20e670a07&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">browser.find_element(By.CSS_SELECTOR, value=<span class="string">&#x27;#iSignupAction&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># # 找到下拉框元素</span></span><br><span class="line">el = browser.find_element(By.CSS_SELECTOR, value=<span class="string">&#x27;#LiveDomainBoxList&#x27;</span>)</span><br><span class="line"><span class="comment"># 使用visible_text属性定位下拉框（文本）</span></span><br><span class="line">Select(el).select_by_visible_text(<span class="string">&#x27;hotmail.com&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">Select(el).select_by_visible_text(<span class="string">&#x27;outlook.com&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">10</span>)</span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure><h3 id="警告框处理"><a href="#警告框处理" class="headerlink" title="警告框处理"></a>警告框处理</h3><p>Selenium中对处理弹出框的操作，有专用的处理方法，并且处理方式都一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 获取弹出框对象</span><br><span class="line">alert=driver.switch_to.alert</span><br><span class="line"><span class="number">2.</span> 调用</span><br><span class="line">alert.text        ---&gt; 返回alert/confirm/prompt中文字信息</span><br><span class="line">alert.accept()   ---&gt;接受对话框选项</span><br><span class="line">alert.dismiss()  ---&gt;取消对话框选项</span><br></pre></td></tr></table></figure><h4 id="aler警告框"><a href="#aler警告框" class="headerlink" title="aler警告框"></a>aler警告框</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取浏览器对象</span></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">browser.maximize_window()</span><br><span class="line">browser.implicitly_wait(<span class="number">20</span>)</span><br><span class="line"><span class="comment"># 访问url</span></span><br><span class="line">browser.get(<span class="string">&quot;https://www.runoob.com/try/try.php?filename=tryjs_alert&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 点击运行按钮</span></span><br><span class="line">browser.switch_to.frame(<span class="string">&quot;iframeResult&quot;</span>)</span><br><span class="line">browser.find_element(By.CSS_SELECTOR, <span class="string">&#x27;[value=&quot;显示警告框&quot;]&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 切换到alert框内</span></span><br><span class="line">alert = browser.switch_to.alert  <span class="comment"># 返回alert对话框对象</span></span><br><span class="line"><span class="comment"># 获取文本</span></span><br><span class="line"><span class="built_in">print</span>(alert.text)</span><br><span class="line"><span class="comment"># 点击确定</span></span><br><span class="line">alert.accept()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">10</span>)</span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/alert.png"></p><h4 id="confirm确认框"><a href="#confirm确认框" class="headerlink" title="confirm确认框"></a>confirm确认框</h4><h4 id="prompt提示框"><a href="#prompt提示框" class="headerlink" title="prompt提示框"></a>prompt提示框</h4><h2 id="元素操作"><a href="#元素操作" class="headerlink" title="元素操作"></a>元素操作</h2><p><code>.click()</code>单击输入</p><p><code>clear()</code>清楚文本</p><p><code>sendkeys()</code>模拟输入，如果要上传本地文件也使用这个</p><h3 id="获取元素信息的常用方法"><a href="#获取元素信息的常用方法" class="headerlink" title="获取元素信息的常用方法"></a>获取元素信息的常用方法</h3><p><code>size</code> 返回元素大小</p><p><code>text</code> 获取元素文本</p><p><code>get_attribute(&quot;xxx&quot;)</code> 获取属性值，传递到参数为元素的属性名</p><p><code>is_displayed()</code> 判断元素在页面上是否可见。</p><p><code>is_enabled()</code> 判断元素是否可用，即元素是否可以进行交互操作，比如点击、输入等</p><p><code>is_selected()</code> 判断元素是否选择，用来检查复选框或者单选按钮是否被选中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 获取浏览器对象</span></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">browser.maximize_window()</span><br><span class="line"><span class="comment"># 打开url</span></span><br><span class="line"></span><br><span class="line">browser.get(<span class="string">&quot;https://www.bilibili.com/&quot;</span>)</span><br><span class="line"><span class="comment"># 获取元素大小</span></span><br><span class="line"><span class="built_in">print</span>(browser.find_element(By.CSS_SELECTOR,value=<span class="string">&#x27;.nav-search-content&#x27;</span>).size)</span><br><span class="line"><span class="comment"># 获取元素个数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(browser.find_elements(By.CSS_SELECTOR,value=<span class="string">&#x27;.channel-link&#x27;</span>)))</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">el1=browser.find_element(By.CSS_SELECTOR,value=<span class="string">&#x27;.nav-search-input&#x27;</span>)</span><br><span class="line">el1.send_keys(<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">browser.refresh()</span><br><span class="line">el=browser.find_elements(By.CSS_SELECTOR,value=<span class="string">&#x27;.channel-link&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(el.text)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 打印a元素的href属性</span></span><br><span class="line"><span class="built_in">print</span>(el.get_attribute(<span class="string">&#x27;href&#x27;</span>))</span><br><span class="line">el.click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 判断元素是否可见</span></span><br><span class="line">el2=browser.find_elements(By.CLASS_NAME,value=<span class="string">&#x27;channel-link&#x27;</span>)[<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(el2.is_displayed())</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 元素可见，点击</span></span><br><span class="line"><span class="keyword">if</span> el2.is_displayed():</span><br><span class="line">    el2.click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 判断元素是否可用</span></span><br><span class="line">el3=browser.find_elements(By.CLASS_NAME,value=<span class="string">&#x27;channel-link&#x27;</span>)[<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(el3.is_enabled())</span><br><span class="line"><span class="keyword">if</span> el3.is_enabled():</span><br><span class="line">    el3.click()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 关闭主窗口</span></span><br><span class="line">browser.close()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/image-20240418151805030.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/elein2.png"></p><h2 id="浏览器常用操作"><a href="#浏览器常用操作" class="headerlink" title="浏览器常用操作"></a>浏览器常用操作</h2><p><code>maximize_window()</code>最大化浏览器窗口</p><p><code>set_window_size(width,height)</code>设置浏览器窗口大小</p><p><code>set_window_position</code>设置浏览器窗口位置</p><p><code>back()</code>模拟浏览器后退</p><p><code>forward()</code>前进</p><p><code>refresh()</code>刷新，在cookie中使用到</p><p><code>close()</code>关闭当前窗口</p><p><code>quit()</code>关闭浏览器驱动对象（会关闭所有窗口）</p><p><code>title</code>获取页面title</p><p><code>current_url</code>获取当前页面url</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实现前进后退</span></span><br><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 获取浏览器对象</span></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line"><span class="comment"># 设置窗口位置</span></span><br><span class="line">browser.set_window_position(<span class="number">320</span>,<span class="number">150</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">browser.maximize_window()</span><br><span class="line"><span class="comment"># 打开url</span></span><br><span class="line">browser.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br><span class="line">browser.get(<span class="string">&quot;https://www.bilibili.com/&quot;</span>)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 执行后退</span></span><br><span class="line">browser.back()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 执行前进</span></span><br><span class="line">browser.forward()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure><p>关闭的窗口是创建的主窗口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 获取浏览器对象</span></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">browser.maximize_window()</span><br><span class="line"><span class="comment"># 打开url</span></span><br><span class="line"></span><br><span class="line">browser.get(<span class="string">&quot;https://www.bilibili.com/&quot;</span>)</span><br><span class="line"><span class="comment"># print(browser.find_element(By.CSS_SELECTOR,value=&#x27;nav-search-content&#x27;).size)</span></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">el1=browser.find_element(By.CSS_SELECTOR,value=<span class="string">&#x27;.nav-search-input&#x27;</span>)</span><br><span class="line">el1.send_keys(<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">browser.refresh()</span><br><span class="line">el=browser.find_elements(By.CLASS_NAME,value=<span class="string">&#x27;channel-link&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">el.click()</span><br><span class="line"><span class="built_in">print</span>(browser.current_url)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">browser.find_elements(By.CLASS_NAME,value=<span class="string">&#x27;channel-link&#x27;</span>)[<span class="number">3</span>].click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">browser.find_elements(By.CLASS_NAME,value=<span class="string">&#x27;channel-link&#x27;</span>)[<span class="number">4</span>].click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 关闭主窗口</span></span><br><span class="line">browser.close()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/API1.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/API2.png"></p><h1 id="鼠标和键盘操作"><a href="#鼠标和键盘操作" class="headerlink" title="鼠标和键盘操作"></a>鼠标和键盘操作</h1><h2 id="鼠标操作"><a href="#鼠标操作" class="headerlink" title="鼠标操作"></a>鼠标操作</h2><p><code>click()</code>是元素的事件，不是鼠标的事件。在selenium中操作鼠标的方法封装在ActionChains类中</p><p>实例化对象：<code>action=ActionChains(driver)</code></p><p>方法：</p><p><code>context_click(element)</code> 右击</p><p><code>double_click(element)</code>双击</p><p><code>drag_and_drop(source,target)</code> 拖动</p><p><code>move_to_element</code>悬停</p><p><code>perform()</code>执行以上所有鼠标操作，所有的方法都需要执行才生效</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">browser=webdriver.Chrome()</span><br><span class="line">action=ActionChains(browser)</span><br><span class="line">browser.get(<span class="string">&#x27;https://www.bilibili.com&#x27;</span>)</span><br><span class="line">el1 = browser.find_element(By.CSS_SELECTOR, value=<span class="string">&#x27;.nav-search-input&#x27;</span>)</span><br><span class="line"><span class="comment"># 右击鼠标</span></span><br><span class="line">action.context_click(el1).perform()</span><br><span class="line">el1.send_keys(<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 双击</span></span><br><span class="line">action.double_click(el1).perform()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">browser.refresh()</span><br><span class="line">el2 = browser.find_element(By.CSS_SELECTOR, value=<span class="string">&#x27;.download-client-trigger__icon&#x27;</span>)</span><br><span class="line"><span class="comment"># 悬停</span></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">action.move_to_element(el2).perform()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure><p>拖拽：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取浏览器对象</span></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">browser.maximize_window()</span><br><span class="line"><span class="comment"># 打开url</span></span><br><span class="line">action = ActionChains(browser)</span><br><span class="line">browser.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">el1 = browser.find_element(By.CSS_SELECTOR, value=<span class="string">&#x27;.title-content-title&#x27;</span>)</span><br><span class="line">el2=browser.find_element(By.CSS_SELECTOR,value=<span class="string">&#x27;#kw&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 将元素el1拖至el2</span></span><br><span class="line">action.drag_and_drop(el1,el2).perform()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">browser.find_element(By.CSS_SELECTOR,value=<span class="string">&#x27;#su&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">browser.quit()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/dragdrop.png"></p><p><code>drag_and_drop_by_offset(source,xoffset,yoffset)</code>通过坐标偏移量执行拖拽</p><p>实例化匿名：<code>ActionChains(driver).double_click(element).perform()</code></p><p>实名：<code>action=ActionChains(driver)</code></p><h2 id="键盘操作"><a href="#键盘操作" class="headerlink" title="键盘操作"></a>键盘操作</h2><p>常用的键盘操作：</p><p><code>send_keys(Keys.BACK_SPACE)</code>  删除键</p><p><code>send_keys(Keys.SPACE)</code>  空格键</p><p><code>send_keys(Keys.TAB)</code>  制表键</p><p><code>send_keys(keys.ESCAPE)</code> 回退键</p><p><code>send_keys(keys.ENTER)</code>  回车键</p><p><code>send_keys(keys.CONTROL,&#39;a&#39;)</code> ctrl+a</p><p><code>send_keys(keys.CONTROL,&#39;c&#39;)</code> ctrl+c</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains, Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取浏览器对象</span></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">browser.maximize_window()</span><br><span class="line"><span class="comment"># 打开url</span></span><br><span class="line">action = ActionChains(browser)</span><br><span class="line">browser.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">el1 = browser.find_element(By.CSS_SELECTOR, value=<span class="string">&#x27;#kw&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">el1.send_keys(<span class="string">&#x27;Python1&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">el1.send_keys(Keys.BACK_SPACE)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">el1.send_keys(Keys.CONTROL, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">el1.send_keys(Keys.CONTROL, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 粘贴</span></span><br><span class="line">el1.send_keys(Keys.CONTROL, <span class="string">&#x27;v&#x27;</span>)</span><br><span class="line">el1.send_keys(Keys.CONTROL, <span class="string">&#x27;v&#x27;</span>)</span><br><span class="line">browser.find_element(By.CSS_SELECTOR, value=<span class="string">&#x27;#su&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/keyboard.png"></p><h1 id="元素等待"><a href="#元素等待" class="headerlink" title="元素等待"></a>元素等待</h1><p>在定位页面元素如果未找到，会在指定时间内一直等待的过程。在设置的时长内加载出来，会执行代码；没有加载出来则抛出异常</p><p>为什么要设置元素等待？网络速度慢、电脑配置低、服务器处理请求慢</p><h2 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h2><p>隐式等待为<strong>全局设置</strong>，设置一次，作用于所有元素。一般为前置必写代码</p><p>定位元素时，如果能定位到元素则直接返回该元素，不触发等待；如果不能定位到该元素，则间隔一段时间后再去定位元素；如果在达到最大时长时还没有找到指定元素，则抛出元素不存在的异常<code>NoSuchElementException</code></p><p>方法：<code>driver.implicitly_wait(timeout)</code>,timeout为等待最大时长，单位秒。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取浏览器对象</span></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">browser.maximize_window()</span><br><span class="line"><span class="comment"># 打开url</span></span><br><span class="line">browser.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br><span class="line"><span class="comment"># 设置隐式等待10s</span></span><br><span class="line">browser.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 正确id为kw</span></span><br><span class="line">el1 = browser.find_element(By.CSS_SELECTOR, value=<span class="string">&#x27;#kj&#x27;</span>)</span><br><span class="line">el1.send_keys(<span class="string">&#x27;python&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/ime.png"></p><h2 id="显式等待"><a href="#显式等待" class="headerlink" title="显式等待"></a>显式等待</h2><p><strong>对单个的元素有效</strong></p><p>定位元素时，如果能定位到元素则直接返回该元素，不触发等待；如果不能定位到该元素，则间隔一段时间后再去定位元素；如果在达到最大时长时还没有找到指定元素，则抛出超时异常<code>TimeoutException</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 导包</span><br><span class="line"><span class="number">2.</span> webDriverWait(driver, timeout, poll_frequency=<span class="number">0.5</span>)</span><br><span class="line"> <span class="number">1</span>) driver: 浏览器驱动对象</span><br><span class="line"> <span class="number">2</span>) timeout: 超时的时长单位秒</span><br><span class="line"> <span class="number">3</span>) poll_frequency: 检测间隔时间，默认<span class="number">0.5</span>s</span><br><span class="line"><span class="number">3.</span> 调用方法 until(method):直到...时</span><br><span class="line"> <span class="number">1</span>) method: 函数名称，该函数用来实现对元素的定位</span><br><span class="line"> <span class="number">2</span>) 一般使用匿名函数来实现：<span class="keyword">lambda</span> x: x.find_element(By.方法,value)</span><br><span class="line"><span class="number">4.</span> element = WebDriverWait(driver, <span class="number">10</span>, <span class="number">1</span>).util(<span class="keyword">lambda</span> x: x.find_element(By.,value))</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取浏览器对象</span></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">browser.maximize_window()</span><br><span class="line"><span class="comment"># 打开url</span></span><br><span class="line">browser.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br><span class="line"><span class="comment"># 设置显式等待10s</span></span><br><span class="line"><span class="comment"># 正确id为kw</span></span><br><span class="line">el = WebDriverWait(browser, <span class="number">10</span>, poll_frequency=<span class="number">0.5</span>).until(<span class="keyword">lambda</span> x: x.find_element(By.CSS_SELECTOR, value=<span class="string">&#x27;#kj&#x27;</span>))</span><br><span class="line"><span class="comment"># 此时el还不是元素，代码运行起来才是</span></span><br><span class="line">el.send_keys(<span class="string">&#x27;python&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/timeout.png"></p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li>显示等待针对单个元素生效，隐式等待针对全局元素生效</li></ul><h1 id="滚动条操作"><a href="#滚动条操作" class="headerlink" title="滚动条操作"></a>滚动条操作</h1><p>html页面元素为动态显示，元素根据滚动条的下拉而加载。</p><p>Selenium没有提供操作滚动条的方法，但是提供了可执行JS脚本的方法，我们通过JS脚本来达到操作滚动条的目的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 设置JS脚本控制滚动条</span><br><span class="line">js = &quot;window.scrollTo(0,1000)&quot;</span><br><span class="line">(0:左边距;1000:上边距 单位:像素)</span><br><span class="line">2. selenium调用JS脚本的方法</span><br><span class="line">driver.execute_scrip(js)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取浏览器对象</span></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">browser.maximize_window()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问url</span></span><br><span class="line">browser.get(<span class="string">&quot;https://rinta.top&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 设置js控制语句</span></span><br><span class="line">js = <span class="string">&quot;window.scrollTo(0,10000)&quot;</span></span><br><span class="line"><span class="comment"># 滚动条下拉</span></span><br><span class="line">browser.execute_script(js)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">time.sleep(<span class="number">10</span>)</span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/scroll.png"></p><h1 id="frame切换"><a href="#frame切换" class="headerlink" title="frame切换"></a>frame切换</h1><p>frame是html页面中的一种框架，主要作用是在当前页面的指定区域显示一页面元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">形式一：</span><br><span class="line"><span class="tag">&lt;<span class="name">frameset</span> <span class="attr">cols</span>=<span class="string">&quot;25%,75%&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">&quot;frame_a.htm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">frame</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fram</span> <span class="attr">src</span>=<span class="string">&quot;frame_.htm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">fram</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br><span class="line">形式二：</span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">&quot;iframe_a&quot;</span> <span class="attr">src</span>=<span class="string">&quot;demo_iframe.htm&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span>,<span class="attr">height</span>=<span class="string">&quot;200&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="frame切换方法"><a href="#frame切换方法" class="headerlink" title="frame切换方法"></a>frame切换方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 切换到指定frame的方法，frame_reference可以为frame框架的name、<span class="built_in">id</span>或者定位到的frame元素</span><br><span class="line">driver.switch_to.frame(frame_reference)   </span><br><span class="line"><span class="number">2.</span> 恢复默认页面,在frame中操作其他页面一定要切换到默认页面</span><br><span class="line">driver.switch_to.default_content()</span><br></pre></td></tr></table></figure><h1 id="窗口切换"><a href="#窗口切换" class="headerlink" title="窗口切换"></a>窗口切换</h1><p>Selenium的默认焦点是在主窗口。在selenium中封装了获取当前窗口的句柄、获取所有窗口句柄和切换到指定句柄窗口的方法</p><p><strong>句柄：handle</strong>，窗口的唯一识别码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取当前窗口句柄</span></span><br><span class="line">driver.current_window_handle  </span><br><span class="line"><span class="comment"># 获取所有窗口句柄</span></span><br><span class="line">driver.window_handles</span><br><span class="line"><span class="comment"># 切换指定句柄窗口</span></span><br><span class="line">driver.switch_to.window(handle)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取浏览器对象</span></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">browser.maximize_window()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问url</span></span><br><span class="line">browser.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 输入内容并查询</span></span><br><span class="line">browser.find_element(By.CSS_SELECTOR, <span class="string">&#x27;#kw&#x27;</span>).send_keys(<span class="string">&#x27;小润&#x27;</span>)</span><br><span class="line">browser.find_element(By.CSS_SELECTOR, <span class="string">&#x27;#su&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">ch = browser.current_window_handle</span><br><span class="line"><span class="built_in">print</span>(ch)</span><br><span class="line"><span class="comment"># 点击词条</span></span><br><span class="line">browser.find_element(By.CSS_SELECTOR, <span class="string">&#x27;._around-mask_bo7t2_14&#x27;</span>).click()</span><br><span class="line"><span class="comment"># 获取所有窗口句柄</span></span><br><span class="line">handles = browser.window_handles</span><br><span class="line"><span class="built_in">print</span>(handles)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> handle <span class="keyword">in</span> handles:</span><br><span class="line">    <span class="comment"># 切换窗口,虽然看到的页面是新打开的小润页面，但是元素定位仍在主窗口</span></span><br><span class="line">    <span class="keyword">if</span> handle != ch:</span><br><span class="line">        browser.switch_to.window(handle)</span><br><span class="line">        browser.find_elements(By.CSS_SELECTOR, <span class="string">&#x27;.text_BqlxX&#x27;</span>)[<span class="number">2</span>].click()</span><br><span class="line">time.sleep(<span class="number">10</span>)</span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/handle.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/handles.png"></p><h1 id="窗口截图与验证码"><a href="#窗口截图与验证码" class="headerlink" title="窗口截图与验证码"></a>窗口截图与验证码</h1><h2 id="窗口截图"><a href="#窗口截图" class="headerlink" title="窗口截图"></a>窗口截图</h2><p>在执行出错的时候对当前窗口截图保存，可以通过图片直观地看到出错的原因</p><p><code>driver.get_screenshot_as_file(imgpath)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取浏览器对象</span></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">browser.maximize_window()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问url</span></span><br><span class="line">browser.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 输入内容并查询</span></span><br><span class="line">browser.find_element(By.CSS_SELECTOR, <span class="string">&#x27;#kw&#x27;</span>).send_keys(<span class="string">&#x27;小润&#x27;</span>)</span><br><span class="line">browser.find_element(By.CSS_SELECTOR, <span class="string">&#x27;#su&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 截图</span></span><br><span class="line">browser.get_screenshot_as_file(<span class="string">&#x27;./screenshot.png&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">10</span>)</span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/screenshot.png"></p><p>根据时间戳获取截图：</p><p><code>browser.get_screenshot_as_file(&#39;./&#123;&#125;.png&#39;.format(time.strftime(&quot;%Y_%m_%d_%H_%M_%S&quot;)))</code></p><p><img src="keep/source/images/star.gif" data-original="/Web%E8%87%AA%E5%8A%A8%E5%8C%96%5Csh.png" alt="image-20240315160631218"></p><h2 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h2><p>selenium中没有对验证码处理的方式</p><ol><li>去掉验证码（测试环境下采用）</li><li>设置万能验证码（生产环境和测试环境下采用）</li><li>验证码识别技术（通过Python-tesseract来识别图片类型验证码，识别率很难达到100%）</li><li>记录cookie（通过cookie进行跳过登录）</li></ol><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/cookie.png"></p><p>cookie是由web服务器生成的，并且保存至用户浏览器上的小型文本文件，可以包含用户相关信息。</p><p>cookie数据格式：键值对组成（python中的字典）</p><p>cookie产生：客户端请求服务器。如果服务器需要记录该用户状态，就向客户端颁发一个cookie数据</p><p>cookie使用：当浏览器再次请求该网站时，浏览器把请求的数据和cookie数据一同提交给服务器检查该cookie，以此来辨认用户状态</p><p>Cookie通常用于以下几个方面：</p><ol><li>会话管理：用于跟踪用户的会话信息，例如在用户登录后保持用户的登录状态。</li><li>用户跟踪：用于记录用户的行为和偏好，以便网站提供个性化的体验。</li><li>高级功能：用于实现购物车、记住密码、广告定位等功能。</li><li>安全性：可以用于防止跨站点请求伪造（CSRF）等安全问题。</li></ol><h3 id="selenium操作cookie"><a href="#selenium操作cookie" class="headerlink" title="selenium操作cookie"></a>selenium操作cookie</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 获取指定cookie，name为cookie的名称。底层是get_cookies()</span></span><br><span class="line">get_cookie(name)</span><br><span class="line"><span class="comment"># 2. 获取本网站所有本地cookies</span></span><br><span class="line">get_cookies()</span><br><span class="line"><span class="comment"># 3. 添加coockie。cookie_dict:一个字典对象，必选的键包括&#x27;name&#x27; and &#x27;value&#x27;</span></span><br><span class="line">add_cookie(cookie_dict)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取浏览器对象</span></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">browser.maximize_window()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问url</span></span><br><span class="line">browser.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 添加cookie，以登录状态进入</span></span><br><span class="line">browser.add_cookie(&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;BDUSS&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="string">&quot;JwZG4zOUpyQU1RbXI2Z0VmbXVlU0ZuWmY0MUotcVZqcER-N3RqV0l-WUZveHRtSVFBQUFBJCQAAAAAAAAAAAEAAABZR~-XUmlubnQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUW9GUFFvRlSF&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">browser.refresh()</span><br><span class="line">time.sleep(<span class="number">10</span>)</span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/cookies.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取浏览器对象</span></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">browser.maximize_window()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问url</span></span><br><span class="line">browser.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 添加cookie</span></span><br><span class="line">browser.add_cookie(&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;BDUSS&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>: <span class="string">&quot;JwZG4zOUpyQU1RbXI2Z0VmbXVlU0ZuWmY0MUotcVZqcER-N3RqV0l-WUZveHRtSVFBQUFBJCQAAAAAAAAAAAEAAABZR~-XUmlubnQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUW9GUFFvRlSF&quot;</span>&#125;)</span><br><span class="line"><span class="comment"># 获取所有的cookies信息</span></span><br><span class="line">cookies=browser.get_cookies()</span><br><span class="line"><span class="keyword">for</span> co <span class="keyword">in</span> cookies:</span><br><span class="line">    <span class="built_in">print</span>(co)</span><br><span class="line"><span class="comment"># 获取单个cookie</span></span><br><span class="line">cookie=browser.get_cookie(<span class="string">&quot;name&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(cookie)</span><br><span class="line"><span class="built_in">print</span>(browser.get_cookie(<span class="string">&#x27;BDUSS&#x27;</span>))</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">browser.refresh()</span><br><span class="line">time.sleep(<span class="number">10</span>)</span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/baiducoo.png"></p><h1 id="登录测试案例"><a href="#登录测试案例" class="headerlink" title="登录测试案例"></a>登录测试案例</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义测试类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestJDShop</span>(unittest.TestCase):</span><br><span class="line">    <span class="comment"># 定义初始化方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUp</span>(<span class="params">self</span>):</span><br><span class="line">        url = <span class="string">&#x27;https://passport.jd.com/new/login.aspx?ReturnUrl=https%3A%2F%2Fwww.jd.com%2F%3Fcu%3Dtrue%26utm_source%3Dbaidu-pinzhuan%26utm_medium%3Dcpc%26utm_campaign%3Dt_288551095_baidupinzhuan%26utm_term%3D0f3d30c8dba7459bb52f2eb5eba8ac7d_0_40173755626041979e00a100eec87380&#x27;</span></span><br><span class="line"></span><br><span class="line">        self.driver = webdriver.Chrome()</span><br><span class="line">        self.driver.maximize_window()</span><br><span class="line">        self.driver.get(url)</span><br><span class="line">        self.driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义teardown</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDown</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 关闭浏览器对象</span></span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        self.driver.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_code_null</span>(<span class="params">self</span>):</span><br><span class="line">        driver = self.driver</span><br><span class="line">        <span class="comment"># 切换至短信登录</span></span><br><span class="line">        driver.find_element(By.CSS_SELECTOR, <span class="string">&#x27;#sms-login&#x27;</span>).click()</span><br><span class="line">        <span class="comment"># 输入账号</span></span><br><span class="line">        el1 = driver.find_element(By.CSS_SELECTOR, <span class="string">&#x27;#mobile-number&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        el1.send_keys(<span class="string">&#x27;12345678901&#x27;</span>)</span><br><span class="line">        <span class="comment"># 点击发送验证码</span></span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        el2 = driver.find_element(By.CSS_SELECTOR, <span class="string">&#x27;#send-sms-code-btn&#x27;</span>)</span><br><span class="line">        el2.click()</span><br><span class="line">        <span class="comment"># 输入验证码</span></span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        el3 = driver.find_element(By.CSS_SELECTOR, <span class="string">&#x27;#sms-code&#x27;</span>)</span><br><span class="line">        el3.send_keys(<span class="string">&#x27;324678&#x27;</span>)</span><br><span class="line">        <span class="comment"># 点击登录</span></span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        driver.find_element(By.CSS_SELECTOR, <span class="string">&#x27;#sms-login-submit&#x27;</span>).click()</span><br><span class="line">        <span class="comment"># 获取错误提示信息</span></span><br><span class="line">        text = driver.find_element(By.CSS_SELECTOR, <span class="string">&#x27;.sms-box-error-msg&#x27;</span>).text</span><br><span class="line">        expect_text = <span class="string">&#x27;验证码为空&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(text)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.assertEqual(text, expect_text)</span><br><span class="line">        <span class="keyword">except</span> AssertionError:</span><br><span class="line">            driver.get_screenshot_as_file(<span class="string">&#x27;./&#123;&#125;.png&#x27;</span>.<span class="built_in">format</span>(time.strftime(<span class="string">&quot;%Y_%m_%d_%H_%M_%S&quot;</span>)))</span><br><span class="line">            <span class="comment"># 抛异常，有异常捕获不抛出会显示test pass</span></span><br><span class="line">            <span class="keyword">raise</span></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/jdlogin.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/jdcode.png"></p><h1 id="PO模式"><a href="#PO模式" class="headerlink" title="PO模式"></a>PO模式</h1><p>PO：page（页面），objecr（对象）</p><p>v1：不采用任何模型（线性模型）</p><p>v2：采用unittest框架</p><p>v3：业务代码和页面对象进行分离</p><p>v4：实际中的PO模式编写</p><h2 id="v1"><a href="#v1" class="headerlink" title="v1"></a>v1</h2><p>不能实现批量执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 淘宝界面，用不了</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试之前的前置工作</span></span><br><span class="line"><span class="comment"># 实例化对象</span></span><br><span class="line">browser=webdriver.Chrome()</span><br><span class="line"><span class="comment"># 窗口最大化</span></span><br><span class="line">browser.maximize_window()</span><br><span class="line"><span class="comment"># 获取url</span></span><br><span class="line">browser.get(<span class="string">&#x27;https://login.taobao.com/member/login.jhtml?spm=a21bo.jianhua.754894437.1.5af92a89NKrwFE&amp;f=top&amp;redirectURL=https%3A%2F%2Fwww.taobao.com%2F&#x27;</span>)</span><br><span class="line">browser.implicitly_wait(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换至短信登录</span></span><br><span class="line"><span class="comment"># 点击切换按钮</span></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">browser.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;login&quot;]/div[2]/div/div[2]/a[1]&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 输入错误的username</span></span><br><span class="line">el1=browser.find_element(By.CSS_SELECTOR,<span class="string">&#x27;#fm-login-id&#x27;</span>)</span><br><span class="line">el1.send_keys(<span class="string">&#x27;15234567888&#x27;</span>)</span><br><span class="line"><span class="comment"># 输入正确的密码</span></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">el2=browser.find_element(By.CSS_SELECTOR,<span class="string">&#x27;#fm-login-password&#x27;</span>)</span><br><span class="line">el2.send_keys(<span class="string">&#x27;Rinta1343&#x27;</span>)</span><br><span class="line"><span class="comment"># 点击登录</span></span><br><span class="line">time.sleep(<span class="number">10</span>)</span><br><span class="line">browser.find_element(By.CSS_SELECTOR,<span class="string">&#x27;.class=&quot;fm-button fm-submit password-login&#x27;</span>).click()</span><br><span class="line"><span class="comment"># 获取错误提示信息</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">msg=browser.find_element(By.CSS_SELECTOR,<span class="string">&#x27;.login-error-msg&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> msg == <span class="string">&#x27;账号名或登录密码不正确&#x27;</span></span><br><span class="line"><span class="comment"># 结束工作，关闭对象</span></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure><p>验证密码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common <span class="keyword">import</span> NoSuchElementException</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试之前的前置工作</span></span><br><span class="line"><span class="comment"># 实例化对象</span></span><br><span class="line">browser=webdriver.Chrome()</span><br><span class="line"><span class="comment"># 窗口最大化</span></span><br><span class="line">browser.maximize_window()</span><br><span class="line"><span class="comment"># 获取url</span></span><br><span class="line">browser.get(<span class="string">&#x27;http://demo5.tp-shop.cn/&#x27;</span>)</span><br><span class="line">browser.implicitly_wait(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跳转到登录页面</span></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 输入错误的username</span></span><br><span class="line">browser.find_element(By.LINK_TEXT,<span class="string">&#x27;登录&#x27;</span>).click()</span><br><span class="line">el1=browser.find_element(By.CSS_SELECTOR,<span class="string">&#x27;#username&#x27;</span>)</span><br><span class="line">el1.send_keys(<span class="string">&#x27;13800138006&#x27;</span>)</span><br><span class="line"><span class="comment"># 输入错误的密码</span></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">el2=browser.find_element(By.CSS_SELECTOR,<span class="string">&#x27;#password&#x27;</span>)</span><br><span class="line">el2.send_keys(<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line"><span class="comment"># 点击登录</span></span><br><span class="line">time.sleep(<span class="number">10</span>)</span><br><span class="line">browser.find_element(By.CSS_SELECTOR,<span class="string">&#x27;.J-login-submit&#x27;</span>).click()</span><br><span class="line"><span class="comment"># 如果有消息链接，则登录成功，截图</span></span><br><span class="line"><span class="comment"># el3=browser.find_element(By.CSS_SELECTOR,&#x27;.J-umsg&#x27;)</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 尝试定位元素</span></span><br><span class="line">    el3=browser.find_element(By.CSS_SELECTOR,<span class="string">&#x27;.J-umsg&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;登录成功&#x27;</span>)</span><br><span class="line">    browser.get_screenshot_as_file(<span class="string">&#x27;./success.png&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> NoSuchElementException:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;登录失败&#x27;</span>)</span><br><span class="line">    browser.get_screenshot_as_file(<span class="string">&#x27;./fail.png&#x27;</span>)</span><br><span class="line"><span class="comment"># 结束工作，关闭对象</span></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/image-20240418194248930.png"></p><p>换成正确密码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">el2.send_keys(<span class="string">&#x27;soubao0316&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/image-20240418194530691.png"></p><p>缺点：数据和代码操作融合在一起，单线操作</p><h2 id="v2"><a href="#v2" class="headerlink" title="v2"></a>v2</h2><p>可以批量运行，代码冗余量大。没有实现页面对象与业务脚本的分离</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建测试类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestLogin</span>(unittest.TestCase):</span><br><span class="line">    browser = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试之前的前置工作</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUpClass</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="comment"># 实例化对象</span></span><br><span class="line">        cls.browser = webdriver.Chrome()</span><br><span class="line">        <span class="comment"># 窗口最大化</span></span><br><span class="line">        cls.browser.maximize_window()</span><br><span class="line">        <span class="comment"># 获取url</span></span><br><span class="line">        cls.browser.get(<span class="string">&#x27;http://localhost/iwebshopmaster/&#x27;</span>)</span><br><span class="line">        cls.browser.implicitly_wait(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDownClass</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="comment"># 结束工作，关闭对象</span></span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line">        cls.browser.quit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_login_username_not_exist</span>(<span class="params">self</span>):</span><br><span class="line">        browser = self.browser</span><br><span class="line">        <span class="comment"># 切换至登录界面</span></span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        browser.find_element(By.LINK_TEXT, <span class="string">&#x27;登录&#x27;</span>).click()</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        <span class="comment"># 输入错误的username</span></span><br><span class="line">        el1 = browser.find_element(By.NAME, <span class="string">&#x27;login_info&#x27;</span>)</span><br><span class="line">        el1.clear()</span><br><span class="line">        el1.send_keys(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line">        <span class="comment"># 输入正确的密码</span></span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        el2 = browser.find_element(By.NAME, <span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        el2.clear()</span><br><span class="line">        el2.send_keys(<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line">        <span class="comment"># 点击登录</span></span><br><span class="line">        time.sleep(<span class="number">10</span>)</span><br><span class="line">        browser.find_element(By.CSS_SELECTOR, <span class="string">&#x27;.submit_login&#x27;</span>).click()</span><br><span class="line">        <span class="comment"># 获取错误提示信息</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        msg = browser.find_element(By.CSS_SELECTOR, <span class="string">&#x27;.prompt&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 错误的断言import time</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建测试类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestLogin</span>(unittest.TestCase):</span><br><span class="line">    browser = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试之前的前置工作</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUpClass</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="comment"># 实例化对象</span></span><br><span class="line">        cls.browser = webdriver.Chrome()</span><br><span class="line">        <span class="comment"># 窗口最大化</span></span><br><span class="line">        cls.browser.maximize_window()</span><br><span class="line">        <span class="comment"># 获取url</span></span><br><span class="line">        cls.browser.get(<span class="string">&#x27;http://localhost/iwebshopmaster/&#x27;</span>)</span><br><span class="line">        cls.browser.implicitly_wait(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDownClass</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="comment"># 结束工作，关闭对象</span></span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line">        cls.browser.quit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_login_username_not_exist</span>(<span class="params">self</span>):</span><br><span class="line">        browser = self.browser</span><br><span class="line">        <span class="comment"># 切换至登录界面</span></span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        browser.find_element(By.LINK_TEXT, <span class="string">&#x27;登录&#x27;</span>).click()</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        <span class="comment"># 输入错误的username</span></span><br><span class="line">        el1 = browser.find_element(By.NAME, <span class="string">&#x27;login_info&#x27;</span>)</span><br><span class="line">        el1.clear()</span><br><span class="line">        el1.send_keys(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line">        <span class="comment"># 输入正确的密码</span></span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        el2 = browser.find_element(By.NAME, <span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        el2.clear()</span><br><span class="line">        el2.send_keys(<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line">        <span class="comment"># 点击登录</span></span><br><span class="line">        time.sleep(<span class="number">10</span>)</span><br><span class="line">        browser.find_element(By.CSS_SELECTOR, <span class="string">&#x27;.submit_login&#x27;</span>).click()</span><br><span class="line">        <span class="comment"># 获取错误提示信息</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        msg = browser.find_element(By.CSS_SELECTOR, <span class="string">&#x27;.prompt&#x27;</span>).text</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.assertEqual(msg, <span class="string">&#x27;账号名或登录密码不正确&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> AssertionError:</span><br><span class="line">            browser.get_screenshot_as_file(<span class="string">&#x27;./failusername.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_login_password_err</span>(<span class="params">self</span>):</span><br><span class="line">        browser = self.browser</span><br><span class="line">        <span class="comment"># 切换至短信登录</span></span><br><span class="line">        <span class="comment"># 点击切换按钮</span></span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        browser.find_element(By.LINK_TEXT, <span class="string">&#x27;登录&#x27;</span>).click()</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        <span class="comment"># 输入正确的username</span></span><br><span class="line">        el1 = browser.find_element(By.NAME, <span class="string">&#x27;login_info&#x27;</span>)</span><br><span class="line">        el1.clear()</span><br><span class="line">        el1.send_keys(<span class="string">&#x27;ab&#x27;</span>)</span><br><span class="line">        <span class="comment"># 输入错误的密码</span></span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        el2 = browser.find_element(By.NAME, <span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        el2.clear()</span><br><span class="line">        el2.send_keys(<span class="string">&#x27;1234567&#x27;</span>)</span><br><span class="line">        <span class="comment"># 点击登录</span></span><br><span class="line">        time.sleep(<span class="number">10</span>)</span><br><span class="line">        browser.find_element(By.CSS_SELECTOR, <span class="string">&#x27;.submit_login&#x27;</span>).click()</span><br><span class="line">        <span class="comment"># 获取错误提示信息</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        msg = browser.find_element(By.CSS_SELECTOR, <span class="string">&#x27;.prompt&#x27;</span>).text</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.assertEqual(msg, <span class="string">&#x27;账号或密码错误&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> AssertionError:</span><br><span class="line">            browser.get_screenshot_as_file(<span class="string">&#x27;../reports/failpassword.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            self.assertEqual(msg, <span class="string">&#x27;账号名或登录密码不正确&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> AssertionError:</span><br><span class="line">            browser.get_screenshot_as_file(<span class="string">&#x27;./failusername.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_login_password_err</span>(<span class="params">self</span>):</span><br><span class="line">        browser = self.browser</span><br><span class="line">        <span class="comment"># 切换至短信登录</span></span><br><span class="line">        <span class="comment"># 点击切换按钮</span></span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        browser.find_element(By.LINK_TEXT, <span class="string">&#x27;登录&#x27;</span>).click()</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        <span class="comment"># 输入正确的username</span></span><br><span class="line">        el1 = browser.find_element(By.NAME, <span class="string">&#x27;login_info&#x27;</span>)</span><br><span class="line">        el1.clear()</span><br><span class="line">        el1.send_keys(<span class="string">&#x27;ab&#x27;</span>)</span><br><span class="line">        <span class="comment"># 输入错误的密码</span></span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        el2 = browser.find_element(By.NAME, <span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        el2.clear()</span><br><span class="line">        el2.send_keys(<span class="string">&#x27;1234567&#x27;</span>)</span><br><span class="line">        <span class="comment"># 点击登录</span></span><br><span class="line">        time.sleep(<span class="number">10</span>)</span><br><span class="line">        browser.find_element(By.CSS_SELECTOR, <span class="string">&#x27;.submit_login&#x27;</span>).click()</span><br><span class="line">        <span class="comment"># 获取错误提示信息</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        msg = browser.find_element(By.CSS_SELECTOR, <span class="string">&#x27;.prompt&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 正确的断言</span></span><br><span class="line">            self.assertEqual(msg, <span class="string">&#x27;账号或密码错误&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> AssertionError:</span><br><span class="line">            browser.get_screenshot_as_file(<span class="string">&#x27;../reports/failpassword.png&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/image-20240418202223298.png"></p><h2 id="v3"><a href="#v3" class="headerlink" title="v3"></a>v3</h2><p>页面层以page开头，业务层以test开头</p><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/v3file.png"></p><p>页面层级清晰，但是代码冗余量大</p><p>页面层代码page_login.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">页面对象层</span></span><br><span class="line"><span class="string">    页面对象编写技巧：</span></span><br><span class="line"><span class="string">        类名：使用大驼峰将模块名称抄进来，有下划线去掉下划线</span></span><br><span class="line"><span class="string">        方法：根据业务需求每个操作步骤单独封装一个方法</span></span><br><span class="line"><span class="string">            方法名：page_XXX</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PageLogin</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 获取driver对象</span></span><br><span class="line">        self.driver = webdriver.Chrome()</span><br><span class="line">        <span class="comment"># 最大化浏览器</span></span><br><span class="line">        self.driver.maximize_window()</span><br><span class="line">        <span class="comment"># 隐式等待</span></span><br><span class="line">        self.driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">        <span class="comment"># 打开url</span></span><br><span class="line">        self.driver.get(<span class="string">&#x27;http://localhost/iwebshopmaster/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 点击登录链接</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">page_click_login</span>(<span class="params">self</span>):</span><br><span class="line">        self.driver.find_element(By.LINK_TEXT, <span class="string">&#x27;登录&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输入用户名</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">page_input_username</span>(<span class="params">self, username</span>):</span><br><span class="line">        self.driver.find_element(By.NAME, <span class="string">&#x27;login_info&#x27;</span>).send_keys(username)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输入密码</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">page_input_pwd</span>(<span class="params">self, pwd</span>):</span><br><span class="line">        self.driver.find_element(By.NAME, <span class="string">&#x27;password&#x27;</span>).send_keys(pwd)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 点击登录</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">page_click_login_btn</span>(<span class="params">self</span>):</span><br><span class="line">        self.driver.find_element(By.CLASS_NAME, <span class="string">&#x27;submit_login&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取异常提示</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">page_get_text</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.driver.find_element(By.CSS_SELECTOR, <span class="string">&#x27;.prompt&#x27;</span>).text</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 组装登录业务方法给业务层调用</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">page_login</span>(<span class="params">self, username, pwd</span>):</span><br><span class="line">        <span class="comment"># 切换至登录界面</span></span><br><span class="line">        self.page_click_login()</span><br><span class="line">        <span class="comment"># 输入用户名</span></span><br><span class="line">        self.page_input_username(username)</span><br><span class="line">        <span class="comment"># 输入密码</span></span><br><span class="line">        self.page_input_pwd(pwd)</span><br><span class="line">        <span class="comment"># 点击登录</span></span><br><span class="line">        self.page_click_login_btn()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>业务层代码test_login：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> parameterized <span class="keyword">import</span> parameterized</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> po.v3.page.page_login <span class="keyword">import</span> PageLogin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建测试类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestLogin</span>(unittest.TestCase):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUp</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 创建page对象</span></span><br><span class="line">        self.login = PageLogin()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 结束方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDown</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 关闭驱动对象</span></span><br><span class="line">        self.login.driver.quit()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 新建测试方法</span></span><br><span class="line">    <span class="comment"># 参数化</span></span><br><span class="line"><span class="meta">    @parameterized.expand(<span class="params">[(<span class="params"><span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;账号不存在&#x27;</span></span>), (<span class="params"><span class="string">&#x27;ab&#x27;</span>, <span class="string">&#x27;123123&#x27;</span>, <span class="string">&#x27;密码错误&#x27;</span></span>)]</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_login</span>(<span class="params">self, username, pwd, expect</span>):</span><br><span class="line">        <span class="comment"># 调用测试登录方法</span></span><br><span class="line">        self.login.page_login(username, pwd)</span><br><span class="line">        <span class="comment"># 获取登录信息</span></span><br><span class="line">        msg = self.login.page_get_text()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 断言</span></span><br><span class="line">            self.assertEqual(msg, expect)</span><br><span class="line">        <span class="keyword">except</span> AssertionError:</span><br><span class="line">            self.login.driver.get_screenshot_as_file(<span class="string">&#x27;./&#123;&#125;.png&#x27;</span>.<span class="built_in">format</span>(time.strftime(<span class="string">&quot;%Y_%m_%d_%H_%M_%S&quot;</span>)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/image-20240418214755618.png"></p><h2 id="v4"><a href="#v4" class="headerlink" title="v4"></a>v4</h2><p>抽取v3版本的page页面公共方法—&gt;base（基类&#x2F;工具层）</p><p>page（页面对象）：一个页面封装成一个对象，继承base</p><p>scripts（业务层）：导包调用page页面</p><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/v4.png"></p><p>base&#x2F;base.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.service <span class="keyword">import</span> Service</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>:</span><br><span class="line">    chrome_testing_path=<span class="string">r&quot;D:\chrometest\chrome-win64\chrome.exe&quot;</span></span><br><span class="line">    chromedriver_path=<span class="string">r&quot;D:\chrometest\chrome-win64\chromedriver.exe&quot;</span></span><br><span class="line">    options = webdriver.ChromeOptions()</span><br><span class="line">    options.binary_location = chrome_testing_path</span><br><span class="line">    options.add_experimental_option(<span class="string">&#x27;detach&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line">    service=Service(chromedriver_path)</span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.driver = webdriver.Chrome(service=self.service,options=self.options)</span><br><span class="line">        self.driver.maximize_window()</span><br><span class="line">        self.driver.get(</span><br><span class="line">            <span class="string">&#x27;http://localhost/iwebshopmaster&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查找元素方法（提供：点击、输入、获取文本)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">base_find_element</span>(<span class="params">self, loc, timeout=<span class="number">30</span>, poll_frequency=<span class="number">0.5</span></span>):</span><br><span class="line">        <span class="comment"># 封装显示等待,会返回元素</span></span><br><span class="line">        <span class="keyword">return</span> WebDriverWait(self.driver, timeout=timeout, poll_frequency=poll_frequency).until(</span><br><span class="line">            <span class="keyword">lambda</span> x: x.find_element(*loc))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 点击方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">base_click</span>(<span class="params">self, loc</span>):</span><br><span class="line">        self.base_find_element(loc).click()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输入方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">base_input</span>(<span class="params">self, loc, value</span>):</span><br><span class="line">        el = self.base_find_element(loc)</span><br><span class="line">        <span class="comment"># 清空内容</span></span><br><span class="line">        el.clear()</span><br><span class="line">        <span class="comment"># 输入</span></span><br><span class="line">        el.send_keys(value)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取文本方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">base_get_text</span>(<span class="params">self, loc</span>):</span><br><span class="line">        <span class="keyword">return</span> self.base_find_element(loc).text</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 截图方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">base_get_img</span>(<span class="params">self</span>):</span><br><span class="line">        self.driver.get_screenshot_as_file(<span class="string">&quot;../img/&#123;&#125;.png&quot;</span>.<span class="built_in">format</span>(time.strftime(<span class="string">&quot;%Y_%m_%d_%H_%M_%S&quot;</span>)))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>page&#x2F;_<em>init</em>_.py：存放loc（查找元素的参数）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下为登录页面元素配置信息</span></span><br><span class="line"><span class="comment"># 登录链接</span></span><br><span class="line">login_link = By.LINK_TEXT, <span class="string">&quot;登录&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户名</span></span><br><span class="line">login_username = By.NAME, <span class="string">&quot;login_info&quot;</span></span><br><span class="line"><span class="comment"># 密码</span></span><br><span class="line">login_pwd = By.NAME, <span class="string">&quot;password&quot;</span></span><br><span class="line"><span class="comment"># 点击按钮</span></span><br><span class="line">login_btn = By.CSS_SELECTOR, <span class="string">&quot;.submit_login&quot;</span></span><br><span class="line"><span class="comment"># 提示信息</span></span><br><span class="line">login_msg = By.CSS_SELECTOR, <span class="string">&quot;.prompt&quot;</span></span><br></pre></td></tr></table></figure><p>page&#x2F;page_login.py：定义page类（继承自base）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> po.v4 <span class="keyword">import</span> page</span><br><span class="line"><span class="keyword">from</span> po.v4.base.base <span class="keyword">import</span> Base</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PageLogin</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    <span class="comment"># 点击登录链接</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">page_click_login_link</span>(<span class="params">self</span>):</span><br><span class="line">        self.base_click(page.login_link)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输入用户名</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">page_input_username</span>(<span class="params">self, username</span>):</span><br><span class="line">        self.base_input(page.login_username, username)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输入密码</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">page_input_pwd</span>(<span class="params">self, pwd</span>):</span><br><span class="line">        self.base_input(page.login_pwd, pwd)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 点击登录</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">page_click_login_btn</span>(<span class="params">self</span>):</span><br><span class="line">        self.base_click(page.login_btn)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取异常信息</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">page_get_text</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.base_get_text(page.login_msg)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 截图</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">page_get_screenshot</span>(<span class="params">self</span>):</span><br><span class="line">        self.base_get_img()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 组装页面的操作：输入用户名、密码、点击登录</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">page_login</span>(<span class="params">self, username, pwd</span>):</span><br><span class="line">        self.page_input_username(username)</span><br><span class="line">        self.page_input_pwd(pwd)</span><br><span class="line">        self.page_click_login_btn()</span><br></pre></td></tr></table></figure><p>scripts：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> parameterized <span class="keyword">import</span> parameterized</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> po.v4.page.page_login <span class="keyword">import</span> PageLogin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>():</span><br><span class="line">    <span class="keyword">return</span> [(<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;账号不存在&#x27;</span>), (<span class="string">&#x27;ab&#x27;</span>, <span class="string">&#x27;123123&#x27;</span>, <span class="string">&#x27;密码错误&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建测试类并继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestLogin</span>(unittest.TestCase):</span><br><span class="line">    login = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># setUP</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUpClass</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="comment"># 实例化获取页面对象PageLogin</span></span><br><span class="line">        cls.login = PageLogin()</span><br><span class="line">        <span class="comment"># 点击登录</span></span><br><span class="line">        cls.login.page_click_login_link()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># tearDown</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDownClass</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="comment"># 关闭驱动对象</span></span><br><span class="line">        cls.login.driver.quit()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @parameterized.expand(<span class="params">get_data(<span class="params"></span>)</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_login</span>(<span class="params">self, username, pwd, expect</span>):</span><br><span class="line">        <span class="comment"># 调用登录方法</span></span><br><span class="line">        self.login.page_login(username, pwd)</span><br><span class="line">        <span class="comment"># 获取登录提示信息</span></span><br><span class="line">        msg = self.login.page_get_text()</span><br><span class="line">        <span class="comment"># 断言</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.assertEqual(msg, expect)</span><br><span class="line">        <span class="keyword">except</span> AssertionError:</span><br><span class="line">            <span class="comment"># 截图</span></span><br><span class="line">            self.login.page_get_screenshot()</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/image-20240418225436449.png"></p><h1 id="数据驱动"><a href="#数据驱动" class="headerlink" title="数据驱动"></a>数据驱动</h1><p>以数据来驱动整个测试用例的执行，也就是测试数据决定测试结果，可以将用户的关注点放在测试数据的构建和维护上，而不是直接维护脚本，可以利用同样的过程对不同的数据进行测试，实现要依赖参数化。</p><p>数据驱动常用的格式：json、xml、excel、csv、txt</p><p>json的底层是字符串，和字典有区别</p><h2 id="python字典和json之间的转换"><a href="#python字典和json之间的转换" class="headerlink" title="python字典和json之间的转换"></a>python字典和json之间的转换</h2><h3 id="python字典–-json字符串"><a href="#python字典–-json字符串" class="headerlink" title="python字典–&gt;json字符串"></a>python字典–&gt;json字符串</h3><p><code>dumps()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;address&#x27;</span>:<span class="string">&#x27;北京市海淀区&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;school&#x27;</span>:<span class="literal">None</span></span><br><span class="line">&#125;</span><br><span class="line">json_str=json.dumps(data) <span class="comment">#jump()是写</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;address&#x27;</span>: <span class="string">&#x27;北京市海淀区&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;school&#x27;</span>: <span class="literal">None</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data))</span><br><span class="line">json_str = json.dumps(data)</span><br><span class="line"><span class="built_in">print</span>(json_str)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(json_str))</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/tojson.png"></p><h3 id="json字符串–-dict"><a href="#json字符串–-dict" class="headerlink" title="json字符串–&gt;dict"></a>json字符串–&gt;dict</h3><p>键名必须在””中</p><p><code>loads()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">json_str = <span class="string">&#x27;&#123;&quot;id&quot;:1,&quot;name&quot;:&quot;Tom&quot;,&quot;address&quot;:&quot;北京市海淀&quot;,&quot;school&quot;:null&#125;&#x27;</span></span><br><span class="line">dict_data=json.loads(json_str)<span class="comment"># loads()为读取json</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">json_str = <span class="string">&#x27;&#123;&quot;id&quot;:1,&quot;name&quot;:&quot;Tom&quot;,&quot;address&quot;:&quot;北京市海淀&quot;,&quot;school&quot;:null&#125;&#x27;</span></span><br><span class="line">dict_data=json.loads(json_str)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(json_str))</span><br><span class="line"><span class="built_in">print</span>(dict_data)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dict_data))</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/todict.png"></p><h2 id="json读写"><a href="#json读写" class="headerlink" title="json读写"></a>json读写</h2><h3 id="写json"><a href="#写json" class="headerlink" title="写json"></a>写json</h3><p><code>dump()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">param = <span class="string">&#x27;&#123;&quot;id&quot;:1,&quot;name&quot;:&quot;Tom&quot;,&quot;address&quot;:&quot;北京市&quot;,&quot;school&quot;:null&#125;&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../test_write.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(param, f, ensure_ascii=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h3 id="读json"><a href="#读json" class="headerlink" title="读json"></a>读json</h3><p><code>load()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../test_write.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = json.load(f)</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><h2 id="将登录模块改为json数据驱动"><a href="#将登录模块改为json数据驱动" class="headerlink" title="将登录模块改为json数据驱动"></a>将登录模块改为json数据驱动</h2><p>test_login.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> parameterized <span class="keyword">import</span> parameterized</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> po.v4.page.page_login <span class="keyword">import</span> PageLogin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>():</span><br><span class="line">    <span class="comment"># return [(&#x27;abc&#x27;, &#x27;123456&#x27;, &#x27;账号不存在&#x27;), (&#x27;ab&#x27;, &#x27;123123&#x27;, &#x27;密码错误&#x27;)]</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../data/test_data.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = json.load(f)</span><br><span class="line">        test_list=[]</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> data:</span><br><span class="line">            test_tuple= (data.get(<span class="string">&quot;username&quot;</span>),data.get(<span class="string">&quot;pwd&quot;</span>),data.get(<span class="string">&quot;expect&quot;</span>))</span><br><span class="line">            test_list.append(test_tuple)</span><br><span class="line">    <span class="keyword">return</span> test_list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建测试类并继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestLogin</span>(unittest.TestCase):</span><br><span class="line">    login = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># setUP</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUpClass</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="comment"># 实例化获取页面对象PageLogin</span></span><br><span class="line">        cls.login = PageLogin()</span><br><span class="line">        <span class="comment"># 点击登录</span></span><br><span class="line">        cls.login.page_click_login_link()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># tearDown</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDownClass</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="comment"># 关闭驱动对象</span></span><br><span class="line">        cls.login.driver.quit()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @parameterized.expand(<span class="params">get_data(<span class="params"></span>)</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_login</span>(<span class="params">self, username, pwd, expect</span>):</span><br><span class="line">        <span class="comment"># 调用登录方法</span></span><br><span class="line">        self.login.page_login(username, pwd)</span><br><span class="line">        <span class="comment"># 获取登录提示信息</span></span><br><span class="line">        msg = self.login.page_get_text()</span><br><span class="line">        <span class="comment"># 断言</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.assertEqual(msg, expect)</span><br><span class="line">        <span class="keyword">except</span> AssertionError:</span><br><span class="line">            <span class="comment"># 截图</span></span><br><span class="line">            self.login.page_get_screenshot()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>json文件：</p><p>有几组数据就有几个testcase</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;abc&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pwd&quot;</span><span class="punctuation">:</span> <span class="number">123456</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;expect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;账号不存在&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ab&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pwd&quot;</span><span class="punctuation">:</span> <span class="number">1234567</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;expect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;密码错误&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pwd&quot;</span><span class="punctuation">:</span> <span class="number">123456</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;expect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;账号不合法&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ab&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pwd&quot;</span><span class="punctuation">:</span> <span class="number">12345</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;expect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;密码错误&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/image-20240419120845726.png"></p><p>注意：操作时间过快会导致截图被覆盖，本来要截四张图变成两张</p><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/image-20240419121218132.png"></p><h2 id="网页计算器案例"><a href="#网页计算器案例" class="headerlink" title="网页计算器案例"></a>网页计算器案例</h2><p>base: 查找元素、点击、获取value属性、截图</p><p>base&gt;base.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>:</span><br><span class="line">    <span class="comment"># 初始化方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, driver</span>):</span><br><span class="line">        self.driver = driver</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查找元素</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">base_find_element</span>(<span class="params">self, loc, timeout=<span class="number">30</span>, poll=<span class="number">0.5</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param loc: 元素的定位信息，格式为元组</span></span><br><span class="line"><span class="string">        :param timeout: 默认超时时间，可以修改</span></span><br><span class="line"><span class="string">        :param poll: 访问频率莫，默认0.5</span></span><br><span class="line"><span class="string">        :return: 返回查找的元素</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> WebDriverWait(self.driver,</span><br><span class="line">                             timeout=timeout,</span><br><span class="line">                             poll_frequency=poll).until(<span class="keyword">lambda</span> x: x.find_element(*loc))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查找元素并点击</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">base_click</span>(<span class="params">self, loc</span>):</span><br><span class="line">        self.base_find_element(loc).click()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取value</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">base_value_get</span>(<span class="params">self, loc</span>):</span><br><span class="line">        <span class="comment"># get_attribute()获取属性值</span></span><br><span class="line">        <span class="keyword">return</span> self.base_find_element(loc).get_attribute(<span class="string">&quot;value&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">base_get_screenshot</span>(<span class="params">self</span>):</span><br><span class="line">        self.driver.get_screenshot_as_file(<span class="string">&quot;&#123;&#125;.png&quot;</span>.<span class="built_in">format</span>(time.strftime(<span class="string">&quot;%Y_%m_%d_%H_%M_%S&quot;</span>)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>base&gt;get_driver.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> cal_test <span class="keyword">import</span> page</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GetDriver</span>:</span><br><span class="line">    driver=<span class="literal">None</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_driver</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">if</span> cls.driver <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 实例化浏览器</span></span><br><span class="line">            cls.driver=webdriver.Chrome()</span><br><span class="line">            <span class="comment"># 最大化</span></span><br><span class="line">            cls.driver.maximize_window()</span><br><span class="line">            <span class="comment"># 打开浏览器</span></span><br><span class="line">            cls.driver.get(page.url)</span><br><span class="line">        <span class="keyword">return</span> cls.driver</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">quit_driver</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">if</span> cls.driver:</span><br><span class="line">            cls.driver.quit()</span><br><span class="line">            cls.driver=<span class="literal">None</span></span><br></pre></td></tr></table></figure><p>data：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;calc_001&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="attr">&quot;expect&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;calc_002&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="number">33</span><span class="punctuation">,</span><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span><span class="attr">&quot;expect&quot;</span><span class="punctuation">:</span> <span class="number">45</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;calc_003&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="number">1212</span><span class="punctuation">,</span><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span><span class="attr">&quot;expect&quot;</span><span class="punctuation">:</span> <span class="number">1224</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;calc_004&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="number">1211</span><span class="punctuation">,</span><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span><span class="attr">&quot;expect&quot;</span><span class="punctuation">:</span> <span class="number">1222</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;calc_005&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="number">1213</span><span class="punctuation">,</span><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span><span class="attr">&quot;expect&quot;</span><span class="punctuation">:</span> <span class="number">1226</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>page&gt;_<em>init</em>_.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;以下为计算器配置数据&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="comment"># 数字键有一定的规律，先暂时不定位此键</span></span><br><span class="line"><span class="comment"># 服务器域名地址</span></span><br><span class="line">url=<span class="string">&quot;http://cal.apple886.com/&quot;</span></span><br><span class="line"><span class="comment"># 加号</span></span><br><span class="line">calc_add=By.CSS_SELECTOR,<span class="string">&#x27;#simpleAdd&#x27;</span></span><br><span class="line"><span class="comment"># 等号</span></span><br><span class="line">calc_equal=By.CSS_SELECTOR,<span class="string">&#x27;#simpleEqual&#x27;</span></span><br><span class="line"><span class="comment"># 获取结果</span></span><br><span class="line">calc_res=By.CSS_SELECTOR,<span class="string">&#x27;#resultIpt&#x27;</span></span><br><span class="line"><span class="comment"># 清平</span></span><br><span class="line">calc_clear=By.CSS_SELECTOR,<span class="string">&#x27;#simpleClearAllBtn&#x27;</span></span><br></pre></td></tr></table></figure><p>page&gt;page_calc.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> cal_test <span class="keyword">import</span> page</span><br><span class="line"><span class="keyword">from</span> cal_test.base.base <span class="keyword">import</span> Base</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PageCalc</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 点击数字方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">page_click_num</span>(<span class="params">self, num</span>):</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">str</span>(num):</span><br><span class="line">            <span class="comment"># 拆开单个按钮的定位方式</span></span><br><span class="line">            loc = By.CSS_SELECTOR, <span class="string">&#x27;#simple&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(n)</span><br><span class="line">            self.base_click(loc)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 点击加号方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">page_click_add</span>(<span class="params">self</span>):</span><br><span class="line">        self.base_click(page.calc_add)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 点击等号</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">page_click_eq</span>(<span class="params">self</span>):</span><br><span class="line">        self.base_click(page.calc_equal)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取结果</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">page_get_res</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.base_value_get(page.calc_res)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 点击清屏</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">page_clear</span>(<span class="params">self</span>):</span><br><span class="line">        self.base_click(page.calc_clear)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 截屏</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">page_get_screenshot</span>(<span class="params">self</span>):</span><br><span class="line">        self.base_get_screenshot()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 组装</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">page_add_calc</span>(<span class="params">self, a, b</span>):</span><br><span class="line">        self.page_click_num(a)</span><br><span class="line">        self.page_click_add()</span><br><span class="line">        self.page_click_num(b)</span><br><span class="line">        self.page_click_eq()</span><br></pre></td></tr></table></figure><p>scripts：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> parameterized <span class="keyword">import</span> parameterized</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> cal_test.base.get_driver <span class="keyword">import</span> GetDriver</span><br><span class="line"><span class="keyword">from</span> cal_test.page.page_calc <span class="keyword">import</span> PageCalc</span><br><span class="line"><span class="keyword">from</span> cal_test.tools.read_json <span class="keyword">import</span> read_json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>():</span><br><span class="line">    datas = read_json(<span class="string">&quot;calc.json&quot;</span>)</span><br><span class="line">    arrs = []</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> datas.values():</span><br><span class="line">        arrs.append((data.get(<span class="string">&quot;a&quot;</span>), data.get(<span class="string">&quot;b&quot;</span>), data.get(<span class="string">&quot;expect&quot;</span>)))</span><br><span class="line">    <span class="keyword">return</span> arrs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestCalc</span>(unittest.TestCase):</span><br><span class="line">    driver = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># setup</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUpClass</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="comment"># 初始化计算页面对象</span></span><br><span class="line">        cls.driver = GetDriver().get_driver()</span><br><span class="line">        cls.calc = PageCalc(cls.driver)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># teardown()</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDownClass</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="comment"># 关闭driver</span></span><br><span class="line">        GetDriver().quit_driver()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试方法</span></span><br><span class="line"><span class="meta">    @parameterized.expand(<span class="params">get_data(<span class="params"></span>)</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_add_calc</span>(<span class="params">self, a, b, expect</span>):</span><br><span class="line">        <span class="comment"># 调用计算业务方法</span></span><br><span class="line">        self.calc.page_add_calc(a, b)</span><br><span class="line">        <span class="comment"># 断言</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 截图</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.assertEqual(self.calc.page_get_res(), <span class="built_in">str</span>(expect))</span><br><span class="line">        <span class="keyword">except</span> AssertionError:</span><br><span class="line">            self.calc.base_get_screenshot()</span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>tools&gt;read_json.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用load方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_json</span>(<span class="params">filename</span>):</span><br><span class="line">    filepath=<span class="string">&quot;../data/&quot;</span>+filename</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filepath, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> json.load(f)</span><br></pre></td></tr></table></figure><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><p>可以查看错误提示信息。日志记录系统运行时的信息</p><p>作用：</p><ul><li>调试程序</li><li>了解系统程序运行的情况是否正常</li><li>系统程序运行故障分析与问题定位</li><li>用来做用户行为分析和数据统计</li></ul><h2 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h2><p>即日志信息的优先级、重要性或严重程度</p><table><thead><tr><th>日志级别</th><th>描述</th></tr></thead><tbody><tr><td>DEBUG</td><td>调试级别，打印非常详细的日志信息，通常用于对代码的的调试</td></tr><tr><td>INFO</td><td>信息级别，打印一般的日志信息，突出强调程序的运行过程</td></tr><tr><td>WARNING</td><td>警告级别，打印警告日志信息，潜在错误的情形</td></tr><tr><td>ERROR</td><td>错误级别，打印错误异常信息，该级别的错误可能导致系统的一些功能无法正常执行</td></tr><tr><td>CRITICAL</td><td>严重错误级别，一个严重错误，系统可能无法继续运行</td></tr></tbody></table><p>为程序指定一个日志级别后，程序会记录所有日志级别大于或等于指定级别的信息。一般建议只使用DEBUG、INFO、WARNING、ERROR</p><h2 id="logging模块"><a href="#logging模块" class="headerlink" title="logging模块"></a>logging模块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="comment"># 调用指定级别，输入日志信息</span></span><br><span class="line">logging.debug(<span class="string">&quot;this is a debug !&quot;</span>)</span><br><span class="line">logging.info(<span class="string">&quot;this is a info&quot;</span>)</span><br><span class="line">logging.warning(<span class="string">&quot;this is a warning&quot;</span>)</span><br><span class="line">logging.error(<span class="string">&quot;this is a error&quot;</span>)</span><br><span class="line">logging.critical(<span class="string">&quot;this is a critical&quot;</span>)</span><br></pre></td></tr></table></figure><p>默认设置信息级别是warning</p><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/image-20240419143730527.png"></p><p>设置日志级别：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置级别</span></span><br><span class="line">logging.basicConfig(level=logging.DEBUG)  <span class="comment"># DEBUG是给常量，debug是方法</span></span><br><span class="line"><span class="comment"># 调用指定级别，输入日志信息</span></span><br><span class="line">logging.debug(<span class="string">&quot;this is a debug !&quot;</span>)</span><br><span class="line">logging.info(<span class="string">&quot;this is a info&quot;</span>)</span><br><span class="line">logging.warning(<span class="string">&quot;this is a warning&quot;</span>)</span><br><span class="line">logging.error(<span class="string">&quot;this is a error&quot;</span>)</span><br><span class="line">logging.critical(<span class="string">&quot;this is a critical&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/image-20240419143939192.png"></p><h2 id="设置日志格式"><a href="#设置日志格式" class="headerlink" title="设置日志格式"></a>设置日志格式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="comment"># 设置格式</span></span><br><span class="line">fmt=<span class="string">&quot;%(asctime)s %(levelname)s [%(name)s] [%(filename)s%(funcName)s:%(lineno)d] - %(message)s&quot;</span></span><br><span class="line"><span class="comment"># 设置级别、格式</span></span><br><span class="line">logging.basicConfig(level=logging.DEBUG,<span class="built_in">format</span>=fmt)  <span class="comment"># DEBUG是给常量，debug是方法</span></span><br><span class="line"><span class="comment"># 调用指定级别，输入日志信息</span></span><br><span class="line">logging.debug(<span class="string">&quot;this is a debug !&quot;</span>)</span><br><span class="line">logging.info(<span class="string">&quot;this is a info&quot;</span>)</span><br><span class="line">logging.warning(<span class="string">&quot;this is a warning&quot;</span>)</span><br><span class="line">logging.error(<span class="string">&quot;this is a error&quot;</span>)</span><br><span class="line">logging.critical(<span class="string">&quot;this is a critical&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/image-20240419145251131.png"></p><h3 id="保存到文件"><a href="#保存到文件" class="headerlink" title="保存到文件"></a>保存到文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置级别、格式、保存到指定文件</span></span><br><span class="line">logging.basicConfig(level=logging.DEBUG,<span class="built_in">format</span>=fmt,filename=<span class="string">&#x27;..\log\log01.log&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/12/Web%E8%87%AA%E5%8A%A8%E5%8C%96/image-20240419145510055.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;自动化测试解决的问题：回归测试、压力测试、兼容性测试。&lt;/p&gt;
&lt;p&gt;自动化测试的误区：自动化测试可以完全代替手工测试，自动化测试一定比手工测试更厉害，自动化测试可以捕获更多的bug，自动化测试适用于所有功能&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;什么样的web项目适合做</summary>
      
    
    
    
    
    <category term="test" scheme="http://example.com/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Python</title>
    <link href="http://example.com/2024/03/11/Python/"/>
    <id>http://example.com/2024/03/11/Python/</id>
    <published>2024-03-11T14:26:16.000Z</published>
    <updated>2024-04-19T05:20:47.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python介绍"><a href="#Python介绍" class="headerlink" title="Python介绍"></a>Python介绍</h1><blockquote><p>python常用于回归测试。</p><p>python+selenium web自动化（功能测试转换为代码）</p><p>python+appium 移动端（手机端app）自动化</p><p>python+ requests 接口</p></blockquote><p>Python 是一个高层次的结合了解释性、编译性、互动性和面向对象的脚本语言。python是轻量级语言。</p><p>Python 的设计具有很强的可读性，相比其他语言经常使用英文关键字，其他语言的一些标点符号，它具有比其他语言更有特色语法结构。</p><ul><li><strong>Python 是一种解释型语言：</strong> 这意味着开发过程中<strong>没有编译</strong>这个环节。类似于PHP和Perl语言。</li><li><strong>Python 是交互式语言：</strong> 这意味着，您可以在一个 Python 提示符 <strong>&gt;&gt;&gt;</strong> 后直接执行代码。</li><li><strong>Python 是面向对象语言:</strong> 这意味着Python支持面向对象的风格或代码封装在对象的编程技术。</li><li><strong>Python 是初学者的语言：</strong>Python 对初级程序员而言，是一种伟大的语言，它支持广泛的应用程序开发，从简单的文字处理到 WWW 浏览器再到游戏。</li></ul><h1 id="Python基础代码"><a href="#Python基础代码" class="headerlink" title="Python基础代码"></a>Python基础代码</h1><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ul><li><p>第一个字符必须是字母表中字母或下划线**_** ,不能以数字开头。</p><p>驼峰命名法：</p><p>​大驼峰（又称帕斯卡命名法Pascal Case）：通常用于标识符（如变量名、函数名、类名等）的命名。在帕斯卡命名法中，每个单词的首字母都大写，单词之间没有下划线或其他分隔符。：MyName</p><p>​小驼峰（Camel Case）：通常用于命名变量、函数、方法等标识符。在小驼峰命名法中，除了第一个单词的首字母小写外，后续单词的首字母都大写，单词之间没有下划线或其他分隔符。，其他大写：myName</p><p>​下划线连接法（Snake Case）：每个单词之间用下划线连接my_name</p></li><li><p>变量一般使用下划线法</p></li><li><p>标识符的其他的部分由字母、数字和下划线组成。</p></li><li><p>标识符对大小写敏感。</p></li></ul><p>在 Python 3 中，可以用中文作为变量名，非 ASCII 标识符也是允许的了。</p><h2 id="python保留字"><a href="#python保留字" class="headerlink" title="python保留字"></a>python保留字</h2><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;[<span class="string">&#x27;False&#x27;</span>, <span class="string">&#x27;None&#x27;</span>, <span class="string">&#x27;True&#x27;</span>, <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;as&#x27;</span>, <span class="string">&#x27;assert&#x27;</span>, <span class="string">&#x27;break&#x27;</span>, <span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;continue&#x27;</span>, <span class="string">&#x27;def&#x27;</span>, <span class="string">&#x27;del&#x27;</span>,</span><br><span class="line">&gt;<span class="string">&#x27;elif&#x27;</span>, <span class="string">&#x27;else&#x27;</span>, <span class="string">&#x27;except&#x27;</span>, <span class="string">&#x27;finally&#x27;</span>, <span class="string">&#x27;for&#x27;</span>, <span class="string">&#x27;from&#x27;</span>, <span class="string">&#x27;global&#x27;</span>, <span class="string">&#x27;if&#x27;</span>, <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;in&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, </span><br><span class="line">&gt;<span class="string">&#x27;lambda&#x27;</span>, <span class="string">&#x27;nonlocal&#x27;</span>, <span class="string">&#x27;not&#x27;</span>, <span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;pass&#x27;</span>, <span class="string">&#x27;raise&#x27;</span>, <span class="string">&#x27;return&#x27;</span>, <span class="string">&#x27;try&#x27;</span>, <span class="string">&#x27;while&#x27;</span>, <span class="string">&#x27;with&#x27;</span>,</span><br><span class="line">&gt;<span class="string">&#x27;yield&#x27;</span>]</span><br></pre></td></tr></table></figure></blockquote><h2 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h2><p>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠 *<em>*</em> 来实现多行语句，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">total = item_one + \</span><br><span class="line">        item_two + \</span><br><span class="line">        item_three</span><br></pre></td></tr></table></figure><p>在 [], {}, 或 () 中的多行语句，不需要使用反斜杠 ****，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">total = [<span class="string">&#x27;item_one&#x27;</span>, <span class="string">&#x27;item_two&#x27;</span>, <span class="string">&#x27;item_three&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;item_four&#x27;</span>, <span class="string">&#x27;item_five&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h2><ul><li><strong>int</strong> (整数), 如 1, 只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</li><li><strong>bool</strong> (布尔), 如 True。</li><li><strong>float</strong> (浮点数), 如 1.23、3E-2</li><li><strong>complex</strong> (复数), 如 1 + 2j、 1.1 + 2.2j</li></ul><h2 id="输出print"><a href="#输出print" class="headerlink" title="输出print()"></a>输出print()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># print 默认输出是换行的，如果要实现不换行需要在变量末尾加上 end=&quot;&quot;</span></span><br><span class="line">x = <span class="string">&quot;a&quot;</span></span><br><span class="line">y = <span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="comment"># 换行输出</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---------&#x27;</span>)</span><br><span class="line"><span class="comment"># 不换行输出</span></span><br><span class="line"><span class="built_in">print</span>(x, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(y, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/print.png"></p><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%s&quot;</span>,%<span class="built_in">str</span>) <span class="comment">#格式化输出字符串,%s可以填充任意类型的数据</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%d&quot;</span>,%a) <span class="comment">#有符号的的十进制数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%06d&quot;</span>,%b) <span class="comment">#表示输出的整数显示位数，不足位以0补全，超出位数则原样输出</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%f&quot;</span>,%c) <span class="comment">#浮点数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;.2f&quot;</span>,%d) <span class="comment">#保留2位小数输出（四舍五入），小数默认显示6位</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%%&quot;</span>) <span class="comment">#输出%</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;ana&#x27;</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line">height = <span class="number">1.752</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;her name is %s,her age is %d,her height is %.2fm&quot;</span> % (name, age, height))</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/formatoutput.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">90</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;percentage %d%%&#x27;</span> % num)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/formatoutput2.png"></p><h3 id="F-string（f字符串的格式化方法）"><a href="#F-string（f字符串的格式化方法）" class="headerlink" title="F-string（f字符串的格式化方法）"></a>F-string（f字符串的格式化方法）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 需要在字符串前面加上f&quot;&quot;或者F&quot;&quot;</span><br><span class="line">2. 占位符号统一变为&#123;variable name&#125;</span><br><span class="line">3. 需要填充的变量写在&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">stu_num = <span class="number">1</span></span><br><span class="line">num = <span class="number">90</span></span><br><span class="line">name = <span class="string">&#x27;ana&#x27;</span></span><br><span class="line">age = <span class="number">19</span></span><br><span class="line">height = <span class="number">1.821</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;her name is <span class="subst">&#123;name&#125;</span>,age is <span class="subst">&#123;age&#125;</span>,height is <span class="subst">&#123;height:<span class="number">.2</span>f&#125;</span>m,student number is <span class="subst">&#123;stu_num:06d&#125;</span>,percentage is <span class="subst">&#123;num&#125;</span>%&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/fstring.png"></p><h2 id="输入input"><a href="#输入input" class="headerlink" title="输入input"></a>输入input</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">input</span>(<span class="string">&#x27;输入你心中想的内容：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;你输入的是&quot;</span> + a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/input.png"></p><p>输入的内容类型是字符串类型</p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">input</span>(<span class="string">&#x27;输入你的年龄：&#x27;</span>)</span><br><span class="line">b = <span class="built_in">int</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;你的年龄是&quot;</span>, b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;一年后你的年龄是&quot;</span>, <span class="built_in">int</span>(a) + <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/typeconvert.png"></p><ul><li><p><code>int()</code>可以将其他类型转换成int类型</p><p>​可以将float类型转换成整型</p><p>​可以将整数类型字符串转换为整型</p><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/image-20240402225258518.png"></p></li><li><p><code>float()</code>可以将其他类型转换成float类型</p><ul><li>可以将int类型转换成浮点型</li><li>可以将数字类型字符串（整数、小数）转换为浮点型</li></ul></li><li><p><code>str()</code>可以将其他类型转换成字符串类型</p><ul><li>任何类型都可以使用str()将其转换成字符串，一般都是直接加引号</li></ul></li></ul><h2 id="import与from…import"><a href="#import与from…import" class="headerlink" title="import与from…import"></a>import与from…import</h2><p>在 python 用 <code>import</code>或者 <code>from...import</code>来导入相应的模块。</p><ul><li>将整个模块(somemodule)导入，格式为：<code>import somemodule</code></li><li>从某个模块中导入某个函数,格式为： <code>from somemodule import somefunction</code></li><li>从某个模块中导入多个函数,格式为： <code>from somemodule import firstfunc, secondfunc, thirdfunc</code></li><li>将某个模块中的全部函数导入，格式为： <code>from somemodule import *</code></li><li><code>import somemodule as alias</code>导入模块指定别名alias</li></ul><h2 id="python中的三种波浪线和pep"><a href="#python中的三种波浪线和pep" class="headerlink" title="python中的三种波浪线和pep"></a>python中的三种波浪线和pep</h2><ul><li><p>红色：表示代码的错误，代码没有写完也会出现</p></li><li><p>灰色：不会影响代码的正常执行，pep8为代码的书写规范。可以在写完后使用ctrl+alt+L格式化</p><ul><li><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/pep8.png"></li></ul></li><li><p>绿色：在引号中，认为书写的内容不是英文单词时会出现</p></li></ul><h1 id="Python基本数据类型"><a href="#Python基本数据类型" class="headerlink" title="Python基本数据类型"></a>Python基本数据类型</h1><p>Python 中的变量不需要声明。每个变量在使用前都必须赋值，如果事先不知道赋什么数值，可以先赋值None，<code>variable = None</code>进行初始化。变量赋值以后该变量才会被创建。</p><p>在 Python 中，变量就是变量，它没有类型，我们所说的”类型”是变量所指的内存中对象的类型。变量名在赋值时，实际上是将对象的引用（即内存地址）赋值给变量名。因此，变量名实际上是对象的引用，而不是直接对内存地址的引用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line">a = <span class="number">12</span>  <span class="comment"># 变量a指向12的引用（12的内存地址）</span></span><br><span class="line">b = a  <span class="comment"># 变量b指向变量a指向的引用，12</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;12的内存地址:&#x27;</span>, <span class="built_in">id</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;通过内存地址140714148648072访问值:&#x27;</span>, ctypes.cast(<span class="number">140714148648072</span>, ctypes.py_object).value)  <span class="comment"># 12的内存地址</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;12的内存地址:&#x27;</span>, <span class="built_in">id</span>(b))</span><br><span class="line">a = <span class="number">30</span>  <span class="comment"># 变量a指向新的引用，30</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a现在指向30的内存空间，通过a访问&#x27;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;30的内存地址:&#x27;</span>, <span class="built_in">id</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;b仍然指向之前的引用&#x27;</span>, b)  <span class="comment"># b仍然指向之前的引用，12</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;b指向的内存地址&#x27;</span>, <span class="built_in">id</span>(b))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/image-20240403125142039.png"></p><p>Python允许你同时为多个变量赋值，连续赋值从右往左，分别赋值按位置进行赋值。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = b = c =<span class="number">1</span></span><br><span class="line"><span class="comment"># 等同于：</span></span><br><span class="line">c = <span class="number">1</span></span><br><span class="line">b = c</span><br><span class="line">a = b</span><br><span class="line">a,b,c=<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="comment"># 等同于：</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">c = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="标准数据类型"><a href="#标准数据类型" class="headerlink" title="标准数据类型"></a>标准数据类型</h2><p>Python3 中常见的数据类型有：</p><ul><li><p>Number（数字）</p><ul><li><strong>整数（int）：</strong> 表示整数值，例如 <code>42</code> 或 <code>-10</code>。</li><li><strong>浮点数（float）：</strong> 表示带有小数点的数值，例如 <code>3.14</code> 或 <code>-0.001</code>。</li></ul></li><li><p>String（字符串）：表示文本数据，用单引号 <code>&#39; &#39;</code> 或双引号 <code>&quot; &quot;</code> 括起来，例如 <code>&#39;hello&#39;</code> 或 <code>&quot;world&quot;</code>。</p></li><li><p>bool（布尔类型）：表示逻辑值，只有两个值：<code>True</code> 和 <code>False</code>。</p></li><li><p>List（列表）：表示有序的可变集合，可以包含任意类型的元素，例如 <code>[1, 2, &#39;hello&#39;]</code>。</p></li><li><p>Tuple（元组）： 表示有序的不可变集合，可以包含任意类型的元素，例如 <code>(1, 2, &#39;hello&#39;)</code>。</p></li><li><p>Set（集合）：表示无序的不重复元素的集合，例如 <code>&#123;1, 2, 3&#125;</code>。</p></li><li><p>Dictionary（字典）：表示键值对的集合，其中每个键都对应一个值，例如 <code>&#123;&#39;name&#39;: &#39;Alice&#39;, &#39;age&#39;: 30&#125;</code>。</p></li><li><p>NoneType（空值）： 表示空值或者缺失值，用 <code>None</code> 表示。</p></li><li><p>bytes（字节串）： 表示二进制数据，例如 <code>b&#39;hello&#39;</code>。</p><p>- </p><ul><li><pre><code class="python">import syss = &quot;hello&quot;b = b&#39;hello&#39;print(sys.getsizeof(s))  # 获取字符串对象 s 占用的内存空间大小print(sys.getsizeof(b))  # 获取字符串对象 b 占用的内存空间大小<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    ![](image-20240403135732256.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Python3 的六个标准数据类型中：</span><br><span class="line"></span><br><span class="line">- **不可变类型（3 个）：**可变类型在创建后其内容无法被修改，每次对不可变类型进行操作时，都会创建一个新的对象</span><br><span class="line"></span><br><span class="line">  Number（数字）、String（字符串）、Tuple（元组）；</span><br><span class="line"></span><br><span class="line">- **可变类型（3 个）：**在 Python 中，可变类型是指可以在创建后修改其内容的数据类型。可变类型的数据结构在内存中的内容可以改变，而不会改变其在内存中的地址。这意味着，对可变类型对象进行操作时，不会创建新的对象，而是直接修改原始对象。</span><br><span class="line"></span><br><span class="line">  List（列表）、Dictionary（字典）、Set（集合）。</span><br><span class="line"></span><br><span class="line">- </span><br><span class="line"></span><br><span class="line">- ```python</span><br><span class="line">  list1 = [1, 2, 3]</span><br><span class="line">  print(&#x27;list1的内存地址：&#x27;, id(list1))</span><br><span class="line">  print(&#x27;list1[0]:1的内存地址：&#x27;, id(list1[0]))</span><br><span class="line">  print(&#x27;list1[1]:2的内存地址：&#x27;, id(list1[1]))</span><br><span class="line">  print(&#x27;list1[2]:3的内存地址：&#x27;, id(list1[2]))</span><br><span class="line">  list1.append(5)</span><br><span class="line">  print(&#x27;list1的内存地址：&#x27;, id(list1))</span><br><span class="line">  list1 = [1, 3, 4]  # 指向了一个新的列表对象，原来的列表对象因为没有变量指向它，会被回收</span><br><span class="line">  print(&#x27;list1的内存地址：&#x27;, id(list1))</span><br><span class="line">  print(&#x27;list1[0]:1的内存地址：&#x27;, id(list1[0]))</span><br><span class="line">  print(&#x27;list1[1]:3的内存地址：&#x27;, id(list1[1]))</span><br><span class="line">  print(&#x27;list1[2]:4的内存地址：&#x27;, id(list1[2]))</span><br><span class="line">  x = 42</span><br><span class="line">  print(&#x27;x的内存地址&#x27;, id(x))</span><br><span class="line">  print(&#x27;x+1的内存地址&#x27;, id(x + 1))</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/image-20240403141535677.png"></p><h3 id="number数字"><a href="#number数字" class="headerlink" title="number数字"></a>number数字</h3><p>Python3 支持 <strong>int、float、bool、complex（复数）</strong>。</p><p><strong>注意：</strong></p><ul><li>数值的除法包含两个运算符：**&#x2F;** 返回一个浮点数，**&#x2F;&#x2F;** 返回一个整数。<ul><li><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/image-20240403152710882.png"></li></ul></li><li>在混合计算时，Python会把整型转换成为浮点数。<ul><li><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/image-20240403152810033.png"></li></ul></li></ul><h3 id="查看类型"><a href="#查看类型" class="headerlink" title="查看类型"></a>查看类型</h3><h4 id="type"><a href="#type" class="headerlink" title="type()"></a>type()</h4><ul><li><code>type(obj)</code> 函数返回对象 <code>obj</code> 的类型对象。</li><li>例如，<code>type(5)</code> 返回 <code>&lt;class &#39;int&#39;&gt;</code>，表示整数对象的类型是 <code>int</code> 类型。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a,b,c,d=<span class="number">2</span>,<span class="number">3.14</span>,<span class="literal">True</span>,<span class="number">3</span>+<span class="number">4j</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a),<span class="built_in">type</span>(b),<span class="built_in">type</span>(c),<span class="built_in">type</span>(d))</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/type.png"></p><h4 id="isinstance"><a href="#isinstance" class="headerlink" title="isinstance()"></a>isinstance()</h4><ul><li><code>isinstance(obj, classinfo)</code> 函数用于检查对象 <code>obj</code> 是否是指定类型 <code>classinfo</code> 的实例，或者是其子类的实例。</li><li><code>classinfo</code> 参数可以是类型对象、类型元组或类型列表。如果 <code>obj</code> 是 <code>classinfo</code> 类型的实例或其子类的实例，则返回 <code>True</code>；否则返回 <code>False</code>。</li><li>例如，<code>isinstance(5, int)</code> 返回 <code>True</code>，表示整数对象 <code>5</code> 是 <code>int</code> 类型的实例。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(a,<span class="built_in">int</span>))</span><br></pre></td></tr></table></figure><h4 id="一定要注意二者的区别和使用方法"><a href="#一定要注意二者的区别和使用方法" class="headerlink" title="一定要注意二者的区别和使用方法"></a>一定要注意二者的区别和使用方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">b = B()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(b, A))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(b, B))</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/image-20240403142907350.png"></p><h3 id="String字符串"><a href="#String字符串" class="headerlink" title="String字符串"></a>String字符串</h3><ul><li><p>Python 中单引号 <strong>‘</strong> 和双引号 <strong>“</strong> 使用完全相同。</p><ul><li>使用三引号**’’’** 或 **”””**可以指定一个多行字符串。</li></ul></li><li><p>转义符\。</p><ul><li>反斜杠可以用来转义，使用 <strong>r</strong> 可以让反斜杠不发生转义。 如 <strong>r”this is a line with \n”</strong> 则 <strong>\n</strong> 会显示，并不是换行。</li><li>按字面意义级联字符串，如 <strong>“this “ “is “ “string”</strong> 会被自动转换为 <strong>this is string</strong>。</li><li>字符串可以用 <strong>+</strong> 运算符连接在一起，用 ***** 运算符重复。</li><li></li><li><pre><code class="python">print(&#39;123\n123&#39;)print(r&#39;123\n123&#39;)print(&#39;this&#39;&#39;is&#39;&#39;a&#39;&#39;string&#39;)print(&#39;a&#39; + &#39;bc&#39;)print(&#39;a&#39; * 5)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - ![](image-20240403153219978.png)</span><br><span class="line"></span><br><span class="line">- Python 中的字符串有两种索引方式，从左往右以 **0** 开始，从右往左以 **-1** 开始。</span><br><span class="line"></span><br><span class="line">- Python 中的字符串不能改变。</span><br><span class="line"></span><br><span class="line">- Python 没有单独的字符类型，一个字符就是长度为 1 的字符串。</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">word = &#x27;字符串&#x27;</span><br><span class="line">sentence = &quot;这是一个句子。&quot;</span><br><span class="line">paragraph = &quot;&quot;&quot;这是一个段落，</span><br><span class="line">可以由多行组成&quot;&quot;&quot;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h4 id="字符串的截取"><a href="#字符串的截取" class="headerlink" title="字符串的截取"></a>字符串的截取</h4><p>字符串的截取的语法格式如下：</p><p><code>变量[头下标:尾下标]</code></p><p>索引值以 0 为开始值，-1 为从末尾的开始位置。</p><p>尾下标对应的字符不包含</p><p><img src="keep/source/images/star.gif" data-original="D:\blog\source_posts\Python\string.png" alt="image-20240304160659942"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;abcdefghijk&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;输出字符串第一个字符：&quot;</span> + <span class="built_in">str</span>[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;输出字符串最后一个字符：&quot;</span> + <span class="built_in">str</span>[-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;输出字符串第一个到第3个字符：&quot;</span> + <span class="built_in">str</span>[<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;输出字符串第一个到倒数第二个个字符：&quot;</span> + <span class="built_in">str</span>[<span class="number">0</span>:-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;输出字符串第一个到第3个字符：&quot;</span> + <span class="built_in">str</span>[:<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;从字符串倒数第三个字符开始输出：&quot;</span> + <span class="built_in">str</span>[-<span class="number">3</span>:])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字符串的每个字符间隔1个输出（步长为2）：&quot;</span> + <span class="built_in">str</span>[::<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字符串输出2次：&quot;</span> + <span class="built_in">str</span> * <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字符串拼接输出：&quot;</span> + <span class="string">&#x27;你好&#x27;</span> + <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;反转字符串：&quot;</span> + <span class="built_in">str</span>[::-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello\npython&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">r&#x27;hello\npython&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/stringoutput.png"></p><h4 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h4><h5 id="len"><a href="#len" class="headerlink" title="len()"></a>len()</h5><p>len()可以用来获取字符串长度</p><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/len.png"></p><h5 id="查找方法find"><a href="#查找方法find" class="headerlink" title="查找方法find()"></a>查找方法find()</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">字符串.find(sub_str,start,end)</span><br><span class="line"><span class="comment"># 在字符串中查找是否存在sub_str这样的字符串</span></span><br><span class="line"><span class="comment"># start默认为0</span></span><br><span class="line"><span class="comment"># end默认是len()</span></span><br><span class="line">返回结果：</span><br><span class="line"><span class="number">1.</span> 找到了，返回第一次出现的下标（sub_str第一个字符在字符串中的下标）</span><br><span class="line"><span class="number">2.</span> 没有找到，返回-<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;abcdefghijk&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.find(<span class="string">&#x27;abc&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/strfind.png"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;ana and luke and lei&#x27;</span></span><br><span class="line">num = <span class="built_in">str</span>.find(<span class="string">&#x27;and&#x27;</span>)</span><br><span class="line"><span class="comment"># 查找第2个and出现的位置</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.find(<span class="string">&#x27;and&#x27;</span>, num + <span class="number">1</span>))</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/strfind2.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 过7游戏</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">7</span> == <span class="number">0</span> <span class="keyword">or</span> <span class="built_in">str</span>(i).find(<span class="string">&#x27;7&#x27;</span>) != -<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;过&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/sevenpass.png"></p><h5 id="字符串替换replace"><a href="#字符串替换replace" class="headerlink" title="字符串替换replace()"></a>字符串替换replace()</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">字符串.replace(old_str,new_str,count)</span><br><span class="line"><span class="comment"># 将old_str替换成new_str</span></span><br><span class="line"><span class="comment"># count：替换的次数，默认全部替换</span></span><br><span class="line"><span class="comment"># 返回替换之后的完整字符串，原来的字符串没有发生改变</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将str1中所有的g改为G</span></span><br><span class="line">str1 = <span class="string">&#x27;good good study&#x27;</span></span><br><span class="line">str2 = str1.replace(<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;G&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str1=&quot;</span>, str1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str2=&quot;</span>, str2)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/replace.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将str1中第一个good改成GOOD</span></span><br><span class="line">str1 = <span class="string">&#x27;good good study&#x27;</span></span><br><span class="line">str2 = str1.replace(<span class="string">&#x27;good&#x27;</span>, <span class="string">&#x27;GOOD&#x27;</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str1=&quot;</span>, str1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str2=&quot;</span>, str2)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/replace2.png"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将str1中第二个good改成GOOD</span></span><br><span class="line">str1 = <span class="string">&#x27;good good study&#x27;</span></span><br><span class="line">str2 = str1.replace(<span class="string">&#x27;good&#x27;</span>, <span class="string">&#x27;GOOD&#x27;</span>, )</span><br><span class="line">str3 = str2.replace(<span class="string">&#x27;GOOD&#x27;</span>, <span class="string">&#x27;good&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str2=&quot;</span>, str2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str3=&quot;</span>, str3)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/replace3.png"></p><h5 id="字符串的拆分spilt"><a href="#字符串的拆分spilt" class="headerlink" title="字符串的拆分spilt()"></a>字符串的拆分spilt()</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">字符串.split.(sep,maxsplit)</span><br><span class="line"><span class="comment"># 将字符串按照sep进行拆分，默认为空白字符（空格，换行\n，tab键\t）</span></span><br><span class="line"><span class="comment"># max_spilt:分隔次数，默认全部分隔</span></span><br><span class="line"><span class="comment"># 返回：将一个字符串拆分成多个存在列表中</span></span><br><span class="line"><span class="comment"># 注意：sep不写，想要指定分割次数，写法如：字符串.spilt(maxspilt=n)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;Hello,my name is Elora&quot;</span></span><br><span class="line">list1 = <span class="built_in">str</span>.split()</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.split(maxsplit=<span class="number">1</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/split.png"></p><h5 id="字符串的连接join"><a href="#字符串的连接join" class="headerlink" title="字符串的连接join()"></a>字符串的连接join()</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">字符串<span class="number">1.j</span>oin(列表) <span class="comment"># 括号中的内容主要是列表，可以是其他容器</span></span><br><span class="line"><span class="comment"># 将字符串插入到列表中每相邻的两个数据之间，组成一个新的字符串</span></span><br><span class="line"><span class="comment"># 注意：列表中的数据必须都是字符串类型，否则会报错</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, <span class="string">&#x27;you&#x27;</span>]</span><br><span class="line">str1 = <span class="string">&#x27; &#x27;</span>.join(list1)</span><br><span class="line"><span class="built_in">print</span>(str1)</span><br><span class="line">str2 = <span class="string">&#x27; and &#x27;</span>.join(list1)</span><br><span class="line"><span class="built_in">print</span>(str2)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/join.png"></p><h3 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">字符串.format()</span><br><span class="line">1. 在需要使用变量的地方使用&#123;&#125;占位</span><br><span class="line">2. &#x27;&#123;&#125;,&#123;&#125;...&#x27;.format(变量,变量)...</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">stu_num = <span class="number">1</span></span><br><span class="line">num = <span class="number">90</span></span><br><span class="line">name = <span class="string">&#x27;ana&#x27;</span></span><br><span class="line">age = <span class="number">19</span></span><br><span class="line">height = <span class="number">1.821</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;her name is &#123;&#125;,age is &#123;&#125;,height is &#123;:.2f&#125;m,student number is &#123;:06d&#125;,percentage is &#123;&#125;%&#x27;</span>.<span class="built_in">format</span>(name, age, height, stu_num, num))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/format.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;Alice&#x27;</span></span><br><span class="line">age = <span class="number">30</span></span><br><span class="line"><span class="comment"># 位置参数：</span></span><br><span class="line">message = <span class="string">&#x27;My name is &#123;0&#125; and I am &#123;1&#125; years old.&#x27;</span>.<span class="built_in">format</span>(name, age)</span><br><span class="line"><span class="built_in">print</span>(message)</span><br><span class="line"><span class="comment"># 关键字参数：</span></span><br><span class="line">message = <span class="string">&#x27;My name is &#123;name&#125; and I am &#123;age&#125; years old.&#x27;</span>.<span class="built_in">format</span>(name=<span class="string">&#x27;Alice&#x27;</span>, age=<span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(message)</span><br><span class="line"><span class="comment"># 格式化输出：</span></span><br><span class="line">pi = <span class="number">3.14159</span></span><br><span class="line">formatted_pi = <span class="string">&#x27;The value of pi is &#123;:.2f&#125;&#x27;</span>.<span class="built_in">format</span>(pi)</span><br><span class="line"><span class="built_in">print</span>(formatted_pi)  <span class="comment"># 输出: The value of pi is 3.14</span></span><br><span class="line"><span class="comment"># 索引和命名参数混合使用：</span></span><br><span class="line">message = <span class="string">&#x27;My name is &#123;0&#125; and I am &#123;age&#125; years old.&#x27;</span>.<span class="built_in">format</span>(name, age=<span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/image-20240403155125116.png"></p><h3 id="bool布尔类型"><a href="#bool布尔类型" class="headerlink" title="bool布尔类型"></a>bool布尔类型</h3><p>在 Python 中，True 和 False 都是关键字，表示布尔值。</p><p>布尔类型特点：</p><ul><li>布尔类型只有两个值：True 和 False。</li><li>布尔类型可以和其他数据类型进行比较，比如数字、字符串等。在比较时，Python 会将 True 视为 1，False 视为 0。</li><li>布尔类型可以和逻辑运算符一起使用，包括 and、or 和 not。这些运算符可以用来组合多个布尔表达式，生成一个新的布尔值。</li><li>布尔类型也可以被转换成其他数据类型，比如整数、浮点数和字符串。在转换时，True 会被转换成 1，False 会被转换成 0。</li></ul><p><strong>注意:</strong> 在 Python 中，所有<strong>非零的数字和非空的字符串、列表、元组等数据类型都被视为 True</strong>，只有 <strong>0、空字符串、空列表、空元组</strong>等被视为 False。因此，在进行布尔类型转换时，需要注意数据类型的真假性。</p><h3 id="list列表"><a href="#list列表" class="headerlink" title="list列表"></a>list列表</h3><ul><li>列表可以完成大多数集合类的数据结构实现。列表中<strong>元素的类型可以不相同</strong>，它支持数字，字符串甚至可以包含列表（嵌套）。</li><li>列表是写在方括号 <strong>[]</strong> 之间、用逗号分隔开的元素列表。</li><li>和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。截取的语法格式：<code>变量[头下标:尾下标]</code></li></ul><p>索引值以 <strong>0</strong> 为开始值，**-1** 为从末尾的开始位置。</p><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/list.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = <span class="built_in">list</span>()  <span class="comment"># 定义一个空的列表</span></span><br><span class="line"><span class="comment"># list(容器)将其他容器转换成列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="string">&#x27;hello&#x27;</span>))</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/deflist.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = <span class="built_in">list</span>()  <span class="comment"># 定义一个空的列表</span></span><br><span class="line"><span class="comment"># list(容器)将其他容器转换成列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="string">&#x27; h ello&#x27;</span>))</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/image-20240403155518213.png"></p><h4 id="列表的切片"><a href="#列表的切片" class="headerlink" title="列表的切片"></a>列表的切片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;abcd&#x27;</span>, <span class="number">78910</span>, <span class="number">2.233333</span>, <span class="string">&#x27;hello&#x27;</span>, <span class="number">351</span>]</span><br><span class="line">tinylist1 = [<span class="number">123</span>, <span class="string">&#x27;abcdefg&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="built_in">print</span>(tinylist1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;打印整个列表:&quot;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;打印列表的第一个元素：&quot;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;打印列表第二到第三个元素（包含第三个元素）:&quot;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;打印列表第二到第三个元素（不包含第三个元素）:&quot;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">1</span>:<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;打印列表第二个元素:&quot;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;打印列表第三个元素到末尾:&quot;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">2</span>:])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;打印tiny列表两次&quot;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(tinylist1 * <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;打印两个列表&quot;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(tinylist1 + list1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;打印两个列表合并后第二个到第五个元素&quot;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>((tinylist1 + list1)[<span class="number">1</span>:<span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;逆转list&quot;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(list1[::-<span class="number">1</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/listslice.png"></p><h4 id="列表查询相关操作"><a href="#列表查询相关操作" class="headerlink" title="列表查询相关操作"></a>列表查询相关操作</h4><h5 id="数据下标index"><a href="#数据下标index" class="headerlink" title="数据下标index()"></a>数据下标index()</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">列表.index(el,start,end)</span><br><span class="line"><span class="comment"># 使用和find方法一样</span></span><br><span class="line"><span class="comment"># 区别：index()方法，找到返回第一次出现的下标，没有找到直接报错,find()则是返回-1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mylist = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">num = mylist.index(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;出现3的下标是：&quot;</span>, num)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;出现4的下标是：&quot;</span>, mylist.index(<span class="number">4</span>))</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/index.png"></p><h5 id="判断是否存在in"><a href="#判断是否存在in" class="headerlink" title="判断是否存在in()"></a>判断是否存在in()</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">el <span class="keyword">in</span> 容器</span><br><span class="line"><span class="comment"># 存在返回True，不存在返回False</span></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/image-20240403160519348.png"></p><h5 id="统计出现次数count"><a href="#统计出现次数count" class="headerlink" title="统计出现次数count()"></a>统计出现次数count()</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">列表.count(el)</span><br><span class="line"><span class="comment"># 返回元素出现的次数，没有返回数字0</span></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/image-20240403160251408.png"></p><h4 id="列表修改数据"><a href="#列表修改数据" class="headerlink" title="列表修改数据"></a>列表修改数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接更改list元素值</span></span><br><span class="line">list1 = [<span class="string">&#x27;abcd&#x27;</span>, <span class="number">78910</span>, <span class="number">2.233333</span>, <span class="string">&#x27;hello&#x27;</span>, <span class="number">351</span>]</span><br><span class="line">list1 = [<span class="number">12321</span>]  <span class="comment"># list1=[12321]</span></span><br><span class="line">list1[<span class="number">1</span>:<span class="number">3</span>] = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line">list1[<span class="number">3</span>:<span class="number">4</span>] = [<span class="number">444</span>]</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/listedit.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;abcd&#x27;</span>, <span class="number">78910</span>, <span class="number">2.233333</span>, <span class="string">&#x27;hello&#x27;</span>, <span class="number">351</span>]</span><br><span class="line">list1[<span class="number">0</span>] = <span class="number">12321</span></span><br><span class="line">list1[<span class="number">1</span>:<span class="number">3</span>] = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line">list1[<span class="number">3</span>:<span class="number">4</span>] = [<span class="number">444</span>]</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/listsliceedit.png"></p><h4 id="列表添加数据"><a href="#列表添加数据" class="headerlink" title="列表添加数据"></a>列表添加数据</h4><h5 id="尾部添加（最常用）"><a href="#尾部添加（最常用）" class="headerlink" title="尾部添加（最常用）"></a>尾部添加（最常用）</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">列表.append(数据)</span><br><span class="line"><span class="comment"># 返回：返回的None（关键字，空），一般就不再使用变量保存返回内容</span></span><br><span class="line"><span class="comment"># 查看打印列表，表示返回值</span></span><br></pre></td></tr></table></figure><h5 id="指定下标位置添加"><a href="#指定下标位置添加" class="headerlink" title="指定下标位置添加"></a>指定下标位置添加</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">列表.insert(下标,数据)</span><br><span class="line"><span class="comment"># 在指定的下标位置添加数据，如果指定的下标位置有数据，原数据后移</span></span><br><span class="line"><span class="comment"># 返回：返回的None（关键字，空），一般就不再使用变量保存返回内容</span></span><br><span class="line"><span class="comment"># 查看打印列表，表示返回值</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mylist = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, <span class="string">&#x27;and&#x27;</span>]</span><br><span class="line">mylist.append(<span class="string">&#x27;you&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(mylist)</span><br><span class="line">mylist.insert(<span class="number">1</span>, <span class="string">&#x27;Lily&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(mylist)</span><br><span class="line">mylist.append([<span class="string">&#x27;him&#x27;</span>, <span class="string">&#x27;and&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(mylist)</span><br><span class="line">mylist.insert(<span class="number">1</span>, [<span class="string">&#x27;Manny&#x27;</span>, <span class="string">&#x27;Sue&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(mylist)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/listinsert.png"></p><h5 id="列表合并extend"><a href="#列表合并extend" class="headerlink" title="列表合并extend()"></a>列表合并extend()</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">列表<span class="number">1.</span>extend(列表<span class="number">2</span>) <span class="comment"># 将列表2中的所有数据逐个添加到列表1的尾部，不会改变列表1的内存地址</span></span><br><span class="line"><span class="comment"># 返回：返回的None（关键字，空），一般就不再使用变量保存返回内容</span></span><br><span class="line"><span class="comment"># 查看打印列表，表示返回值</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># list2拆开添加到mylist</span></span><br><span class="line">mylist = [<span class="string">&#x27;我&#x27;</span>, <span class="string">&#x27;爱&#x27;</span>]</span><br><span class="line">list2 = <span class="built_in">list</span>(<span class="string">&#x27;螺蛳粉&#x27;</span>)</span><br><span class="line">mylist.extend(list2)</span><br><span class="line"><span class="built_in">print</span>(mylist)</span><br><span class="line"><span class="comment">#list2作为整体加入mylist中</span></span><br><span class="line">mylist.append(list2)</span><br><span class="line"><span class="built_in">print</span>(mylist)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/listextend.png"></p><h4 id="列表删除"><a href="#列表删除" class="headerlink" title="列表删除"></a>列表删除</h4><p>在列表中删除中间的数据，后面的数据会向前移动</p><h5 id="根据下标删除"><a href="#根据下标删除" class="headerlink" title="根据下标删除"></a>根据下标删除</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">列表.pop(下标) <span class="comment">#删除指定下标对应的数据</span></span><br><span class="line"><span class="comment"># 下标不写，默认删除最后的数据</span></span><br><span class="line"><span class="comment"># 存在的下标，删除对应下标位置的数据，不存在的下标，报错IndexError</span></span><br><span class="line"><span class="comment"># 返回删除的数据</span></span><br><span class="line"><span class="keyword">del</span>.列表[下标]</span><br></pre></td></tr></table></figure><h5 id="根据数据值删除"><a href="#根据数据值删除" class="headerlink" title="根据数据值删除"></a>根据数据值删除</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">列表.remove(数据) </span><br><span class="line"><span class="comment"># 返回None</span></span><br><span class="line"><span class="comment"># 若删除的数据不存在，会报错</span></span><br><span class="line"><span class="comment"># 重复的数据删除第一个，想要删除多个进行循环</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1=[<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;l&#x27;</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="string">&#x27;h&#x27;</span> <span class="keyword">in</span> list1:</span><br><span class="line">    list1.remove(<span class="string">&#x27;h&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/image-20240403161924667.png"></p><h5 id="清空数据（一般不用）"><a href="#清空数据（一般不用）" class="headerlink" title="清空数据（一般不用）"></a>清空数据（一般不用）</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表.clear()</span><br></pre></td></tr></table></figure><h4 id="列表的反转和逆置"><a href="#列表的反转和逆置" class="headerlink" title="列表的反转和逆置"></a>列表的反转和逆置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 列表[::-<span class="number">1</span>] <span class="comment"># 得到一个新列表，原列表不会改变</span></span><br><span class="line"><span class="number">2.</span> 列表.reverse() <span class="comment"># 直接修改原列表，返回reverse,列表的内存地址不变</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list1=<span class="built_in">list</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(list1))</span><br><span class="line">list1.reverse()</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(list1))</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/image-20240403162100330.png"></p><h4 id="列表的复制"><a href="#列表的复制" class="headerlink" title="列表的复制"></a>列表的复制</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用场景，修改列表中的数据与修改之前的原始数据进行对比</span></span><br><span class="line"><span class="number">1.</span> 使用切片</span><br><span class="line">变量 = 列表[:]</span><br><span class="line"><span class="number">2.</span> 使用copy方法</span><br><span class="line">变量 = 列表.copy()</span><br><span class="line">列表<span class="number">1</span> = 列表<span class="number">2</span> <span class="comment"># 会创建一个新的列表对象，并将 list2 中的元素复制到新的列表对象中。这样做会使得 list1 和 list2 指向不同的内存空间，即它们是两个独立的列表对象。list1 和 list2 是两个不同的变量，它们分别指向两个不同的列表对象，这两个列表对象中的元素相同，但是它们在内存中的地址是不同的。</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">list1=[<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>]</span><br><span class="line">list2=[<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>]</span><br><span class="line">list3=list1.copy()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(list1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(list2))</span><br><span class="line"><span class="built_in">print</span>(list3)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(list3))</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/image-20240403162526505.png"></p><h4 id="列表的排序"><a href="#列表的排序" class="headerlink" title="列表的排序"></a>列表的排序</h4><p>列表的排序一般是针对数字进行排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">列表.sort() <span class="comment"># 按照升序排序</span></span><br><span class="line">列表.sort(reverse=<span class="literal">True</span>) <span class="comment"># 降序排序</span></span><br></pre></td></tr></table></figure><h4 id="列表去重"><a href="#列表去重" class="headerlink" title="列表去重"></a>列表去重</h4><p>去除列表中重复的数据</p><h5 id="错误示范"><a href="#错误示范" class="headerlink" title="错误示范"></a>错误示范</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>, <span class="number">23</span>, <span class="number">33</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">23</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="string">&#x27;3&#x27;</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> my_list:</span><br><span class="line">    <span class="keyword">while</span> (my_list.count(i) &gt; <span class="number">1</span>):</span><br><span class="line">        my_list.remove(i)</span><br><span class="line"><span class="built_in">print</span>(my_list)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/wrongexample.png"></p><p>当检测到列表中该数据需要删除时，列表后方数据会向前移动，所以紧跟在被删除数据后方的元素会不参与遍历</p><h5 id="正确示范"><a href="#正确示范" class="headerlink" title="正确示范"></a>正确示范</h5><h6 id="思想：放入新容器"><a href="#思想：放入新容器" class="headerlink" title="思想：放入新容器"></a>思想：放入新容器</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>, <span class="number">23</span>, <span class="number">33</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">23</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="string">&#x27;3&#x27;</span>, <span class="number">3</span>]</span><br><span class="line">new_list=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> my_list:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> new_list:</span><br><span class="line">        new_list.append(i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"><span class="built_in">print</span>(new_list)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/newjar.png"></p><h6 id="利用集合set特点"><a href="#利用集合set特点" class="headerlink" title="利用集合set特点"></a>利用集合set特点</h6><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/set.png"></p><p>缺点：不能保证数据在原列表中的顺序（一般不考虑）</p><h3 id="元组tuple"><a href="#元组tuple" class="headerlink" title="元组tuple"></a>元组tuple</h3><ul><li><p>Python 的元组与列表类似，不同之处在于元组的元素不能修改。元组使用小括号 **( )**，列表使用方括号 **[ ]**。</p></li><li><p>元组一般在函数的传参或者返回值中使用，保证数据不会被修改</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mytuple = <span class="built_in">tuple</span>(<span class="built_in">list</span>) <span class="comment">#将列表转化为元组</span></span><br><span class="line">mytuple1 = <span class="built_in">tuple</span>(<span class="built_in">str</span>) <span class="comment">#将字符串转化为元组</span></span><br></pre></td></tr></table></figure><p>元组中只包含一个元素时，需要在元素后面添加逗号 <strong>,</strong> ，否则括号会被当作运算符使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tuple1 = (<span class="number">1</span>)</span><br><span class="line">tuple2 = (<span class="number">1</span>,)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(tuple1), tuple1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(tuple2), tuple2)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/tuple.png"></p><h4 id="元组的常用方法"><a href="#元组的常用方法" class="headerlink" title="元组的常用方法"></a>元组的常用方法</h4><ul><li>没有修改方法</li><li>元组中可以使用下标和切片获取数据</li><li>元组中存在index方法</li><li>元组中存在count方法</li><li>可以使用in操作</li></ul><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><ul><li>字典是另一种可变容器模型，且可存储任意类型对象。</li><li>字典的每个键值 <strong>key&#x3D;&gt;value</strong> 对用冒号 <strong>:</strong> 分割，每个对之间用逗号(<strong>,</strong>)分割，整个字典包括在花括号 <strong>{}</strong> 中 ,格式如下所示：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量 = &#123;key1 : value1, key2 : value2, key3 : value3 &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>键必须是唯一</strong>的，但值则不必。值可以取任何数据类型，但<strong>键必须是不可变类型，键一般是字符串，可以是数字，不能是列表</strong>。</li><li><strong>字典不能转化成列表、元组和字符串</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建空的字典dict1</span></span><br><span class="line">dict1 = &#123;&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dict1), dict1)</span><br><span class="line"><span class="comment"># 创建空的字典dict2</span></span><br><span class="line">dict2 = <span class="built_in">dict</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dict2), dict2)</span><br><span class="line">dict3 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Marry&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;32&#x27;</span>, <span class="string">&#x27;height&#x27;</span>: <span class="string">&#x27;1.78&#x27;</span>, <span class="string">&#x27;is married&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;hobbies&#x27;</span>: [<span class="string">&#x27;painting&#x27;</span>, <span class="string">&#x27;music&#x27;</span>]&#125;</span><br><span class="line"><span class="built_in">print</span>(dict3)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(dict3)) <span class="comment"># 却决于键的个数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/dict.png"></p><h4 id="字典的增加修改"><a href="#字典的增加修改" class="headerlink" title="字典的增加修改"></a>字典的增加修改</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">字典[键]=数据值</span><br><span class="line"><span class="number">1.</span> 如果键已经存在，就是修改数据值</span><br><span class="line"><span class="number">2.</span> 如果键不存在，就是添加数据（即添加键值对）</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Marry&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">32</span>, <span class="string">&#x27;height&#x27;</span>: <span class="string">&#x27;1.78&#x27;</span>, <span class="string">&#x27;is married&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;hobbies&#x27;</span>: [<span class="string">&#x27;painting&#x27;</span>, <span class="string">&#x27;music&#x27;</span>]&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br><span class="line">dict1[<span class="string">&#x27;gender&#x27;</span>] = <span class="string">&#x27;female&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br><span class="line">dict1[<span class="string">&#x27;age&#x27;</span>] = <span class="number">33</span></span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br><span class="line">dict1[<span class="string">&#x27;hobbies&#x27;</span>].append(<span class="string">&#x27;studying&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/dicted.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">list1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">3</span>):</span><br><span class="line">    dict1 = &#123;&#125;</span><br><span class="line">    dict1[<span class="string">&#x27;name&#x27;</span>] = <span class="built_in">input</span>(<span class="string">&quot;请输入姓名&quot;</span>)</span><br><span class="line">    dict1[<span class="string">&#x27;age&#x27;</span>] = <span class="built_in">input</span>(<span class="string">&quot;请输入年龄&quot;</span>)</span><br><span class="line">    list1.append(dict1)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/dicedit.png"></p><h4 id="字典的删除"><a href="#字典的删除" class="headerlink" title="字典的删除"></a>字典的删除</h4><ul><li>删除指定的键值对</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> 字典[键]</span><br><span class="line">字典.pop(键)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Marry&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;32&#x27;</span>, <span class="string">&#x27;height&#x27;</span>: <span class="string">&#x27;1.78&#x27;</span>, <span class="string">&#x27;is married&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;hobbies&#x27;</span>: [<span class="string">&#x27;painting&#x27;</span>, <span class="string">&#x27;music&#x27;</span>],</span><br><span class="line">         <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;female&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">del</span> dict1[<span class="string">&#x27;gender&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br><span class="line">dict1.pop(<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br><span class="line">dict1[<span class="string">&#x27;hobbies&#x27;</span>].pop(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br><span class="line">dict1[<span class="string">&#x27;hobbies&#x27;</span>].remove(<span class="string">&#x27;music&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br><span class="line">dict1.clear()</span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/deldict.png"></p><ul><li>清空</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字典.clear()</span><br></pre></td></tr></table></figure><h4 id="字典的查询"><a href="#字典的查询" class="headerlink" title="字典的查询"></a>字典的查询</h4><p>字典中没有下标，要获取数据需要使用键来获取</p><ul><li><p>使用<code>字典[键]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字典[键]</span></span><br><span class="line"><span class="comment"># 如果键存在，返回对应数据值</span></span><br><span class="line"><span class="comment"># 如果键不存在，报错</span></span><br></pre></td></tr></table></figure></li><li><p>使用<code>字典.get(键)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">字典.get(键,数据值)</span><br><span class="line"><span class="comment"># 数据值一般不写，默认None</span></span><br><span class="line"><span class="comment"># 如果键存在，返回对应数据值</span></span><br><span class="line"><span class="comment"># 如果键不存在，返回括号中书写的数据值（None）</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Marry&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;32&#x27;</span>, <span class="string">&#x27;height&#x27;</span>: <span class="string">&#x27;1.78&#x27;</span>, <span class="string">&#x27;is married&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;hobbies&#x27;</span>: [<span class="string">&#x27;painting&#x27;</span>, <span class="string">&#x27;music&#x27;</span>]&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(dict1.get(<span class="string">&#x27;name&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(dict1.get(<span class="string">&#x27;gender&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(dict1.get(<span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;secret&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(dict1[<span class="string">&#x27;hobbies&#x27;</span>][<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(dict1.get(<span class="string">&#x27;hobbies&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(dict1.get(<span class="string">&#x27;address&#x27;</span>,<span class="string">&#x27;no info&#x27;</span>))</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/image-20240403163259990.png"></p><h4 id="字典的遍历"><a href="#字典的遍历" class="headerlink" title="字典的遍历"></a>字典的遍历</h4><h5 id="对字典的键进行遍历"><a href="#对字典的键进行遍历" class="headerlink" title="对字典的键进行遍历"></a>对字典的键进行遍历</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">for</span> key <span class="keyword">in</span> 字典:</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"><span class="number">2.</span> <span class="keyword">for</span> key <span class="keyword">in</span> 字典.keys():  <span class="comment"># 字典.keys()可以获取字典中所有的键</span></span><br><span class="line"><span class="built_in">print</span>(key)</span><br></pre></td></tr></table></figure><h5 id="对值进行遍历"><a href="#对值进行遍历" class="headerlink" title="对值进行遍历"></a>对值进行遍历</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> 字典.values():  <span class="comment"># 字典.values()可以获取字典中所有的值</span></span><br><span class="line">    <span class="built_in">print</span>(value) <span class="comment"># 输出值</span></span><br></pre></td></tr></table></figure><h5 id="对键值对进行遍历"><a href="#对键值对进行遍历" class="headerlink" title="对键值对进行遍历"></a>对键值对进行遍历</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> 字典.items(): <span class="comment"># 字典.items()可以获取字典中所有键值对</span></span><br><span class="line">    <span class="built_in">print</span>(k,v) <span class="comment"># 输出键值对</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Marry&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;32&#x27;</span>, <span class="string">&#x27;height&#x27;</span>: <span class="string">&#x27;1.78&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 遍历字典的键</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> dict1:</span><br><span class="line">    <span class="built_in">print</span>(k)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> dict1.keys():</span><br><span class="line">    <span class="built_in">print</span>(k)</span><br><span class="line"><span class="comment"># 遍历字典的值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">30</span>)</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> dict1.values():</span><br><span class="line">    <span class="built_in">print</span>(v)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">30</span>)</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> dict1.items():</span><br><span class="line">    <span class="built_in">print</span>(k, v)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/travesaldict.png"></p><h3 id="容器总结"><a href="#容器总结" class="headerlink" title="容器总结"></a>容器总结</h3><ol><li>字符串，列表，元组支持加法运算</li><li>字符串、列表、元组支持乘上一个整数</li><li>len()在容器中（str、list、dict、tuple）都可以使用</li><li>in 在容器中都可以使用，在字典中判断字典的key是否存在</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">my_list = [&#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;money&#x27;</span>: <span class="number">10</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;money&#x27;</span>: <span class="number">20</span>&#125;,&#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;money&#x27;</span>: <span class="number">30</span>&#125;,&#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;money&#x27;</span>: <span class="number">40</span>&#125;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> my_list:</span><br><span class="line">        <span class="keyword">if</span> element[<span class="string">&#x27;id&#x27;</span>] % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            element[<span class="string">&#x27;money&#x27;</span>] += <span class="number">10</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            element[<span class="string">&#x27;money&#x27;</span>] += <span class="number">20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func()</span><br><span class="line"><span class="built_in">print</span>(my_list)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/container.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">my_dict = &#123;<span class="string">&#x27;登录&#x27;</span>: [&#123;<span class="string">&#x27;desc&#x27;</span>: <span class="string">&#x27;正确的用户名密码&#x27;</span>, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;expect&#x27;</span>: <span class="string">&#x27;登录成功&#x27;</span>&#125;,</span><br><span class="line">                    &#123;<span class="string">&#x27;desc&#x27;</span>: <span class="string">&#x27;错误的用户名&#x27;</span>, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;expect&#x27;</span>: <span class="string">&#x27;登录失败&#x27;</span>&#125;,</span><br><span class="line">                    &#123;<span class="string">&#x27;desc&#x27;</span>: <span class="string">&#x27;错误的密码&#x27;</span>, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123123&#x27;</span>, <span class="string">&#x27;expect&#x27;</span>: <span class="string">&#x27;登录失败&#x27;</span>&#125;,</span><br><span class="line">                    &#123;<span class="string">&#x27;desc&#x27;</span>: <span class="string">&#x27;错误的用户名和密码&#x27;</span>, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123123&#x27;</span>, <span class="string">&#x27;expect&#x27;</span>: <span class="string">&#x27;登录失败&#x27;</span>&#125;],</span><br><span class="line">           <span class="string">&#x27;注册&#x27;</span>: [&#123;<span class="string">&#x27;desc&#x27;</span>: <span class="string">&#x27;注册1&#x27;</span>, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;abcd&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>&#125;,</span><br><span class="line">                    &#123;<span class="string">&#x27;desc&#x27;</span>: <span class="string">&#x27;注册1&#x27;</span>, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;xyz&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>&#125;]&#125;</span><br><span class="line">opt = <span class="built_in">input</span>(<span class="string">&quot;请输入信息：登录/注册&quot;</span>)  <span class="comment"># 获取测试人员的信息</span></span><br><span class="line">info_list = []</span><br><span class="line"><span class="keyword">if</span> opt == <span class="string">&#x27;登录&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;获取登录数据&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> my_dict.get(<span class="string">&#x27;登录&#x27;</span>):</span><br><span class="line">        my_tuple = (i.get(<span class="string">&#x27;username&#x27;</span>), i.get(<span class="string">&#x27;password&#x27;</span>), i.get(<span class="string">&#x27;expect&#x27;</span>))</span><br><span class="line">        info_list.append(my_tuple)</span><br><span class="line">    <span class="built_in">print</span>(info_list)</span><br><span class="line"><span class="keyword">elif</span> opt == <span class="string">&#x27;注册&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;获取注册数据&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> my_dict.get(<span class="string">&#x27;注册&#x27;</span>):</span><br><span class="line">        my_tuple = (i.get(<span class="string">&#x27;username&#x27;</span>), i.get(<span class="string">&#x27;password&#x27;</span>))</span><br><span class="line">        info_list.append(my_tuple)</span><br><span class="line">    <span class="built_in">print</span>(info_list)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入错误&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/logindict.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/loginlist.png"></p><h1 id="Python运算符"><a href="#Python运算符" class="headerlink" title="Python运算符"></a>Python运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>以下假设变量 a&#x3D;10，变量 b&#x3D;21：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">加 - 两个对象相加</td><td align="left">a + b 输出结果 31</td></tr><tr><td align="left">-</td><td align="left">减 - 得到负数或是一个数减去另一个数</td><td align="left">a - b 输出结果 -11</td></tr><tr><td align="left">*</td><td align="left">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td><td align="left">a * b 输出结果 210</td></tr><tr><td align="left">&#x2F;</td><td align="left">除 - x 除以 y（返回浮点类型）</td><td align="left">b &#x2F; a 输出结果 2.1</td></tr><tr><td align="left">%</td><td align="left">取模 - 返回除法的余数</td><td align="left">b % a 输出结果 1</td></tr><tr><td align="left">**</td><td align="left">幂 - 返回x的y次幂</td><td align="left">a**b 为10的21次方</td></tr><tr><td align="left">&#x2F;&#x2F;</td><td align="left">取整除 - 往小的方向取整数</td><td align="left"><code>&gt;&gt;&gt; 9//2 4 &gt;&gt;&gt; -9//2 -5</code></td></tr></tbody></table><p>优先级：() &gt; ** &gt; * &#x2F; &#x2F;&#x2F; % &gt; + -</p><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>以下假设变量 a 为 10，变量 b 为20：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">&#x3D;&#x3D;</td><td align="left">等于 - 比较对象是否相等</td><td align="left">(a &#x3D;&#x3D; b) 返回 False。</td></tr><tr><td align="left">!&#x3D;</td><td align="left">不等于 - 比较两个对象是否不相等</td><td align="left">(a !&#x3D; b) 返回 True。</td></tr><tr><td align="left">&gt;</td><td align="left">大于 - 返回x是否大于y</td><td align="left">(a &gt; b) 返回 False。</td></tr><tr><td align="left">&lt;</td><td align="left">小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。</td><td align="left">(a &lt; b) 返回 True。</td></tr><tr><td align="left">&gt;&#x3D;</td><td align="left">大于等于 - 返回x是否大于等于y。</td><td align="left">(a &gt;&#x3D; b) 返回 False。</td></tr><tr><td align="left">&lt;&#x3D;</td><td align="left">小于等于 - 返回x是否小于等于y。</td><td align="left">(a &lt;&#x3D; b) 返回 True。</td></tr></tbody></table><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>Python语言支持逻辑运算符，以下假设变量 a 为 10, b为 20:</p><table><thead><tr><th align="left">运算符</th><th align="left">逻辑表达式</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">and</td><td align="left">x and y</td><td align="left">布尔”与” - 如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。当第一个条件为False时，第二个条件不判断<img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/image-20240403181229871.png"></td><td align="left">(a and b) 返回 20。</td></tr><tr><td align="left">or</td><td align="left">x or y</td><td align="left">布尔”或” - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。当第一个条件为True，第二个条件不再判断<img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/image-20240403181402467.png"></td><td align="left">(a or b) 返回 10。</td></tr><tr><td align="left">not</td><td align="left">not x</td><td align="left">布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td><td align="left">not(a and b) 返回 False</td></tr></tbody></table><p>当数字不是0时，都表示True</p><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>以下假设变量a为10，变量b为20：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">&#x3D;</td><td align="left">简单的赋值运算符</td><td align="left">c &#x3D; a + b 将 a + b 的运算结果赋值为 c</td></tr><tr><td align="left">+&#x3D;</td><td align="left">加法赋值运算符</td><td align="left">c +&#x3D; a 等效于 c &#x3D; c + a</td></tr><tr><td align="left">-&#x3D;</td><td align="left">减法赋值运算符</td><td align="left">c -&#x3D; a 等效于 c &#x3D; c - a</td></tr><tr><td align="left">*&#x3D;</td><td align="left">乘法赋值运算符</td><td align="left">c *&#x3D; a 等效于 c &#x3D; c * a</td></tr><tr><td align="left">&#x2F;&#x3D;</td><td align="left">除法赋值运算符</td><td align="left">c &#x2F;&#x3D; a 等效于 c &#x3D; c &#x2F; a</td></tr><tr><td align="left">%&#x3D;</td><td align="left">取模赋值运算符</td><td align="left">c %&#x3D; a 等效于 c &#x3D; c % a</td></tr><tr><td align="left">**&#x3D;</td><td align="left">幂赋值运算符</td><td align="left">c * *&#x3D; a 等效于 c &#x3D; c ** a</td></tr><tr><td align="left">&#x2F;&#x2F;&#x3D;</td><td align="left">取整除赋值运算符</td><td align="left">c &#x2F;&#x2F;&#x3D; a 等效于 c &#x3D; c &#x2F;&#x2F; a</td></tr><tr><td align="left">:&#x3D;</td><td align="left">海象运算符，这个运算符的主要目的是在表达式中同时进行赋值和返回赋值的值。<strong>Python3.8 版本新增运算符</strong>。</td><td align="left">在这个示例中，赋值表达式可以避免调用 len() 两次:<code>print(n:=10)</code>输出结果：10</td></tr></tbody></table><h2 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h2><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">in</td><td align="left">如果在指定的序列中找到值返回 True，否则返回 False。</td><td align="left">x 在 y 序列中 , 如果 x 在 y 序列中返回 True。</td></tr><tr><td align="left">not in</td><td align="left">如果在指定的序列中没有找到值返回 True，否则返回 False。</td><td align="left">x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</td></tr></tbody></table><h1 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制</h1><h2 id="if-elif-else"><a href="#if-elif-else" class="headerlink" title="if elif else"></a>if elif else</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition_1:</span><br><span class="line">    statement_block_1</span><br><span class="line"><span class="keyword">elif</span> condition_2:</span><br><span class="line">    statement_block_2</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    statement_block_3</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="built_in">input</span>(<span class="string">&#x27;输入你的年龄：&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">int</span>(age) &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;满18岁了可以去网吧&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未成年不能进入网吧&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/if.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="built_in">input</span>(<span class="string">&#x27;输入你的用户名：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> name == <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;admin登录成功！&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> name == <span class="string">&#x27;test&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test登录成功！&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;登陆失败！&quot;</span>)</span><br><span class="line"></span><br><span class="line">name = <span class="built_in">input</span>(<span class="string">&#x27;输入你的用户名：&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> name == <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> name == <span class="string">&#x27;test&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%s登陆成功！&quot;</span> % name)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;登陆失败！&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/ifelse.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">date = <span class="built_in">input</span>(<span class="string">&quot;输入今天是星期几：&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> date == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;今天要去上班&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> date == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;才上了一天班呢&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> date == <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;到周中了&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> date == <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;今天是疯狂星期四&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> date == <span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;明天就放假了！&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> date == <span class="string">&#x27;6&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;放假第一天&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> date == <span class="string">&#x27;7&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;明天就上班了&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你输入错误了&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/ifelif.png"></p><h2 id="if嵌套"><a href="#if嵌套" class="headerlink" title="if嵌套"></a>if嵌套</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个整数&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">if</span> num % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;数字%d可以整除2和3&quot;</span> % num)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;数字%d可以整除2，不能整除3&quot;</span> % num)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> num % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;数字%d可以整除3，不能整除2&quot;</span> % num)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;数字%d既不能整除2也不能整除3&quot;</span> % num)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/ifif.png"></p><h2 id="match…case"><a href="#match…case" class="headerlink" title="match…case"></a>match…case</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">match</span> subject:</span><br><span class="line">    <span class="keyword">case</span> &lt;pattern_1&gt;:</span><br><span class="line">        &lt;action_1&gt;</span><br><span class="line">    <span class="keyword">case</span> &lt;pattern_2&gt;:</span><br><span class="line">        &lt;action_2&gt;</span><br><span class="line">    <span class="keyword">case</span> &lt;pattern_3&gt;:</span><br><span class="line">        &lt;action_3&gt;</span><br><span class="line">    <span class="keyword">case</span> _:</span><br><span class="line">        &lt;action_wildcard&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">http_error</span>(<span class="params">status</span>):</span><br><span class="line">    <span class="keyword">match</span> status:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">400</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Bad request&quot;</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Not found&quot;</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">418</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;I&#x27;m a teapot&quot;</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">401</span> | <span class="number">403</span> | <span class="number">404</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Not allowed&quot;</span></span><br><span class="line">        <span class="keyword">case</span> _: <span class="comment"># 用于捕获所有未被显式匹配的情况，简单地表示“其他所有情况”</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Something&#x27;s wrong with the internet&quot;</span></span><br><span class="line"></span><br><span class="line">mystatus=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;输入状态码&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(http_error(mystatus))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/matchcase.png"></p><h2 id="猜拳游戏"><a href="#猜拳游戏" class="headerlink" title="猜拳游戏"></a>猜拳游戏</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    player = <span class="built_in">input</span>(<span class="string">&quot;剪刀石头布，你出什么，想要退出输入0&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> player == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    randomid = random.randint(<span class="number">0</span>, <span class="number">2</span>)  <span class="comment"># 产生0-2之间的随机整数，包含0和2</span></span><br><span class="line">    listcom = [<span class="string">&#x27;剪刀&#x27;</span>, <span class="string">&#x27;石头&#x27;</span>, <span class="string">&#x27;布&#x27;</span>]</span><br><span class="line">    computer = listcom[randomid]</span><br><span class="line">    <span class="keyword">match</span> computer:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;剪刀&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;电脑出的是%s&quot;</span> % computer)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;你出的是%s&quot;</span> % player)</span><br><span class="line">            <span class="keyword">match</span> player:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;剪刀&#x27;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;平局！&quot;</span>)</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;石头&#x27;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;你赢了！&quot;</span>)</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;布&#x27;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;你输了！&quot;</span>)</span><br><span class="line">                <span class="keyword">case</span> _:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;出错了！&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;石头&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;电脑出的是%s&quot;</span> % computer)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;你出的是%s&quot;</span> % player)</span><br><span class="line">            <span class="keyword">match</span> player:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;剪刀&#x27;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;你输了！&quot;</span>)</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;石头&#x27;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;平局！&quot;</span>)</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;布&#x27;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;你赢了！&quot;</span>)</span><br><span class="line">                <span class="keyword">case</span> _:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;出错了！&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;布&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;电脑出的是%s&quot;</span> % computer)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;你出的是%s&quot;</span> % player)</span><br><span class="line">            <span class="keyword">match</span> player:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;剪刀&#x27;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;你赢了！&quot;</span>)</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;石头&#x27;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;你输了！&quot;</span>)</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;布&#x27;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;平局！&quot;</span>)</span><br><span class="line">                <span class="keyword">case</span> _:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;出错了！&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/rscp.png"></p><h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 判断条件(condition)：</span><br><span class="line">    执行语句(statements)……</span><br></pre></td></tr></table></figure><h3 id="死循环和无限循环"><a href="#死循环和无限循环" class="headerlink" title="死循环和无限循环"></a>死循环和无限循环</h3><ul><li>死循环：bug造成的</li><li>无限循环：<code>while true</code>，故意设计的。应用场景：书写循环时，不确定循环要执行多少次。无限循环的使用一般会在循环中添加if判断，当if条件成立，使用关键字break终止循环</li></ul><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 1到100的数字之和</span><br><span class="line">i = 1</span><br><span class="line">sum = 0</span><br><span class="line">while (i &lt;= 100):</span><br><span class="line">    sum = sum + i</span><br><span class="line">    i = i + 1</span><br><span class="line">print(sum)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/while.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1到100的之间的偶数之和</span></span><br><span class="line">i = <span class="number">2</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">100</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + i</span><br><span class="line">    i = i + <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br><span class="line"><span class="comment"># if判断计算1到100的之间的偶数之和</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">100</span>):</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + i</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/sum.png"></p><h3 id="while…else"><a href="#while…else" class="headerlink" title="while…else"></a>while…else</h3><p>如果 while 后面的条件语句为 false 时，则执行 else 的语句块。如果循环由break中断，不执行else中的语句</p><p>语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> &lt;expr&gt;:</span><br><span class="line">    &lt;statement(s)&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;additional_statement(s)&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(count, <span class="string">&quot; 小于 5&quot;</span>)</span><br><span class="line">    count = count + <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(count, <span class="string">&quot; 大于或等于 5&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/whileelse.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(count, <span class="string">&quot; 小于 5&quot;</span>)</span><br><span class="line">    count = count + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(count, <span class="string">&quot; 大于或等于 5&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/whileelse2.png"></p><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>for 循环可以遍历容器中的数据，容器：字符串、列表、元组、字典</p><p>for循环的一般格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &lt;variable&gt; <span class="keyword">in</span> &lt;sequence&gt;:</span><br><span class="line">    &lt;statements&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;statements&gt;</span><br></pre></td></tr></table></figure><h3 id="for-…-in-…"><a href="#for-…-in-…" class="headerlink" title="for … in …"></a>for … in …</h3><ul><li>容器中有多少个数据，循环执行多少次</li><li><strong>每次循环会将容器中的数据取出，保存到in前面的变量中</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 遍历列表中的元素</span></span><br><span class="line">sites = [<span class="string">&quot;Baidu&quot;</span>, <span class="string">&quot;Google&quot;</span>, <span class="string">&quot;chrome&quot;</span>, <span class="string">&quot;Taobao&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> site <span class="keyword">in</span> sites:</span><br><span class="line">    <span class="built_in">print</span>(site)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/forin.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">word = <span class="string">&#x27;Google&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> word:</span><br><span class="line">    <span class="built_in">print</span>(letter, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/forin2.png"></p><h3 id="for-…-in-range"><a href="#for-…-in-range" class="headerlink" title="for … in range()"></a>for … in range()</h3><p>整数范围值可以配合 range() 函数使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">    <span class="built_in">print</span>(number,end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/forrange.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Finally finished!&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/image-20240403190755730.png"></p><h3 id="for-…-else"><a href="#for-…-else" class="headerlink" title="for … else"></a>for … else</h3><p>在 Python 中，for…else 语句用于在循环结束后执行一段代码。</p><p>语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> iterable:</span><br><span class="line">    <span class="comment"># 循环主体</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 循环结束后执行的代码</span></span><br></pre></td></tr></table></figure><p>当循环执行完毕（即遍历完 iterable 中的所有元素）后，会执行 else 子句中的代码，如果在循环过程中遇到了 break 语句，则会中断循环，此时不会执行 else 子句。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    <span class="built_in">print</span>(x,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Finally finished!&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/forelse.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Finally finished!&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/image-20240403191028843.png"></p><h3 id="range-函数"><a href="#range-函数" class="headerlink" title="range()函数"></a>range()函数</h3><ul><li>range() 函数会生成数列，range(n)，可以生成0到n（不包含n）的数字。循环循环n次</li><li>range(a,b)生成从a到b（不含b）的数列</li><li>rang(a,b,c)c为步长（增量），可以为负数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取列表索引</span></span><br><span class="line">list1 = [<span class="string">&#x27;hello&#x27;</span>, <span class="number">234</span>, <span class="number">56</span>, <span class="string">&#x27;wer&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;wqqe&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list1)):</span><br><span class="line">    <span class="built_in">print</span>(i, list1[i])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="D:\blog\source_posts\Python\range.png" alt="image-20240305150210413"></p><p>还可以使用 range() 函数来创建一个列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><h2 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h2><ul><li>break：终止循环，循环立即结束</li><li>continue：跳过本次循环，本次循环剩下的代码不再执行，进行下一次循环</li><li><strong>break</strong> 语句可以跳出 for 和 while 的循环体。else 子句，它在穷尽列表(以for循环)或条件变为 false (以while循环)导致循环终止时被执行，如果从 for 或 while 循环中被break终止，任何对应的循环 else 块将不执行。</li><li><strong>continue</strong> 语句被用来告诉 Python 跳过当前循环块中的剩余语句，然后继续进行下一轮循环。</li></ul><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/breakcontinue.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>(<span class="string">&quot;输入一个字符串并打印,当输入i的时候i不打印，当输入%的时候结束打印&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;i&#x27;</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;%&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;打印完成！&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/bce.png"></p><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/bce2.png"></p><h2 id="pass语句"><a href="#pass语句" class="headerlink" title="pass语句"></a>pass语句</h2><p><code>pass</code>是空语句，是为了保持程序结构的完整性。</p><p><code>pass</code>不做任何事情，一般用做占位语句</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><ul><li>函数必须先定义后调用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">functname</span>():</span><br><span class="line">    code</span><br><span class="line">    ...</span><br><span class="line"><span class="comment"># 1. def是关键字，用来定义函数的</span></span><br><span class="line"><span class="comment"># 2. 函数名需要遵守标识符的规则</span></span><br><span class="line"><span class="comment"># 3. 处于def缩进中的代码称为函数体</span></span><br><span class="line"><span class="comment"># 4. 函数定义的时候，函数体中的代码不会执行，调用的时候才会执行</span></span><br></pre></td></tr></table></figure><h2 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">functname()</span><br><span class="line"><span class="comment"># 1. 函数调用的时候会执行函数体中的代码</span></span><br><span class="line"><span class="comment"># 2. 函数调用的代码要写在函数体外面</span></span><br></pre></td></tr></table></figure><h2 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h2><p>本质上是注释，只是书写的位置和作用比较特殊</p><ul><li>书写位置：在函数名的下方使用，三对双引号进行注释</li><li>作用：告诉别人函数如何使用</li><li>查看，在调用的时候，将光标放到函数名上使用ctrl+q</li><li>ctrl+b会转到函数的声明（按住ctrl鼠标左键点击）</li></ul><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/note.png"></p><h2 id="函数的嵌套调用"><a href="#函数的嵌套调用" class="headerlink" title="函数的嵌套调用"></a>函数的嵌套调用</h2><p>在一个函数定义中调用另一个函数</p><p>注意：</p><ol><li>函数定义不会调用函数体中的代码</li><li>函数调用会执行函数体中的代码</li><li>函数体中代码执行结束会回到函数被调用的地方继续向下执行</li></ol><h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><ul><li>在函数定义的时候，使用变量代替具体的数据（进行占位），称为形参，在调用函数的时候，传递具体的数值，称为实参</li><li>函数的传参传递的是引用</li></ul><h3 id="函数传参的方式"><a href="#函数传参的方式" class="headerlink" title="函数传参的方式"></a>函数传参的方式</h3><h4 id="位置传参"><a href="#位置传参" class="headerlink" title="位置传参"></a>位置传参</h4><p>在函数调用的时候，按照形参的顺序，将实参值传递给形参</p><h4 id="关键字传参"><a href="#关键字传参" class="headerlink" title="关键字传参"></a>关键字传参</h4><p>在函数调用的时候，指定数据值给到那个形参</p><h4 id="混合使用"><a href="#混合使用" class="headerlink" title="混合使用"></a>混合使用</h4><ul><li>关键字传参必须写在位置传参的后面</li><li>不能给一个形参传递多个数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 求和函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_sum</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num1 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;输入第一个数字&#x27;</span>))</span><br><span class="line">num2 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;输入第一个数字&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(my_sum(num1, num2))</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/mysumfunc.png"></p><h3 id="缺省参数"><a href="#缺省参数" class="headerlink" title="缺省参数"></a>缺省参数</h3><p>缺省参数即默认参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在函数定义的时候，给形参一个默认的数据值，这个形参就变为缺省参数</span></span><br><span class="line"><span class="comment"># 缺省参数的书写要放在普通参数的后边</span></span><br><span class="line"><span class="comment"># 缺省参数在函数调用的时候可以传递实参值，也可以不传递实参值</span></span><br><span class="line"><span class="comment"># 传参即为实参值，不传即为缺省值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">functname</span>(<span class="params">para1,para2=<span class="string">&#x27;value&#x27;</span></span>)</span><br></pre></td></tr></table></figure><h3 id="多值参数（不定长参数）"><a href="#多值参数（不定长参数）" class="headerlink" title="多值参数（不定长参数）"></a>多值参数（不定长参数）</h3><p>比如print()函数，可以有多个参数</p><p>在书写函数不确定参数个数的时候，可以使用不定长参数（多值参数）</p><ul><li>不定长位置参数（不定长元组参数）<ul><li><ol><li>在普通参数的前面加上一个<code>*</code>，这个参数就变为不定长位置参数</li><li>这个形参可以接受任意多个位置的传参</li><li>参数将被收集到一个元组中，并传递给函数</li><li>不定长位置参数写在普通参数的后面</li><li>一般写法，不定长位置参数的名字为<code>args</code>，即<code>(*args)</code></li></ol></li></ul></li><li>不定长关键字参数（不定长字典参数）<ul><li><ol><li>在普通参数的前面加上两个<code>**</code>，这个参数就变为不定长关键字参数</li><li>这个形参可以接受任意多个关键字的传参</li><li>这些参数将被收集到一个字典中，并传递给函数。</li><li>不定长关键字参数写在所有参数的后面</li><li>一般写法，不定长关键字参数的名字为<code>kwargs</code>，即<code>(**kwargs)</code></li></ol></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_sum</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">        num += i</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> kwargs.values():</span><br><span class="line">        num += j</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_sum(<span class="number">1</span>, <span class="number">2</span>, a=<span class="number">4</span>, b=<span class="number">5</span>, c=<span class="number">6</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/mysum2.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_sum</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">        num += i</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> kwargs.values():</span><br><span class="line">        num += j</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mylist = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">mydict = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">4</span>&#125;</span><br><span class="line"><span class="comment"># 将列表(元组)中的数据分别作为位置参数进行传参，需要对列表进行解包操作</span></span><br><span class="line">my_sum(*mylist)  <span class="comment"># my_sum(1,2,3,4)</span></span><br><span class="line"><span class="comment"># 将字典中的数据作为关键字传参，需要使用**对字典进行解包</span></span><br><span class="line">my_sum(**mydict)  <span class="comment"># my_sum(a=1,b=2,c=3,d=4)</span></span><br><span class="line">my_sum(*mylist, **mydict)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/mysum3.png"></p><h3 id="完整的参数顺序"><a href="#完整的参数顺序" class="headerlink" title="完整的参数顺序"></a>完整的参数顺序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">functname</span> (普通参数, *args, **kwargs):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(args), args)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(kwargs), kwargs)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func()</span><br><span class="line">func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)  <span class="comment"># 数据都给args</span></span><br><span class="line">func(a=<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="number">3</span>)  <span class="comment"># 关键字传参，数据都给kwargs</span></span><br><span class="line">func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, a=<span class="number">4</span>, b=<span class="number">5</span>, c=<span class="number">6</span>)  <span class="comment"># 不定长传参,前面数据都给args，后面kwargs</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/para.png"></p><h3 id="在传参的作用"><a href="#在传参的作用" class="headerlink" title="*在传参的作用"></a>*在传参的作用</h3><p><code>*</code> 的作用是定义位置参数的结束和关键字参数的开始。当在函数定义中的参数列表中出现 <code>*</code> 时，它将标志着其前面的参数只能通过位置传递，而后面的参数只能通过关键字传递。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a, b, *, d</span>):</span><br><span class="line">    <span class="built_in">print</span>(a, b, d)</span><br><span class="line"></span><br><span class="line">func(<span class="number">1</span>, <span class="number">2</span>, d=<span class="number">3</span>)  <span class="comment"># 合法的调用方式，指定了参数d的名称</span></span><br><span class="line"><span class="comment"># 输出：1 2 3</span></span><br><span class="line"></span><br><span class="line">func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)  <span class="comment"># 错误的调用方式，因为参数d必须通过关键字传递</span></span><br><span class="line"><span class="comment"># 输出：TypeError: func() takes 2 positional arguments but 3 were given</span></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/image-20240403212354201.png"></p><h2 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h2><p>函数整体执行的结果，函数中得到的数据在后续的代码中还要使用，这时需要将数据作为返回值返回</p><p><code>return</code>之后的代码不会执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">functname</span>():   <span class="comment"># 返回值None</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">functname</span>():</span><br><span class="line">    <span class="keyword">return</span>     <span class="comment"># 返回值None</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">functname</span>():</span><br><span class="line">    <span class="keyword">return</span> xx  <span class="comment"># 返回值xx</span></span><br></pre></td></tr></table></figure><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li><p>变量和数据都是保存在内存中的。在 Python 中，变量是用来存储数据的标识符，它们也存储在计算机的内存中。Python 是一种动态类型语言，这意味着变量的类型是根据赋给它们的值来确定的，而不是在声明变量时显式地指定类型。</p><p>当我们在 Python 中创建变量并给它们赋值时，Python 解释器会在内存中分配一块空间来存储这些变量的值。每个变量都有一个名称（标识符）和一个关联的内存地址，我们可以使用这个名称来访问和操作变量的值。</p></li><li><p>变量存储的是对象的引用（对象的内存地址）</p></li><li><p>在python中函数的参数传递以及返回值都是靠引用传递的</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 在定义变量的时候 变量=数据值，Python解释器会在内存中开辟两块空间</span><br><span class="line">2. 变量和数据都有自己的空间</span><br><span class="line">3. 本质：数据的地址保存到变量对应的内存中</span><br><span class="line">4. 变量中储存数据地址的行为就是引用（变量引用了数据的地址，简单说就是变量中储存了数据）存储的地址称为引用地址</span><br><span class="line">5. 可以使用id()，获取变量中的引用地址，即数据的地址。如果两个变量的id()获取的引用地址一样，代表着两个变量引用了同一个数据</span><br><span class="line">6. 只有赋值运算符=可以改变变量的引用</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">c = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(b))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(c))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/%E3%80%91id.png"></p><h3 id="可变类型和不可变类型"><a href="#可变类型和不可变类型" class="headerlink" title="可变类型和不可变类型"></a>可变类型和不可变类型</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">数据类型：int float bool str list tuple dict set</span><br><span class="line">可变类型：数据所在的内存允许修改</span><br><span class="line">不可变类型：数据所在的内存不允许修改</span><br><span class="line">不使用=，变量引用的数据中的内容是否会变化，会变化是可变的，不会变化是不可变的。比方list可以用append()方法进行修改</span><br><span class="line">可变类型：list,dict,set</span><br><span class="line">不可变类型：int，float，bool，str，tuple</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">list1=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;list1&#x27;</span>,<span class="built_in">id</span>(list1))</span><br><span class="line">list2=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;list2&#x27;</span>,<span class="built_in">id</span>(list2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;list1[0]&#x27;</span>,<span class="built_in">id</span>(list1[<span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;list1[1]&#x27;</span>,<span class="built_in">id</span>(list1[<span class="number">1</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;list1[2]&#x27;</span>,<span class="built_in">id</span>(list1[<span class="number">2</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;list2[0]&#x27;</span>,<span class="built_in">id</span>(list2[<span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;list2[1]&#x27;</span>,<span class="built_in">id</span>(list2[<span class="number">1</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;list2[2]&#x27;</span>,<span class="built_in">id</span>(list2[<span class="number">2</span>]))</span><br><span class="line">list1[<span class="number">1</span>]=<span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;list1&#x27;</span>,<span class="built_in">id</span>(list1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;list1[0]&#x27;</span>,<span class="built_in">id</span>(list1[<span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;list1[1]&#x27;</span>,<span class="built_in">id</span>(list1[<span class="number">1</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;list1[2]&#x27;</span>,<span class="built_in">id</span>(list1[<span class="number">2</span>]))</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/changeable.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mytuple = (<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="comment"># 元组中的数据不能改变，指的是这三个地址不能改变</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(mytuple[-<span class="number">1</span>]))</span><br><span class="line">mytuple[-<span class="number">1</span>][<span class="number">0</span>] = <span class="number">10</span>  <span class="comment"># 修改的是列表中下标为0的位置的引用地址，列表的地址没有变，元组中的内容没有变化(元组的内容是引用地址)</span></span><br><span class="line"><span class="built_in">print</span>(mytuple)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(mytuple[-<span class="number">1</span>]))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/mytuple.png"></p><ul><li><p>如果将可变对象（如列表、字典等）作为函数的参数，并在函数内部修改了这些对象的值（而不是重新赋值给参数），那么这些修改将会影响到传递给函数的实际参数（也称为实参）。这是因为在 Python 中，可变对象是通过引用传递的，而不是通过值传递的。</p><ul><li>当你传递可变对象（如列表、字典等）给一个函数作为参数时，实际上是将该对象的引用传递给了函数。所谓的引用，实际上是指向存储对象的内存地址的指针。换句话说，函数内部的参数将指向与调用函数时传递的实际对象相同的内存地址，而不是对象的副本。</li><li>因此，如果在函数内部修改了这个可变对象（例如，向列表中添加元素、修改字典中的键值对等），则实际上是在修改同一个对象。由于函数参数和调用者之间共享对象的引用，因此对对象的修改会在函数外部产生影响。</li><li><pre><code class="python">def modify_list(lst):    lst.append(4)    lst[0] = 100my_list = [1, 2, 3]modify_list(my_list)print(my_list)  # 输出 [100, 2, 3, 4]</code></pre></li><li>需要注意的是，如果在函数内部重新给参数赋值，例如 <code>lst = [4, 5, 6]</code>，这将会改变参数的引用，但不会影响到原始对象。</li><li><pre><code class="python">def modify_list(lst):    lst = [4, 5, 6]my_list = [1, 2, 3]print(my_list)modify_list(my_list)print(my_list)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - ![](image-20240403215607166.png)</span><br><span class="line"></span><br><span class="line">- list中+=操作的本质是extend的操作，所以列表的内存地址不发生改变</span><br><span class="line">- 不可变对象（如整数、字符串、元组等）是通过值传递的，而不是通过引用传递的。这意味着当你将不可变对象传递给函数作为参数时，实际上是将该对象的值复制一份，然后将这个复制的值传递给函数。</span><br><span class="line"></span><br><span class="line">  由于不可变对象的值无法在内存中被修改，因此在函数内部对不可变对象的任何修改都不会影响到原始对象。这意味着函数内部对不可变对象的操作不会影响到函数外部的实际参数。</span><br><span class="line"></span><br><span class="line">  ```python</span><br><span class="line">  def modify_string(s):</span><br><span class="line">      s = s + &quot; World&quot;</span><br><span class="line">  </span><br><span class="line">  my_string = &quot;Hello&quot;</span><br><span class="line">  modify_string(my_string)</span><br><span class="line">  print(my_string)  # 输出 Hello</span><br><span class="line">  </span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h4 id="交换两个变量的值"><a href="#交换两个变量的值" class="headerlink" title="交换两个变量的值"></a>交换两个变量的值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数学方法</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line">a = a + b</span><br><span class="line">b = a - b</span><br><span class="line">a = a - b</span><br><span class="line"><span class="comment"># Python特有</span></span><br><span class="line">a, b = b, a <span class="comment">#先组包，后拆包</span></span><br></pre></td></tr></table></figure><h4 id="组包-pack-和拆包-unpack"><a href="#组包-pack-和拆包-unpack" class="headerlink" title="组包(pack)和拆包(unpack)"></a>组包(pack)和拆包(unpack)</h4><ul><li><p>组包：将多个数据值使用逗号连接的过程，组成元组</p></li><li><p>拆包：将容器中数据值使用多个变量分别保存的过程，注意：变量的个数和容器中数据的个数要保持一致</p></li><li><p>赋值运算符先执行<code>=</code>右边的内容，执行的结果保存到等号左边的变量中</p></li><li><p>注意：对字典进行拆包得到的是字典的键</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dict1=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;Ana&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;height&#x27;</span>:<span class="number">12</span>&#125;</span><br><span class="line">a,b,c=dict1</span><br><span class="line"><span class="built_in">print</span>(a,b,c)</span><br><span class="line"><span class="built_in">print</span>(dict1[a])</span><br><span class="line"><span class="built_in">print</span>(dict1[b])</span><br><span class="line"><span class="built_in">print</span>(dict1[c])</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/pack.png"></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line">c = a, b</span><br><span class="line"><span class="comment"># 组包</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;组包结果：&#x27;</span>, <span class="built_in">type</span>(c), c)</span><br><span class="line"><span class="comment"># 拆包</span></span><br><span class="line">a, b = c  <span class="comment"># a,b等于c容器中的两个数据</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;拆包结果是&#x27;</span>, a, b)</span><br><span class="line"><span class="comment"># 先组包后拆包</span></span><br><span class="line">x, y, z = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment">#将1,2,3组起来，然后存入x,y,z</span></span><br><span class="line"><span class="built_in">print</span>(x, y, z)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/unpack.png"></p><h3 id="局部变量和全局变量"><a href="#局部变量和全局变量" class="headerlink" title="局部变量和全局变量"></a>局部变量和全局变量</h3><ul><li>根据变量定义的位置进行区分</li></ul><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><p>在函数内部定义的变量，称为局部变量。形参属于局部变量</p><p>特点：</p><ol><li>局部变量只能在当前函数内部使用，不能在其他函数和函数外部使用</li><li>在不同函数中，可以定义名字相同的局部变量，两者之间没有明显</li><li>局部变量生存周期（生命周期，作用范围）：在函数被调用的时候，局部变量被创建；函数调用结束，局部变量的值被销毁，不能使用</li></ol><p>函数局部变量的值想要被函数外部使用，需要使用<code>return</code>关键字</p><h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><p>在函数外部定义的变量，称为全局变量</p><p>特点：</p><ol><li>可以在任何函数中读取全局变量的值</li><li>如果在函数中存在和全局变量名字相同的局部变量，在函数中使用的是局部变量的值（就近原则）</li><li>在函数内部想要修改全局变量的引用（数据值），需要添加<code>global</code>关键字对变量进行声明为全局变量。类似列表的<code>.append()</code>操作不改变引用不需要<code>globa</code>的操作（引用传递）</li><li>代码执行的时候全局变量被创建，代码执行结束全局变量被销毁</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">num=<span class="number">10</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">    num=<span class="number">20</span></span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func3</span>():</span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    num=<span class="number">30</span></span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line">func1()</span><br><span class="line">func2()</span><br><span class="line">func3()</span><br><span class="line">func1()</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/variable.png"></p><h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回多个数据值，将多个数据值组包进行返回</span></span><br><span class="line"><span class="keyword">return</span> a,b</span><br></pre></td></tr></table></figure><h1 id="匿名函数（lambda表达式）"><a href="#匿名函数（lambda表达式）" class="headerlink" title="匿名函数（lambda表达式）"></a>匿名函数（lambda表达式）</h1><p>Python 使用 <strong>lambda</strong> 来创建匿名函数。</p><p>lambda 函数是一种小型、匿名的、内联函数，它可以具有任意数量的参数，但只能有一个表达式。</p><p>匿名函数不需要使用 <strong>def</strong> 关键字定义完整函数。</p><p>lambda 函数通常用于编写简单的、单行的函数，通常<strong>在需要函数作为参数传递的情况下使用</strong>，例如在 <code>map()</code>、<code>filter()</code>、<code>reduce()</code> 等函数中。</p><p><strong>lambda 函数特点：</strong></p><ul><li>lambda 函数是匿名的，它们没有函数名称，只能通过赋值给变量或作为参数传递给其他函数来使用。返回值不需要<code>return</code>，一行代码（表达式）的结果就是返回值</li><li>lambda 函数通常只包含一行代码，这使得它们适用于编写简单的函数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> 参数: 一行代码</span><br><span class="line"><span class="comment"># 匿名函数一般作为函数的参数使用</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 无参无返回值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func1()</span><br><span class="line">a = <span class="keyword">lambda</span>: <span class="built_in">print</span>(<span class="string">&#x27;hello lambda&#x27;</span>)</span><br><span class="line">a()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 无参有返回值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(func2())</span><br><span class="line">b = <span class="keyword">lambda</span>: <span class="number">22</span></span><br><span class="line"><span class="built_in">print</span>(b())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 有参无返回值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mysum</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(a + b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysum(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">c = <span class="keyword">lambda</span> a, b: <span class="built_in">print</span>(a + b)</span><br><span class="line">c(<span class="number">10</span>, <span class="number">22</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 有参有返回值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum1</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sum1(<span class="number">2</span>, <span class="number">4</span>))</span><br><span class="line">d = <span class="keyword">lambda</span> a, b: a + b</span><br><span class="line"><span class="built_in">print</span>(d(<span class="number">5</span>, <span class="number">6</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/lambda.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个匿名函数，参数为字典，返回字典中键为age的值</span></span><br><span class="line"><span class="comment"># 参数只是占位作用，定义的时候没有具体值，形参的值是在调用的时候进行传递，此时形参才具有数据值</span></span><br><span class="line"><span class="comment"># 形参的类型就是由实参决定，在函数定义的时候形参只是一个函数符号。想要形参是字典类型，实参是字典类型就可</span></span><br><span class="line"></span><br><span class="line">b = <span class="keyword">lambda</span> x: x.get(<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(b(&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;ann&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/lambda2.png"></p><h2 id="匿名函数作为参数"><a href="#匿名函数作为参数" class="headerlink" title="匿名函数作为参数"></a>匿名函数作为参数</h2><h3 id="列表中的字典排序"><a href="#列表中的字典排序" class="headerlink" title="列表中的字典排序"></a>列表中的字典排序</h3><p><code>sort()</code>方法会原地修改列表，而不是返回一个新的排序后的列表。该方法有两个可选参数：<code>key</code> 和 <code>reverse</code>。</p><ul><li><code>key</code> 参数是一个函数，用于指定排序的比较方式。默认情况下，<code>sort()</code> 方法会按照列表元素的大小进行排序。如果指定了 <code>key</code> 参数，<code>sort()</code> 方法会使用该函数的返回值来比较元素，从而进行排序。</li><li><code>reverse</code> 参数是一个布尔值，用于指定排序的顺序。默认情况下，<code>reverse=False</code>，即升序排序。如果设置为 <code>True</code>，则会进行降序排序。</li></ul><p>对字典来说，比大小需要使用<code>sort()</code>中的key参数。key参数需要传递一个函数，一般是匿名函数。</p><p>字典的排序需要指定依照字典的什么键进行排序，需要使用匿名函数返回字典的键对应的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">user_list = [&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">19</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;wangwu&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">17</span>&#125;]</span><br><span class="line">user_list.sort(key=<span class="keyword">lambda</span> x: x.get(<span class="string">&#x27;name&#x27;</span>), reverse=<span class="literal">True</span>)  <span class="comment"># 降序排序</span></span><br><span class="line"><span class="comment"># 匿名函数的参数是列表中的数据。在sort()函数内部，会调用key函数，将列表中的每个元素作为实参传递给形参，从列表中获取函数的返回值，对返回值进行比大小</span></span><br><span class="line"><span class="built_in">print</span>(user_list)</span><br><span class="line">user_list.sort(key=<span class="keyword">lambda</span> x: x.get(<span class="string">&#x27;age&#x27;</span>), reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(user_list)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/dictsort.png"></p><p><code>ord()</code>可以获取字符对应的ASCII码</p><p><code>chr(ASCII)</code>可以获取ASCII码对应的字符</p><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>面向对象是一种编程思想</p><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><ul><li>类<ul><li>多个特征和行为相同或相似事物的统称</li><li>泛指的（指代多个，而不是一个）</li></ul></li><li>对象<ul><li>具体存在的一个事物，看得见摸得着的</li><li>特指的（指一个）</li><li>由类创建的</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">苹果   -----&gt;类</span><br><span class="line">红苹果  -----&gt;类</span><br><span class="line">张三嘴里吃的苹果 ----&gt;对象</span><br></pre></td></tr></table></figure><h3 id="类的组成"><a href="#类的组成" class="headerlink" title="类的组成"></a>类的组成</h3><ol><li>类名：给多个事物起的名称，在代码中要满足大驼峰命名法</li><li>属性：事物的特征</li><li>方法：事物的行为，类中定义的函数。</li></ol><p>类的抽象（类的设计）：找到类的类名，属性和方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. 小明 今年18岁，身高1.75，每天早上跑完步会去吃东西</span><br><span class="line">2. 小红 今年17岁，身高1.72，不跑步，喜欢吃吃东西</span><br><span class="line">类名：人类（Person）</span><br><span class="line">属性：名字（name）、年龄（age）、身高（height）</span><br><span class="line">方法：跑步（run）、吃（eat）</span><br><span class="line"></span><br><span class="line">一只黄颜色的狗狗叫大黄，看见生人汪汪叫，看见熟人摇尾巴</span><br><span class="line">类名：狗类（dog）</span><br><span class="line">属性：颜色（color）、名字（name）</span><br><span class="line">方法：汪汪叫（bark），摇尾巴（shake）</span><br></pre></td></tr></table></figure><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>python中一切都是对象，即用<code>class</code>定义的类也是对象</p><ol><li>属性：对对象的特征的描述</li><li>方法：对象具有的行为</li></ol><h4 id="对象的划分"><a href="#对象的划分" class="headerlink" title="对象的划分"></a>对象的划分</h4><h5 id="实例对象（实例）"><a href="#实例对象（实例）" class="headerlink" title="实例对象（实例）"></a>实例对象（实例）</h5><p>通过<code>类名()</code>创建的对象即实例对象，简称实例</p><p>创建对象的过程称作类的实例化</p><p>我们平时说的对象就是实例对象</p><p>每个实例都有自己的内存空间，在自己的内存空间中保存自己的属性（实例属性）</p><h5 id="类对象（类名）"><a href="#类对象（类名）" class="headerlink" title="类对象（类名）"></a>类对象（类名）</h5><p>类对象就是类，可以认为是类名（类名包含了整个类）</p><p>在 Python 中，类也是对象。更具体地说，类是一个类型对象，它是由 <code>type</code> 类创建的实例。因此，类对象就是一个实例化了 <code>type</code> 类的对象。</p><p>类对象是python解释器在执行代码的过程中创建的</p><p>类对象的作用：使用类对象创建实例，类对象也有自己的内存空间，可以保存一些属性值（类属性）信息</p><p>在一个代码中，一个类只有一份内存空间</p><h4 id="属性的划分"><a href="#属性的划分" class="headerlink" title="属性的划分"></a>属性的划分</h4><h5 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h5><p>概念：是实例对象具有的属性</p><p>定义和使用：</p><p>在<code>__init__</code>方法中，使用<code>self.属性名= 属性值</code>定义</p><p>在方法中使用<code>self.属性名</code>来调用</p><p>在每个实例当中都存在一份内存空间</p><p>使用时机：基本上99%都是实例属性，通过<code>self</code>定义。多个对象判断这个值是不是一样的，如果都是一样的，同时变化，一般定义为类属性，否则定义为实例属性</p><h5 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a>类属性</h5><p>概念：是类对象具有的属性</p><p>定义和使用：</p><p>在类内部，方法外部定义的变量</p><p><code>类对象.属性名=属性值</code>或<code>类名.属性名=属性值</code></p><p>使用<code>类对象.属性名</code>或<code>类名.属性名</code>调用</p><p>只有类对象中存在一份内存空间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>:</span><br><span class="line">    <span class="comment"># 定义类属性count，记录创建对象的个数</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="comment"># 定义实例属性，实例属性在init方法中定义</span></span><br><span class="line">        self.name = name;</span><br><span class="line">        <span class="comment"># 每创建一个对象就会调用init方法</span></span><br><span class="line">        Dog.count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dog1 = Dog(<span class="string">&#x27;小花&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(Dog.count)</span><br><span class="line">dog2 = Dog(<span class="string">&#x27;大黄&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(Dog.count)</span><br><span class="line">dog2 = Dog(<span class="string">&#x27;小白&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(Dog.count)</span><br><span class="line"><span class="comment"># 可以用 实例对象.类属性名 来获取类属性的值（原因：实例对象属性的查找现在实例属性中找，找到直接使用，没有找到会去类属性里寻找）</span></span><br><span class="line"><span class="built_in">print</span>(dog1.count)</span><br><span class="line"><span class="built_in">print</span>(dog2.count)</span><br><span class="line"><span class="built_in">print</span>(dog3.count)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/class.png"><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/method.png"></p><h4 id="方法的划分"><a href="#方法的划分" class="headerlink" title="方法的划分"></a>方法的划分</h4><h5 id="实例方法（最常用）"><a href="#实例方法（最常用）" class="headerlink" title="实例方法（最常用）"></a>实例方法（最常用）</h5><ul><li><p>定义：在类中直接定义的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">self</span>): <span class="comment"># self一般表示实例对象</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p>定义时机：如果在方法中需要使用实例属性（需要使用self），则这个方法必须定义为实例方法</p></li><li><p>调用：<code>对象.方法名()</code></p></li></ul><h5 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h5><ul><li><p>定义：在方法名字的上方书写<code>@classmethod</code> 装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>:</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">cls</span>): <span class="comment"># cls表示的是类对象（类名）class</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p>定义时机：方法中不需要使用实例属性（即self），用到了类属性，可以将这个方法定义为类方法，也可以定义为实例方法</p></li><li><p>调用：通过类对象调用：<code>类名.方法名()</code>，通过实例对象调用：<code>实例.方法名()</code></p></li></ul><h5 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h5><ul><li><p>定义：在方法名字的上方书写@staticmethod 装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>:</span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(): <span class="comment"># 一般没有参数</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p>使用时机：方法中不需要使用实例属性，也不使用类属性，可以将这个方法定义为静态方法</p></li><li><p>调用：通过类对象调用：<code>类名.方法名()</code>，通过实例对象调用：<code>实例.方法名()</code></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Game</span>:</span><br><span class="line">    top_score = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start_game</span>(<span class="params">cls</span>):</span><br><span class="line">        cls.score = random.randint(<span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;本次游戏得分<span class="subst">&#123;cls.score&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_top_score</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">if</span> cls.score &gt; Game.top_score:</span><br><span class="line">            Game.top_score = cls.score</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;现在的最高分是<span class="subst">&#123;Game.top_score&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;现在的最高分是<span class="subst">&#123;Game.top_score&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_help</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这场游戏的得分都是随机的&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">player1 = Game(<span class="string">&#x27;小王&#x27;</span>)</span><br><span class="line">player1.start_game()</span><br><span class="line">Game.show_top_score()</span><br><span class="line">player1.start_game()</span><br><span class="line">Game.show_top_score()</span><br><span class="line">Game.show_help()</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/game.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Game</span>:</span><br><span class="line">    top_score = <span class="number">0</span></span><br><span class="line">    top_score_player=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start_game</span>(<span class="params">self</span>):</span><br><span class="line">        self.score = random.randint(<span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;本次<span class="subst">&#123;self.name&#125;</span>游戏得分<span class="subst">&#123;self.score&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_top_score</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.score &gt; Game.top_score:</span><br><span class="line">            Game.top_score = self.score</span><br><span class="line">            Game.top_score_player = self.name</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;现在的最高分是<span class="subst">&#123;Game.top_score&#125;</span>,得主是<span class="subst">&#123;Game.top_score_player&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;现在的最高分是<span class="subst">&#123;Game.top_score&#125;</span>,得主是<span class="subst">&#123;Game.top_score_player&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_help</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这场游戏的得分都是随机的&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">player1 = Game(<span class="string">&#x27;小王&#x27;</span>)</span><br><span class="line">player1.start_game()</span><br><span class="line">player1.show_top_score()</span><br><span class="line">player2 = Game(<span class="string">&#x27;小李&#x27;</span>)</span><br><span class="line">player2.start_game()</span><br><span class="line">player2.show_top_score()</span><br><span class="line">player3 = Game(<span class="string">&#x27;小张&#x27;</span>)</span><br><span class="line">player3.start_game()</span><br><span class="line">player3.show_top_score()</span><br><span class="line">player4 = Game(<span class="string">&#x27;小红&#x27;</span>)</span><br><span class="line">player4.start_game()</span><br><span class="line">player4.show_top_score()</span><br><span class="line">Game.show_help()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/playergame.png"></p><h2 id="面向对象的代码步骤"><a href="#面向对象的代码步骤" class="headerlink" title="面向对象的代码步骤"></a>面向对象的代码步骤</h2><ol><li><p>定义类，在定义类之前先设计类</p><p>先定义简单的类，不包含属性，在python中定义类需要使用关键字<code>class</code></p><p>方法：在类中定义的函数，第一个参数是<code>self</code>（实例方法）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">方法名</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p>创建对象，使用第一步定义的类创建对象</p><p>创建对象使用<code>类名()</code>进行创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">变量=类名() <span class="comment">#变量中保存的是对象的地址，一般直接称为对象</span></span><br><span class="line"><span class="comment"># 一个类可以创建多个对象</span></span><br></pre></td></tr></table></figure></li><li><p>通过对象调用方法</p><p><code>对象.方法名()</code></p></li><li><p>案例实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需求：小猫爱吃鱼，小猫要喝水</span></span><br><span class="line"><span class="comment"># 类名：猫类Cat</span></span><br><span class="line"><span class="comment"># 属性：暂无</span></span><br><span class="line"><span class="comment"># 方法：吃鱼eat(),喝水drink()</span></span><br><span class="line"><span class="comment"># 类的定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;小猫爱吃鱼&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">drink</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;小猫要喝水&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建对象</span></span><br><span class="line">bluecat = Cat()</span><br><span class="line">bluecat.eat()</span><br><span class="line">bluecat.drink()</span><br><span class="line">redcat = Cat()</span><br><span class="line">redcat.eat()</span><br><span class="line">redcat.drink()</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/cat.png"></p></li></ol><h3 id="self的说明"><a href="#self的说明" class="headerlink" title="self的说明"></a>self的说明</h3>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;小猫爱吃鱼&quot;</span>)</span><br></pre></td></tr></table></figure><ol><li>从函数的语法上讲，<code>self</code>是形参，就可以是任意的变量名，只不过我们习惯性将这个形参写成<code>self</code></li><li><code>self</code>是普通的形参，但是调用的时候没有传递实参值，原因是python解释器在执行代码的时候，自动**调用这个方法的对象传递给了<code>self</code>**，即<code>self</code>的本质是对象</li><li>只需要确定通过哪个对象调用，对象的引用和<code>self</code>的引用一样</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 类的定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">id</span>(self)&#125;</span>,self&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;小猫爱吃鱼&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建对象</span></span><br><span class="line">bluecat = Cat()</span><br><span class="line">bluecat.eat()  <span class="comment"># bluecat调用eat()方法，解释器就会将bluecat对象传给self</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(bluecat), <span class="string">&#x27;bluecat&#x27;</span>)</span><br><span class="line">a = bluecat  <span class="comment"># 不是创建对象</span></span><br><span class="line">a.eat()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a), <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">redcat = Cat()</span><br><span class="line">redcat.eat()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(redcat), <span class="string">&#x27;redcat&#x27;</span>)</span><br><span class="line"><span class="comment"># self是函数局部变量，创建的对象是全局变量</span></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/image-20240403234809403.png"></p><p>每次创建对象会开辟新的内存空间</p><h3 id="对象的属性操作"><a href="#对象的属性操作" class="headerlink" title="对象的属性操作"></a>对象的属性操作</h3><h4 id="添加属性"><a href="#添加属性" class="headerlink" title="添加属性"></a>添加属性</h4><p><code>对象.属性名 = 属性值</code></p><ul><li><p>类内部添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">self.属性名 = 属性值</span><br><span class="line"># 在类中添加属性一般写在__init__方法中</span><br></pre></td></tr></table></figure></li><li><p>类外部添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象.属性名 = 属性值 <span class="comment"># 一般不使用</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="魔法方法"><a href="#魔法方法" class="headerlink" title="魔法方法"></a>魔法方法</h4><p>python中有一类方法，以两个下划线开头，两个下划线结尾，并且在满足某个条件的情况下会<strong>自动调用</strong>，这类方法称为魔法方法</p><h5 id="init-方法"><a href="#init-方法" class="headerlink" title="__init__方法"></a>__init__方法</h5><ol><li>创建对象后会自动调用</li><li>应用场景：给对象添加属性的（初始方法，构造方法）。某些代码，在每次创建对象后都要执行，可以写在<code>__init__</code>方法中</li><li>如果<code>__init__</code>函数有除了<code>self</code>之外的参数，要记得传参</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>): <span class="comment"># 创建对象才调用</span></span><br><span class="line">        self.name = <span class="string">&#x27;蓝猫&#x27;</span></span><br><span class="line">        self.age = <span class="number">2</span></span><br><span class="line">        <span class="comment"># 下方代码只是为了验证该方法被调用，实际代码中不要书写</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我是__init__,我被调用了&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;小猫的名字是<span class="subst">&#123;self.name&#125;</span>，年龄是<span class="subst">&#123;self.age&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建对象</span></span><br><span class="line">Cat()  <span class="comment"># 创建了对象，但是没有保存</span></span><br><span class="line">bluecat = Cat()</span><br><span class="line">a = bluecat <span class="comment"># 不是在创建对象，不调用__init__()</span></span><br><span class="line">bluecat.show_info()</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/init.png"></p><p>带参数的_<em>init</em>_:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:</span><br><span class="line">    <span class="comment"># 定义添加书属性的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):  <span class="comment"># 创建对象才调用</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        <span class="comment"># 下方代码只是为了验证该方法被调用，实际代码中不要书写</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我是__init__,我被调用了&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;小猫的名字是<span class="subst">&#123;self.name&#125;</span>，年龄是<span class="subst">&#123;self.age&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建对象</span></span><br><span class="line">bluecat = Cat(<span class="string">&#x27;蓝猫&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">bluecat.show_info()</span><br><span class="line">redcat = Cat(<span class="string">&#x27;红猫&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">redcat.show_info()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/image-20240403235108819.png"></p><h5 id="str-方法"><a href="#str-方法" class="headerlink" title="__str__方法"></a>__str__方法</h5><ol><li>使用<code>print()</code>打印对象后会自动调用</li><li>应用场景：在这个方法中一般书写对象的属性信息，即打印对象的时候想要查看的信息在此方法中定义。如果类中没有定义此方法，<code>print(对象)</code>输出对象的引用地址</li><li>这个方法必须返回一个字符串</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:</span><br><span class="line">    <span class="comment"># 定义添加书属性的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):  <span class="comment"># 创建对象才调用</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;小猫的名字是<span class="subst">&#123;self.name&#125;</span>，年龄是<span class="subst">&#123;self.age&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建对象</span></span><br><span class="line">bluecat = Cat(<span class="string">&#x27;蓝猫&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(bluecat)</span><br><span class="line">redcat = Cat(<span class="string">&#x27;红猫&#x27;</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(redcat)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/str.png"></p><h5 id="del-方法"><a href="#del-方法" class="headerlink" title="__del__方法"></a>__del__方法</h5><p><code>__del__</code>方法（析构方法），对象被删除销毁时，自动调用。一种是程序运行结束，所有对象被销毁；一种是使用<code>del</code>删除对象（如果对象有多个名字即多个变量引用同个对象，需要把所有的对象都删除）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__init__被调用了&#x27;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>没了&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = Demo(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">b = Demo(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">c = Demo(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="keyword">del</span> a</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;代码运行结束&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/del.png"></p><h5 id="小明跑步"><a href="#小明跑步" class="headerlink" title="小明跑步"></a>小明跑步</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, weight</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.weight = weight</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;姓名：<span class="subst">&#123;self.name&#125;</span>，体重是<span class="subst">&#123;self.weight&#125;</span>公斤&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 跑步减少0.5公斤</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>跑了5km，体重减少了&#x27;</span>)</span><br><span class="line">        self.weight -= <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>大餐一顿，体重增加了&#x27;</span>)</span><br><span class="line">        self.weight += <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xm = Person(<span class="string">&#x27;小明&#x27;</span>, <span class="number">75.0</span>) <span class="comment"># 调用__init__</span></span><br><span class="line"><span class="built_in">print</span>(xm) <span class="comment">#调用__str__</span></span><br><span class="line">xm.run()</span><br><span class="line"><span class="built_in">print</span>(xm) <span class="comment">#调用__str__</span></span><br><span class="line">xm.eat()</span><br><span class="line"><span class="built_in">print</span>(xm) <span class="comment">#调用__str__</span></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/xiaoming.png"></p><h5 id="摆放家具"><a href="#摆放家具" class="headerlink" title="摆放家具"></a>摆放家具</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">House</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, housetype, square</span>):</span><br><span class="line">        self.housetype = housetype  <span class="comment"># 房子的户型</span></span><br><span class="line">        self.square = square  <span class="comment"># 房子的总面积</span></span><br><span class="line">        self.leftsquare = square  <span class="comment"># 房子剩余的面积，初始值等于总面积</span></span><br><span class="line">        self.furniture = []  <span class="comment"># 房子有的家具</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">f&#x27;房子的户型是<span class="subst">&#123;self.housetype&#125;</span>,房子的总面积是<span class="subst">&#123;self.square&#125;</span>平方米,&#x27;</span></span><br><span class="line">                <span class="string">f&#x27;房子的剩余面积是<span class="subst">&#123;self.leftsquare&#125;</span>平方米,家具有<span class="subst">&#123;self.furniture&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_item</span>(<span class="params">self, item</span>):  <span class="comment"># 添加家具</span></span><br><span class="line">        <span class="keyword">if</span> self.leftsquare &gt; item.square:</span><br><span class="line">            self.furniture.append(item.name)  <span class="comment"># 将家具加入列表</span></span><br><span class="line">            self.leftsquare -= item.square  <span class="comment"># 剩余面积计算</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;剩余面积不够了！添加失败！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HouseItem</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, square</span>):</span><br><span class="line">        self.name = name  <span class="comment"># 家具的名字</span></span><br><span class="line">        self.square = square  <span class="comment"># 家具的占据面积</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;家具是<span class="subst">&#123;self.name&#125;</span>,占据面积是<span class="subst">&#123;self.square&#125;</span>平方米&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bed = HouseItem(<span class="string">&#x27;席梦思&#x27;</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(bed)</span><br><span class="line">chest = HouseItem(<span class="string">&#x27;衣柜&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(chest)</span><br><span class="line">table = HouseItem(<span class="string">&#x27;餐桌&#x27;</span>, <span class="number">1.5</span>)</span><br><span class="line"><span class="built_in">print</span>(table)</span><br><span class="line">newhouse = House(<span class="string">&#x27;一室一厅&#x27;</span>, <span class="number">98</span>)</span><br><span class="line">newhouse.add_item(bed)</span><br><span class="line"><span class="built_in">print</span>(newhouse)</span><br><span class="line">newhouse.add_item(bed)</span><br><span class="line"><span class="built_in">print</span>(newhouse)</span><br><span class="line">newhouse.add_item(chest)</span><br><span class="line"><span class="built_in">print</span>(newhouse)</span><br><span class="line">newhouse.add_item(table)</span><br><span class="line"><span class="built_in">print</span>(newhouse)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/furniture.png"></p><h5 id="登录案例"><a href="#登录案例" class="headerlink" title="登录案例"></a>登录案例</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LoginPage</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, username, password, code</span>):</span><br><span class="line">        self.name = username</span><br><span class="line">        self.password = password</span><br><span class="line">        self.code = code</span><br><span class="line">        self.btn = <span class="string">&#x27;登录&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;1. 输入用户名<span class="subst">&#123;self.name&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;2. 输入密码<span class="subst">&#123;self.password&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;3. 输入验证码<span class="subst">&#123;self.code&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;4. 点击按钮<span class="subst">&#123;self.btn&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">login = LoginPage(<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;8888&#x27;</span>)</span><br><span class="line">login.login()</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/logincase.png"></p><h4 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h4><p><code>对象.属性名</code></p><ul><li>类内部添加：<code>self.属性名</code></li><li>类外部添加：<code>对象.属性名</code>，一般很少使用</li><li>给对象进行属性添加后，对象内存地址不变</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">id</span>(self)&#125;</span>,self&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;小猫<span class="subst">&#123;self.name&#125;</span>爱吃鱼&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建对象</span></span><br><span class="line">bluecat = Cat()</span><br><span class="line"><span class="comment"># 给蓝猫添加 name属性</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">id</span>(bluecat)&#125;</span>,bluecat&#x27;</span>)</span><br><span class="line">bluecat.name = <span class="string">&#x27;蓝猫&#x27;</span></span><br><span class="line">bluecat.eat()</span><br><span class="line">redcat = Cat()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">id</span>(redcat)&#125;</span>,redcat&#x27;</span>)</span><br><span class="line">redcat.name = <span class="string">&#x27;红猫&#x27;</span></span><br><span class="line">redcat.eat()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/dcats.png"></p><h3 id="私有和公有"><a href="#私有和公有" class="headerlink" title="私有和公有"></a>私有和公有</h3><p>在Python中定义的方法和属性，可以添加访问控制权限（即在什么地方可以使用这个属性和方法）</p><ul><li>公有权限<ul><li>直接书写的方法和属性都是公有的</li><li>公有的方法和属性可以在任意地方访问和使用</li></ul></li><li>私有权限<ul><li>在类内部，属性名或者方法名前面加上两个下划线<code>__</code>，就变为私有</li><li>私有方法和属性只能在当前类内部使用</li><li>在类外部操作私有属性，在类内部定义公有方法去操作私有属性</li></ul></li><li>什么时候定义私有？<ul><li><ol><li>某个属性或者方法不写在类外部被访问和使用，将其定义为私有</li><li>测试中一般不怎么使用，直接公有</li><li>开发中根据需求文档去确定什么作为私有</li></ol></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.__age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;名字：<span class="subst">&#123;self.name&#125;</span>,年龄<span class="subst">&#123;self.__age&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xm = Person(<span class="string">&#x27;小明&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="comment"># 类内部可以使用__age</span></span><br><span class="line"><span class="built_in">print</span>(xm)</span><br><span class="line"><span class="comment"># 类外部不能直接使用私有属性</span></span><br><span class="line"><span class="built_in">print</span>(xm.__age) </span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/private.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="comment"># 私有的本质：解释器执行代码，发现属性名或者方法前有两个__，会将这个名字重命名</span></span><br><span class="line">        <span class="comment"># 会在这个名字前面加上_类名前缀，即self.__age=self._Person__age</span></span><br><span class="line">        self.__age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;名字：<span class="subst">&#123;self.name&#125;</span>,年龄<span class="subst">&#123;self.__age&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xm = Person(<span class="string">&#x27;小明&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="comment"># 类内部可以使用__age</span></span><br><span class="line"><span class="built_in">print</span>(xm)</span><br><span class="line">xm.__age = <span class="number">20</span> <span class="comment">#不是修改私有属性，是添加了一个名叫__age的公有属性</span></span><br><span class="line"><span class="built_in">print</span>(xm)</span><br><span class="line"><span class="built_in">print</span>(xm._Person__age)</span><br><span class="line">xm._Person__age=<span class="number">19</span> <span class="comment">#这样才从外部访问修改了私有属性</span></span><br><span class="line"><span class="built_in">print</span>(xm._Person__age)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/xiaomingprivate.png"></p><h4 id="dict-魔法属性"><a href="#dict-魔法属性" class="headerlink" title="__dict__魔法属性"></a>__dict__魔法属性</h4><p>可以将对象具有的属性组成字典返回</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xm = Person(<span class="string">&#x27;小明&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="comment"># 类内部可以使用__age</span></span><br><span class="line"><span class="built_in">print</span>(xm.__dict__)</span><br><span class="line">xm.__age = <span class="number">20</span> <span class="comment">#不是修改私有属性，是添加了一个公有属性__age</span></span><br><span class="line"><span class="built_in">print</span>(xm.__dict__)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="D:\blog\source_posts\Python\dictpri.png" alt="image-20240307213405447"></p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承描述的是类与类之间的关系，可以减少代码的冗余，实现代码的重用。</p><p>子类继承父类之后，子类的对象可以直接使用父类中定义的公有属性和方法。</p><p>单继承：一个类只继承一个父类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>(<span class="title class_ inherited__">父类名</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>: <span class="comment">#没有写父类，但是有父类object，object类是python中最原始的类</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>): <span class="comment">#类B继承类A，A类是父类（基类），B类为子类（派生类）</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;哐哐吃&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bark</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;汪汪叫&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XiaoTianQuan</span>(<span class="title class_ inherited__">Dog</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ani = Animal()</span><br><span class="line">ani.eat()</span><br><span class="line">dog = Dog()</span><br><span class="line">dog.eat()  <span class="comment"># 调用父类的方法</span></span><br><span class="line">dog.bark()  <span class="comment"># 调用自己的方法</span></span><br><span class="line">xiaotian = XiaoTianQuan()</span><br><span class="line">xiaotian.eat()</span><br><span class="line">xiaotian.bark()</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/heir.png"></p><h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><p>在子类中定义了和父类中名字相同的方法就是重写。</p><p>当父类中的方法不能满足子类对象的需求，所以重写。</p><p>重写之后，调用子类自己的方法，不调用父类中的方法</p><h4 id="重写的方式"><a href="#重写的方式" class="headerlink" title="重写的方式"></a>重写的方式</h4><ul><li><p>覆盖：父类中的功能完全抛弃，重新书写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bark</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;汪汪叫&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XiaoTianQuan</span>(<span class="title class_ inherited__">Dog</span>):</span><br><span class="line">    <span class="comment"># 覆盖重写</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bark</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;嗷嗷嗷&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dog = Dog()</span><br><span class="line">dog.bark()  <span class="comment"># 调用自己的方法</span></span><br><span class="line">xiaotian = XiaoTianQuan()</span><br><span class="line">xiaotian.bark()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/override.png"></p></li><li><p>扩展：父类中的功能还调用，只是添加新的功能（更常见）。直接在子类中定义和父类中名字相同的方法，在合适的地方调用父类中的方法 <code>super().方法()</code>。然后书写添加的新功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bark</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;汪汪叫&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;汪汪叫&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XiaoTianQuan</span>(<span class="title class_ inherited__">Dog</span>):</span><br><span class="line">    <span class="comment"># 扩展重写</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bark</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;嗷嗷嗷&#x27;</span>)</span><br><span class="line">        <span class="built_in">super</span>().bark()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;嗷嗷嗷&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dog = Dog()</span><br><span class="line">dog.bark()  <span class="comment"># 调用自己的方法</span></span><br><span class="line">xiaotian = XiaoTianQuan()</span><br><span class="line">xiaotian.bark()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/polymorphism.png"></p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>不同类的对象对相同的方法做出不同的响应。简单来说，多态性使得能够以统一的方式使用不同类型的对象，而不必关心它们具体的类型。</p><p>多态性使得我们可以编写更加灵活和通用的代码，因为我们不需要关心对象的具体类型，只需要知道它们共享相同的接口（即方法），就可以以统一的方式对待它们。</p><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><p>文件通常是以字节序列的形式存储在存储设备（如硬盘、固态硬盘、闪存驱动器等）上的。</p><p>文本文件：能使用记事本软件打开，能使用记事本转换为文字。txt、md、py</p><p>二进制文件：不能使用记事本打开的。exe、mp3、mp4、png、jpg</p><h2 id="文件操作的步骤"><a href="#文件操作的步骤" class="headerlink" title="文件操作的步骤"></a>文件操作的步骤</h2><h3 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h3><p>将文件从磁盘中读取到内存中（CPU只能对内存执行操作）</p><p>文件流一般写入try中，因为文件流容易报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">open</span>(file,mode=<span class="string">&#x27;r&#x27;</span>,encoding=<span class="literal">None</span>)</span><br><span class="line">&gt; 参数file:打开的文件，类型是字符串，文件路径可以是相对路径（推荐），也可以是绝对路径</span><br><span class="line">&gt; 参数mode:默认参数（缺省参数），表示打开文件的方式</span><br><span class="line">&gt; r:read 只读打开</span><br><span class="line">    &gt; w:write 只写打开</span><br><span class="line">    &gt; a:append 追加打开，在文件的末尾写入内容</span><br><span class="line">&gt; 参数encoding:编码方式,文字和二进制如何转换</span><br><span class="line">&gt;gbk:将一个汉字转换为两个字节二进制</span><br><span class="line">    &gt;utf-<span class="number">8</span>:将一个汉字转换为三个字节二进制</span><br><span class="line">&gt; 返回值:返回的是文件对象，后续对文件的操作都需要这个对象</span><br></pre></td></tr></table></figure><h3 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h3><h4 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h4><p>向文件中写入指定的内容。</p><p>前提：文件的打开方式是 w 或者 a</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">文件对象.write(<span class="string">&#x27;写入文件的内容&#x27;</span>)</span><br><span class="line"><span class="comment"># 返回值：写入文件的字符数，一般不关注</span></span><br><span class="line"><span class="comment"># 注意w方式打开文件：</span></span><br><span class="line"><span class="number">1.</span> 文件不存在会直接创建</span><br><span class="line"><span class="number">2.</span> 文件存在会覆盖原文件</span><br><span class="line"><span class="comment"># 注意a方式打开文件：</span></span><br><span class="line"><span class="number">1.</span> 文件不存在会直接创建</span><br><span class="line"><span class="number">2.</span> 文件存在会在末尾写入内容</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">f.write(<span class="string">&#x27;good good&#x27;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="D:\blog\source_posts\Python\file.png" alt="image-20240308123816685"></p><h4 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h4><p>将文件中的内容读取出来</p><p>前提：文件的打开方式是 r </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">文件对象.read(n)</span><br><span class="line"><span class="comment"># 参数n:表示读取多少个字符，一般不写表示读取全部内容</span></span><br><span class="line"><span class="comment"># 返回值：读取到的文件内容，类型：字符串</span></span><br><span class="line"><span class="comment"># 注意r方式打开文件，文件不存在会报错</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">buf = f.read()</span><br><span class="line"><span class="built_in">print</span>(buf)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="D:\blog\source_posts\Python\fileclose.png" alt="image-20240308141004764"></p><h3 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">关闭文件:将文件占用的资源进行清理，同时会保存文件，文件关闭之后这个文件对象就不能使用了</span><br><span class="line">文件对象.close()</span><br></pre></td></tr></table></figure><h3 id="with-open打开文件"><a href="#with-open打开文件" class="headerlink" title="with open打开文件"></a>with open打开文件</h3><p>好处：不用自己去书写关闭文件的代码，会自动进行关闭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file, mode, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> 变量:</span><br><span class="line">    <span class="comment"># 缩进中读取/写入文件</span></span><br><span class="line"><span class="comment"># 缩进中的代执行结束，出缩进之后文件会自动关闭</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&#x27;day day up&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/fileread.png"></p><h3 id="按行读取"><a href="#按行读取" class="headerlink" title="按行读取"></a>按行读取</h3><p>一次读取一行内容，<code>文件对象.readline()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    buf=f.readline()</span><br><span class="line">    <span class="built_in">print</span>(buf)</span><br><span class="line">    <span class="built_in">print</span>(f.readline())</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/readline.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> f:  <span class="comment"># 按行遍历</span></span><br><span class="line">        <span class="built_in">print</span>(i, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># read()和readline()读到文件末尾会返回空的字符串</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        buf = f.readline()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(buf) == <span class="number">0</span>: <span class="comment">#if buf:容器中的数据个数为0为空</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(buf,end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/rls.png"></p><h2 id="json文件"><a href="#json文件" class="headerlink" title="json文件"></a>json文件</h2><p>json&#x3D;’java script object notation’,是JavaScript对象表示法，是一种<strong>基于文本，独立于语言的轻量级数据交换格式</strong>。</p><ul><li>基于文本：是一个文本文件，不能包含图片，音视频等</li><li>独立于语言：不是某个语言特有的，每种编程语言都可以使用</li><li>轻量级：相同的数据和其他格式相比占用的大小比较小</li><li>数据交换格式：后端程序员给前端的数据（json,html,xml）</li></ul><p>json文件也是一种文本文件，可以直接使用<code>read()</code>和<code>write()</code>操作，但是不方便。json文件有独特的读取和写入方法</p><p>常用在做测试的时候，将测试数据定义为json文件格式，使用代码读取json文件，即读取测试数据，进行传参（参数化）</p><h3 id="json语法规则"><a href="#json语法规则" class="headerlink" title="json语法规则"></a>json语法规则</h3><ul><li>json文件的后缀是.json</li><li>json文件中的主要数据类型是对象（{}类似Python中的字典）和数组（[]类似列表），对象和数组可以互相嵌套</li><li>一个json文件是一个对象或者数组，即json文件的最外层要么是一个大括号{}，要么是一个数组[]</li><li>json中的对象是由键值对组成的，每个数据之间使用,隔开，但是最后一个数据后面不要写逗号</li><li>json中的字符串必须使用””双引号</li><li>json中的其他数据类型：数字类型（int float）、字符串string（str）、布尔类型（true、false）、None（null）</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小明&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;isFan&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hobbies&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;听歌&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;游戏&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;购物&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;睡觉&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;country&quot;</span><span class="punctuation">:</span> <span class="string">&quot;China&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Shanghai&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="读取json文件"><a href="#读取json文件" class="headerlink" title="读取json文件"></a>读取json文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 导包 import jason</span><br><span class="line">2. 读打开文件</span><br><span class="line">3. 读文件</span><br><span class="line">json.load(文件对象)</span><br><span class="line"># 返回的是字典（对象）或者列表（数组）</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;info.json&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># buf = f.read()</span></span><br><span class="line">    <span class="comment"># print(type(buf), buf)</span></span><br><span class="line">    result = json.load(f)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(result))</span><br><span class="line">    <span class="built_in">print</span>(result.get(<span class="string">&#x27;name&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(result.get(<span class="string">&#x27;age&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(result.get(<span class="string">&#x27;address&#x27;</span>).get(<span class="string">&#x27;city&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/json.png"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小明&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;isFan&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hobbies&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;听歌&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;游戏&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;购物&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;睡觉&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;country&quot;</span><span class="punctuation">:</span> <span class="string">&quot;China&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Shanghai&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小红&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">17</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;isFan&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hobbies&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;听歌&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;学习&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;购物&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;睡觉&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;country&quot;</span><span class="punctuation">:</span> <span class="string">&quot;China&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Beijing&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;info.json&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># buf = f.read()</span></span><br><span class="line">    <span class="comment"># print(type(buf), buf)</span></span><br><span class="line">    result = json.load(f)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(result))</span><br><span class="line">    <span class="keyword">for</span> info <span class="keyword">in</span> result:</span><br><span class="line">        <span class="built_in">print</span>(info.get(<span class="string">&#x27;name&#x27;</span>), info.get(<span class="string">&#x27;age&#x27;</span>), info.get(<span class="string">&#x27;address&#x27;</span>).get(<span class="string">&#x27;city&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/jsonprint.png"></p><h4 id="测试读取案例"><a href="#测试读取案例" class="headerlink" title="测试读取案例"></a>测试读取案例</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;正确的用户名密码&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;admin&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;expect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;登录成功&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;错误的用户名&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;root&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;expect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;登录失败&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;错误的密码&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;admin&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123123&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;expect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;登录失败&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;错误的用户名和密码&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;aaa&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123123&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;expect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;登录失败&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取用户名、密码和预期结果，组成[(),(),()]格式（自动化参数化需要的格式）</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.json&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># buf = f.read()</span></span><br><span class="line">    <span class="comment"># print(type(buf), buf)</span></span><br><span class="line">    result = json.load(f)</span><br><span class="line">    test_list = []</span><br><span class="line">    <span class="keyword">for</span> info <span class="keyword">in</span> result:</span><br><span class="line">        test_tuple = (info.get(<span class="string">&#x27;username&#x27;</span>), info.get(<span class="string">&#x27;password&#x27;</span>), info.get(<span class="string">&#x27;expect&#x27;</span>))</span><br><span class="line">        test_list.append(test_tuple)</span><br><span class="line">    <span class="built_in">print</span>(test_list)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/jsonload.png"></p><h3 id="json的写入"><a href="#json的写入" class="headerlink" title="json的写入"></a>json的写入</h3><p><code>文件对象.write(字符串)</code>不能直接将python的列表和字典作为参数传递。想要将python中的数据类型存为json文件，需要使用json提供的方法，不再使用write</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 导包 import json </span><br><span class="line">2. 写(w)方式打开文件</span><br><span class="line">3. 写入</span><br><span class="line">json.dump(python中的数据类型,文件对象)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">my_list = [(<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;登录成功&#x27;</span>), (<span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;登录失败&#x27;</span>), (<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;123123&#x27;</span>, <span class="string">&#x27;登录失败&#x27;</span>),</span><br><span class="line">           (<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;123123&#x27;</span>, <span class="string">&#x27;登录失败&#x27;</span>)]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;info1.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># json.dump(my_list, f, ensure_ascii=False) #单行显示</span></span><br><span class="line">    <span class="comment"># 显示缩进</span></span><br><span class="line">    json.dump(my_list, f, ensure_ascii=<span class="literal">False</span>,indent=<span class="number">2</span>) <span class="comment"># indent是缩进的意思</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/jsonwrite.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dump</span>(<span class="params">obj, fp, *, skipkeys=<span class="literal">False</span>, ensure_ascii=<span class="literal">True</span>, check_circular=<span class="literal">True</span>,</span></span><br><span class="line"><span class="params">        allow_nan=<span class="literal">True</span>, cls=<span class="literal">None</span>, indent=<span class="literal">None</span>, separators=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        default=<span class="literal">None</span>, sort_keys=<span class="literal">False</span>, **kw</span>)</span><br></pre></td></tr></table></figure><p>函数参数列表里，*后面的参数只能以关键字的形式传参，不能使用位置传参</p><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p>程序运行时，python解释器遇到一个错误，会停止程序的执行，并且提示一些错误信息，这就是异常。</p><p>程序停止执行并且提示错误信息，这个动作是抛出异常（<code>raise</code>）。程序遇到异常，默认动作是终止代码程序的执行。捕获异常可以使代码继续执行，不会终止运行</p><h2 id="异常捕获"><a href="#异常捕获" class="headerlink" title="异常捕获"></a>异常捕获</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    可能发生异常的代码</span><br><span class="line"><span class="keyword">except</span>: <span class="comment"># 任何类型的异常都能去捕获</span></span><br><span class="line">    发生了异常执行的代码</span><br><span class="line">   </span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    可能发生异常的代码</span><br><span class="line"><span class="keyword">except</span> 异常类型: <span class="comment"># 只能捕获特定类型及其子类的异常，如果不是这个异常还是会报错</span></span><br><span class="line">    发生了异常执行的代码</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        num=<span class="built_in">input</span>(<span class="string">&#x27;请输入数字&#x27;</span>)</span><br><span class="line">        num=<span class="built_in">int</span>(num)</span><br><span class="line">        <span class="built_in">print</span>(num)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;请输入正确数字&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;后续代码仍然运行&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/image-20240404105655420.png"></p><p>可以针对不同的异常错误，运行单独的代码处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    可能发生的异常的代码</span><br><span class="line"><span class="keyword">except</span> 异常类型<span class="number">1</span>:</span><br><span class="line">    发生异常类型<span class="number">1</span>执行的代码</span><br><span class="line"><span class="comment"># Exception是常见异常类的父类，这里书写Exception可以捕获常见的所有异常，as 变量，变量是一个异常类的对象，print(变量)可以打印异常信息</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> 变量:</span><br><span class="line">    发生其他类型的异常，执行的代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    没有发生异常执行的代码</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    不论如何都会执行的代码</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    可能发生的异常的代码</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    发生异常执行的代码</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    num=<span class="built_in">input</span>(<span class="string">&#x27;请输入数字&#x27;</span>)</span><br><span class="line">    num=<span class="built_in">int</span>(num)</span><br><span class="line">    num=<span class="number">20</span>/num</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;发生了异常，请输入正确数字&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;不要输入0&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/error.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        num=<span class="built_in">input</span>(<span class="string">&#x27;请输入数字&#x27;</span>)</span><br><span class="line">        num=<span class="built_in">int</span>(num)</span><br><span class="line">        num=<span class="number">20</span>/num</span><br><span class="line">        <span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;错误信息为：<span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;没有发生异常&quot;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我都会执行&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/image-20240404110003623.png"></p><h2 id="异常传递"><a href="#异常传递" class="headerlink" title="异常传递"></a>异常传递</h2><p>python会将异常进行传递。在函数嵌套调用的过程中，被调用的函数发生了异常，如果没有捕获，会将这个异常向外层传递。如果传到最外层还没有捕获，才报错。</p><h2 id="抛出异常raise"><a href="#抛出异常raise" class="headerlink" title="抛出异常raise"></a>抛出异常raise</h2><p>让代码报错</p><h1 id="模块和包"><a href="#模块和包" class="headerlink" title="模块和包"></a>模块和包</h1><p>模块（Module）是一个包含 Python 代码的文件。这些文件通常包含了一些函数、类和变量的定义，可以被其他 Python 程序导入并使用。模块使得代码的组织和管理更加方便，同时也可以提高代码的可重用性。</p><p>模块名同样也是一个标识符，需要符合标识符的命名规则</p><p>在模块中定义的全局变量、函数、类都是提供给外界直接使用的工具</p><p>模块就好比是工具包，要使用这个工具包的工具需要先导入这个模块</p><p>自己写的代码想要作为模块使用，代码的名字需要满足标识符的规则</p><h2 id="模块的导入"><a href="#模块的导入" class="headerlink" title="模块的导入"></a>模块的导入</h2><h3 id="import导入"><a href="#import导入" class="headerlink" title="import导入"></a>import导入</h3><p>使用模块中的内容：<code>模块名.工具名</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 模块<span class="number">1</span>名,模块<span class="number">2</span>名</span><br><span class="line"><span class="comment"># 使用模块中的内容：</span></span><br><span class="line">模块名.工具名</span><br><span class="line"><span class="comment"># 举例</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">random.randint(a,b)</span><br><span class="line">json.load</span><br><span class="line">json.dump</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> 工具名</span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">工具名</span><br><span class="line"><span class="comment"># 举例</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> load,dump</span><br><span class="line">randint(a, b)</span><br><span class="line">load()</span><br><span class="line">dump()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可能存在多个模块之间有名字相同的工具，会造成冲突</span></span><br><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> * <span class="comment"># 将模块中的所有内容都导入</span></span><br><span class="line"><span class="comment"># 举例</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> *</span><br><span class="line">randint(a, b)</span><br><span class="line">load()</span><br><span class="line">dump()</span><br></pre></td></tr></table></figure><p>对于导入的模块和工具可以使用<code>as</code>起别名，如果<strong>起别名，原来的名字就不能使用了</strong></p><h3 id="模块的查找顺序"><a href="#模块的查找顺序" class="headerlink" title="模块的查找顺序"></a>模块的查找顺序</h3><p>在导入模块的时候，会先在当前目录中找模块，如果找到，就直接使用。如果没有找到，就回去系统的目录中进行查找，找到就直接使用，没有找到会报错</p><p>注意：在定义代码文件的时候，代码名字不能和要导入的模块名字相同，会造成混淆产生命名冲突，Python 解释器会优先使用当前目录下的同名文件，而不是标准库或其他模块中的同名模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tool.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是tools模块中的func方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">play</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>在快乐的玩耍&#x27;</span>)</span><br><span class="line"><span class="comment">######</span></span><br><span class="line"><span class="keyword">import</span> tools</span><br><span class="line"></span><br><span class="line">tools.func()</span><br><span class="line">dog1 = tools.Dog(<span class="string">&#x27;大黄&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">dog1.play()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/package.png"></p><h2 id="name-作用"><a href="#name-作用" class="headerlink" title="__name__作用"></a>__name__作用</h2><p>每个代码文件都是一个模块，在导入模块的时候，会执行模块中的方法。</p><p><code>__name__</code>变量：</p><ol><li>是python解释器自动维护的变量</li><li><code>__name__ </code>变量，如果代码直接运行，值是<code>&quot;__main__&quot;</code></li><li><code>__name__ </code>变量，如果代码是被导入运行，值是模块名（代码名）</li></ol><h3 id="包package"><a href="#包package" class="headerlink" title="包package"></a>包package</h3><p>包（Package）是一种包含多个模块的目录结构。通常情况下，包是一个目录，包含了一个特殊的 <code>__init__.py</code> 文件和多个模块文件。<code>__init__.py</code> 文件可以为空，也可以包含一些初始化代码。包可以嵌套，即一个包可以包含其他包。</p><p>在python使用的时候不需要可以区分是包还是模块，因为使用方式是一样的</p><p><code>random</code>是一个模块<code>json</code>是一个包</p><h1 id="UnitTest框架"><a href="#UnitTest框架" class="headerlink" title="UnitTest框架"></a>UnitTest框架</h1><p>是python中自带的单元测试框架。pytest是第三方框架，需要安装。</p><p>对于开发来说，单元测试框架主要用来做单元测试。对测试来说，unittest框架的作用是自动化脚本（用例代码）执行框架，管理运行多个测试用例</p><ul><li>为什么使用UnitTest框架？<ul><li>能够组织多个用例去执行</li><li>提供丰富的断言方法（让程序代码替人工自动的判断预期结果和实际结果是否相符）</li><li>能够生成测试报告</li></ul></li></ul><h2 id="UnitTest核心-组成"><a href="#UnitTest核心-组成" class="headerlink" title="UnitTest核心(组成)"></a>UnitTest核心(组成)</h2><ol><li><p>TestCase（最核心的模块）</p><p><code>unittest.TestCase</code> 类是编写测试用例的基础。你可以通过创建继承自 <code>TestCase</code> 的子类，并在子类中定义测试方法来编写测试用例。每个测试方法都应该以 <code>test_</code> 开头，这样 unittest 才能识别它们并执行。</p></li><li><p>TestSuite</p><p>测试套件是一组测试用例的集合。你可以使用 <code>unittest.TestSuite</code> 类来创建一个测试套件，并将多个测试用例添加到这个套件中。这样可以方便地对多个测试用例进行组织和管理。</p></li><li><p>TestRunner</p><p>测试运行器负责执行测试套件中的测试用例，并生成测试报告。unittest 提供了命令行接口和 GUI 工具来运行测试，并且可以生成详细的测试报告，包括测试结果、运行时间、覆盖率等信息。</p></li><li><p>TestLoader</p><p>TestLoader（测试加载），对TestSuite（测试套件）功能的补充。自动搜索加载的一种方式，从指定的模块或目录中加载测试用例，并根据一定的规则将它们组织成测试套件。它可以自动发现符合命名规范的测试用例，并将它们添加到测试套件中，以便后续执行。</p></li><li><p>Fixture</p><p>Fixture（测试夹具），书写在TestCase代码中，是一个代码结构，可以在每个方法执行前后都会执行的内容（前置代码）。unittest 提供了 <code>setUp()</code> 和 <code>tearDown()</code> 方法，它们分别在每个测试方法执行前后自动调用，用于准备测试环境和清理测试</p></li></ol><h3 id="TestCase-测试用例"><a href="#TestCase-测试用例" class="headerlink" title="TestCase(测试用例)"></a>TestCase(测试用例)</h3><p>在这个代码文件中书写真正的用例代码，代码文件的名字必须按照标识符的规则来书写</p><p>步骤：</p><ol><li>导包（unittest）</li><li>自定义测试类，<strong>新建测试类必须继承unittest.TestCase</strong>。运行的时候主模块是TestCase</li><li>在测试类中书写测试方法，<strong>测试方法名称必须以test_开头</strong>。</li><li>执行用例</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">学习TestCase模块的书写方法</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 1. 导包（unittest）</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="comment"># 2. 自定义测试类,需要继承UnitTest模块中的TestCase类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDemo</span>(unittest.TestCase):</span><br><span class="line">    <span class="comment"># 3. 在测试类中书写测试方法,即用例代码。目前用print代替</span></span><br><span class="line">    <span class="comment"># 测试方法必须以test 开头，_连接</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_method1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;测试方法1&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_method2</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;测试方法2&#x27;</span>)</span><br><span class="line"><span class="comment"># 4. 执行用例</span></span><br><span class="line"><span class="comment"># 4.1 将光标放在类名后边运行，会执行类中的所有测试方法</span></span><br><span class="line"><span class="comment"># 4.2 将光标放在方法名后边运行，只执行当前的方法</span></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/tc1.png"><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/tc2.png"></p><h3 id="TestSuite-TestRunner"><a href="#TestSuite-TestRunner" class="headerlink" title="TestSuite&amp;TestRunner"></a>TestSuite&amp;TestRunner</h3><p>TestSuite（测试套件）:管理、打包、组装TestCase（测试用例）文件</p><p>TestRunner（测试执行，测试运行）:执行TestSuite（测试套件）</p><p>步骤：</p><ol><li>导包（unittest）</li><li>实例化（创建对象）套件对象</li><li>使用套件对象添加用例方法</li><li>实例化运行对象</li><li>使用运行对象去执行套件对象</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">用来学习testsuite和testrunner</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 1. 导包（unittest）</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> day1.testcase1 <span class="keyword">import</span> TestDemo1</span><br><span class="line"><span class="keyword">from</span> day1.testcase2 <span class="keyword">import</span> TestDemo2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 实例化（创建对象）套件对象</span></span><br><span class="line">suite=unittest.TestSuite()</span><br><span class="line"><span class="comment"># 3. 使用套件对象添加用例方法</span></span><br><span class="line"><span class="comment"># 方式一：套件对象.addtest(测试类名(&#x27;方法名&#x27;)),建议直接复制相关名字</span></span><br><span class="line">suite.addTest(TestDemo1(<span class="string">&#x27;test_method1&#x27;</span>))</span><br><span class="line">suite.addTest(TestDemo1(<span class="string">&#x27;test_method2&#x27;</span>))</span><br><span class="line">suite.addTest(TestDemo2(<span class="string">&#x27;test_method1&#x27;</span>))</span><br><span class="line">suite.addTest(TestDemo2(<span class="string">&#x27;test_method2&#x27;</span>))</span><br><span class="line"><span class="comment"># 方法二：添加一个类里所有以test开头的方法</span></span><br><span class="line">suite.addTest(unittest.makeSuite(ClassName))</span><br><span class="line"><span class="comment"># 4. 实例化运行对象</span></span><br><span class="line">runner=unittest.TextTestRunner()</span><br><span class="line"><span class="comment"># 5. 使用运行对象去执行套件对象</span></span><br><span class="line"><span class="comment"># 运行对象.run(套件对象)</span></span><br><span class="line">runner.run(suite)</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/ts1.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">用来学习testsuite和testrunner</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 1. 导包（unittest）</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> day1.testcase1 <span class="keyword">import</span> TestDemo1</span><br><span class="line"><span class="keyword">from</span> day1.testcase2 <span class="keyword">import</span> TestDemo2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 实例化（创建对象）套件对象</span></span><br><span class="line">suite = unittest.TestSuite()</span><br><span class="line"><span class="comment"># 3. 使用套件对象添加用例方法</span></span><br><span class="line"><span class="comment"># 方法二：将一个测试类中的所有方法添加，套件对象.addTest(unittest.makeSuite(测试类名)))</span></span><br><span class="line"><span class="comment"># 缺点：makeSuite()不会提示</span></span><br><span class="line">suite.addTest(unittest.makeSuite(TestDemo1))</span><br><span class="line">suite.addTest(unittest.makeSuite(TestDemo2))</span><br><span class="line"><span class="comment"># 4. 执行测试套件</span></span><br><span class="line">runner = unittest.TextTestRunner()</span><br><span class="line"><span class="comment"># 5. 使用运行对象去执行套件对象</span></span><br><span class="line"><span class="comment"># 运行对象.run(套件对象)</span></span><br><span class="line">runner.run(suite)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/tr.png"></p><p>运行结果中的。表示用例通过，F表示用例不通过（运行结果和预期结果不符合），E代表用例代码有问题。</p><p><code>makeSuite()</code><strong>要被python官方弃用！！</strong></p><p><img src="keep/source/images/star.gif" data-original="D:\blog\source_posts\Python\tl.png" alt="image-20240309175553547"></p><h3 id="TestLoader（测试加载）"><a href="#TestLoader（测试加载）" class="headerlink" title="TestLoader（测试加载）"></a>TestLoader（测试加载）</h3><p>TestLoader（测试加载）和TestSuite作用是一样的，对TestSuite功能的补充，用来组装测试用例。如果TestCase的代码文件有很多，可以使用TestLoader</p><p>步骤</p><ol><li>导包</li><li>实例化测试加载对象并添加用例，得到的是Suite对象</li><li>实例化运行对象</li><li>运行对象执行套件对象</li></ol><p>在一个项目中TestCase的代码一般放在一个单独的目录（case）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 导包</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 实例化加载对象并添加用例</span></span><br><span class="line"><span class="comment"># unittest.TestLoader().discover(&#x27;用例所在的路径&#x27;,&#x27;用例的代码文件名&#x27;)</span></span><br><span class="line"><span class="comment"># 用例所在的路径建议使用相对路径，用例的代码文件名可以使用*（任意多个任意字符）通配符。defaultTestLoader = unittest.TestLoader()</span></span><br><span class="line">suite = unittest.TestLoader().discover(<span class="string">&#x27;./case&#x27;</span>, <span class="string">&#x27;*.py&#x27;</span>)</span><br><span class="line"><span class="comment"># 3. 实例化运行对象</span></span><br><span class="line">runner = unittest.TextTestRunner()</span><br><span class="line"><span class="comment"># 4. 执行</span></span><br><span class="line">runner.run(suite)</span><br><span class="line"><span class="comment"># 可以将3、4步变为1步</span></span><br><span class="line"><span class="comment"># 即跳过创建runner对象，unittest.TextTestRunner().run(suite)</span></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/fixture.png"></p><blockquote><p>TestLoader与TestSuite区别</p><ol><li>TestSuite需要手动添加测试用例（可以添加测试类，也可以添加测试类中的某个方法</li><li>TestLoader搜索指定目录下指定开头.py文件并添加测试类中的以test开头的所有的测试方法，不能指定添加方法</li></ol></blockquote><p><code>makeSuite()</code>方法要被弃用，可以使用<code>TestLoader</code>添加用例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTestCase</span>(unittest.TestCase):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_case1</span>(<span class="params">self</span>):</span><br><span class="line">        self.assertEqual(<span class="number">1</span> + <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_case2</span>(<span class="params">self</span>):</span><br><span class="line">        self.assertTrue(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_case3</span>(<span class="params">self</span>):</span><br><span class="line">        self.assertFalse(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个测试套件</span></span><br><span class="line">suite = unittest.TestLoader().loadTestsFromTestCase(MyTestCase)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 TextTestRunner 运行测试套件，并输出测试结果</span></span><br><span class="line">runner = unittest.TextTestRunner()</span><br><span class="line">runner.run(suite)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Fixture（测试夹具）"><a href="#Fixture（测试夹具）" class="headerlink" title="Fixture（测试夹具）"></a>Fixture（测试夹具）</h3><p>是一个概述，对一个测试用例环境的初始化和销毁就是一个Fixture。在某些特点的情况下会自动去执行</p><h4 id="方法级别"><a href="#方法级别" class="headerlink" title="方法级别"></a>方法级别</h4><p>写在方法里，在每个测试方法（用例代码）执行前后都会自动调用的结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法执行之前</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setup</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment"># 每个测试方法执行之前都会执行</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 方法执行之后</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">teardown</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment"># 每个测试方法执行之后都会执行</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="类级别"><a href="#类级别" class="headerlink" title="类级别"></a>类级别</h4><p>在每个测试类中所有方法执行前后都会自动调用的结构（整个类中前后各一次）写在类里面</p><p>类级别的Fixture方法是一个类方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 类中所有方法之前</span></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setupClass</span>(<span class="params">cls</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 类中所有方法之后</span></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">teardownClass</span>(<span class="params">cls</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="模块级别"><a href="#模块级别" class="headerlink" title="模块级别"></a>模块级别</h4><p>在每个代码文件执行前后执行的代码结构，需要写在类的外面，直接定义函数即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 代码文件之前</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setupModule</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 代码文件之后</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">teardownModule</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>方法级别和类级别的前后方法不需要同时出现，根据用例代码的需要自行的选择使用</p><h2 id="登录案例-1"><a href="#登录案例-1" class="headerlink" title="登录案例"></a>登录案例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> day1.login_1 <span class="keyword">import</span> login</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginTest</span>(unittest.TestCase):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUp</span>(<span class="params">self</span>):<span class="comment"># 方法级</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;每个测试方法执行之前都会先调用的方法&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;输入网址...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDown</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;每个测试方法执行之后都会先调用的方法&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;关闭网站...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_username_password_ok</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;输入正确用户名和密码点击登录1&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> login(<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>) == <span class="string">&#x27;登录成功&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;pass&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;fail&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUpClass</span>(<span class="params">cls</span>): <span class="comment">#类级别</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;1. 打开浏览器&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDownClass</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;5. 关闭浏览器&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_username_error</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;输入错误用户名和密码点击登录2&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> login(<span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>) == <span class="string">&#x27;登录失败&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;pass&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;fail&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_password_error</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> login(<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;123123&#x27;</span>) == <span class="string">&#x27;登录失败&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;pass&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;fail&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_username_password_error</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> login(<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;123123&#x27;</span>) == <span class="string">&#x27;登录失败&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;pass&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;fail&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/loginlogin.png"></p><h2 id="测试add"><a href="#测试add" class="headerlink" title="测试add"></a>测试add</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">学习TestCase模块的书写方法</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 1. 导包（unittest）</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> tools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 自定义测试类,需要继承UnitTest模块中的TestCase类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestAdd</span>(unittest.TestCase):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_method1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> tools.add(<span class="number">1</span>, <span class="number">2</span>)==<span class="number">3</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;测试通过&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;测试不通过&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_method2</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> tools.add(<span class="number">10</span>,<span class="number">20</span>)==<span class="number">30</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;测试通过&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;测试不通过&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_method3</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> tools.add(<span class="number">2</span>, <span class="number">3</span>)==<span class="number">5</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;测试通过&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;测试不通过&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/addtest.png"></p><h2 id="login函数测试"><a href="#login函数测试" class="headerlink" title="login函数测试"></a>login函数测试</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">username,password</span>):</span><br><span class="line">    <span class="keyword">if</span> username ==<span class="string">&#x27;admin&#x27;</span> <span class="keyword">and</span> password==<span class="string">&#x27;123456&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;登录成功&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;登录失败&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> day1.login_1 <span class="keyword">import</span> login</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginTest</span>(unittest.TestCase):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_username_password_ok</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> login(<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>) == <span class="string">&#x27;登录成功&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;pass&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;fail&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_username_error</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> login(<span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>) == <span class="string">&#x27;登录失败&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;pass&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;fail&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_password_error</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> login(<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;123123&#x27;</span>) == <span class="string">&#x27;登录失败&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;pass&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;fail&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_username_password_error</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> login(<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;123123&#x27;</span>) == <span class="string">&#x27;登录失败&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;pass&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;fail&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/logintest.png"></p><h1 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h1><p>让程序代替人工自动判断预期结果和实际结果是否相符</p><p>断言的结果：True-&gt;用例通过，False-&gt;代码抛出异常，用例不通过</p><p>python自带的断言，判断两个字符串是否相等<code>assert &quot;hello&quot; == &quot;hello&quot;</code> <code>assert &quot;hello&quot;==&quot;hello1&quot; &quot;出错啦&quot;</code></p><p>判断是否包含<code>assert &quot;h&quot; in &quot;hello&quot;</code></p><p>判断是否为True、False <code>assertTrue</code> <code>assert1</code> <code>assertFalse</code> <code>assert0</code></p><p>在unittest中使用断言，都需要通过<code>self.断言方法</code>来试验</p><h2 id="assertEqual"><a href="#assertEqual" class="headerlink" title="assertEqual"></a>assertEqual</h2><p><code>assertEqual(预期结果,实际结果)</code>，判断预期结果和实际结果是否相等</p><p>如果相等，用例通过；如果不相等，用例不通过，抛出异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> day1.login_1 <span class="keyword">import</span> login</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginTest</span>(unittest.TestCase):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_username_password_ok</span>(<span class="params">self</span>):</span><br><span class="line">        self.assertEqual(<span class="string">&#x27;登录成功&#x27;</span>,login(<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_username_error</span>(<span class="params">self</span>):</span><br><span class="line">        self.assertEqual(<span class="string">&#x27;登录失败&#x27;</span>,login(<span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>) )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_password_error</span>(<span class="params">self</span>):</span><br><span class="line">        self.assertEqual(<span class="string">&#x27;登录失败&#x27;</span>, login(<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;123123&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_username_password_error</span>(<span class="params">self</span>):</span><br><span class="line">        self.assertEqual(<span class="string">&#x27;登录失败&#x27;</span>, login(<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;123123&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/asserte.png"></p><p>失败：</p><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/fail.png"></p><h2 id="assertIn"><a href="#assertIn" class="headerlink" title="assertIn"></a>assertIn</h2><p><code>assertIn(预期结果,实际结果)</code>判断预期结果是否包含于实际结果</p><p>如果包含，用例通过；如果不不包含，用例不通过，抛出异常</p><h2 id="assertTrue"><a href="#assertTrue" class="headerlink" title="assertTrue"></a>assertTrue</h2><p><code>assertTrue(ex)</code>判断ex是否为True</p><h1 id="参数化"><a href="#参数化" class="headerlink" title="参数化"></a>参数化</h1><p>解决相同业务逻辑，不同业务数据</p><p>在测试方法中，使用变量代替具体的测试数据，使用传参的方法将测试数据传递给方法的变量，可以减少相似代码的书写。测试数据一般放在json文件中，使用代码读取json文件，提取要的数据[(),(),()],[[],[]]</p><p>unittest框架本身不支持参数化，需要安装插件完成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 导包 unittest/parameterized</span><br><span class="line"><span class="number">2.</span> 定义测试类</span><br><span class="line"><span class="number">3.</span> 书写测试方法(用到的测试数据使用变量来代替)</span><br><span class="line"><span class="number">4.</span> 组织测试数据并传参</span><br></pre></td></tr></table></figure><p>login_1代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">username,password</span>):</span><br><span class="line">    <span class="keyword">if</span> username ==<span class="string">&#x27;admin&#x27;</span> <span class="keyword">and</span> password==<span class="string">&#x27;123456&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;登录成功&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;登录失败&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 导包 unittest/parameterized</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> parameterized <span class="keyword">import</span> parameterized</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> day1.login_1 <span class="keyword">import</span> login</span><br><span class="line"></span><br><span class="line"><span class="comment"># 组织测试数据,按位置传参</span></span><br><span class="line">data = [</span><br><span class="line">    (<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;登录成功&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;登录失败&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;123123&#x27;</span>, <span class="string">&#x27;登录失败&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;123123&#x27;</span>, <span class="string">&#x27;登录失败&#x27;</span>)</span><br><span class="line"></span><br><span class="line">]  <span class="comment"># 几组数据就有几组用例</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 定义测试类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestLogin</span>(unittest.TestCase):</span><br><span class="line">    <span class="comment"># 4. （装饰器@修饰方法）组织测试数据并传参（列表类型,多个参数为列表嵌套元组）</span></span><br><span class="line"><span class="meta">    @parameterized.expand(<span class="params">data</span>)</span></span><br><span class="line">    <span class="comment"># 3. 书写测试方法(用到的测试数据使用变量来代替)按位置传参</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_login</span>(<span class="params">self, username, password, expect</span>):</span><br><span class="line">        self.assertEqual(expect, login(username, password))</span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/parameterized.png"></p><h2 id="通过json导入"><a href="#通过json导入" class="headerlink" title="通过json导入"></a>通过json导入</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.json</span></span><br><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;正确的用户名密码&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;admin&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;expect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;登录成功&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;错误的用户名&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;root&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;expect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;登录失败&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;错误的密码&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;admin&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123123&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;expect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;登录失败&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;错误的用户名和密码&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;aaa&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123123&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;expect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;登录失败&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 导包 unittest/parameterized</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> parameterized <span class="keyword">import</span> parameterized</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> day1.login_1 <span class="keyword">import</span> login</span><br><span class="line"></span><br><span class="line"><span class="comment"># 组织测试数据,按位置传参</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_data</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.json&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        res = json.load(f)</span><br><span class="line">        data = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> res: <span class="comment">#每个i是一个字典元素</span></span><br><span class="line">            testtuple = (i.get(<span class="string">&#x27;username&#x27;</span>), i.get(<span class="string">&#x27;password&#x27;</span>), i.get(<span class="string">&#x27;expect&#x27;</span>))</span><br><span class="line">            data.append(testtuple)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 定义测试类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestLogin</span>(unittest.TestCase, ):</span><br><span class="line">    <span class="comment"># 4. 组织测试数据并传参（装饰器@）</span></span><br><span class="line"><span class="meta">    @parameterized.expand(<span class="params">build_data(<span class="params"></span>)</span>)</span></span><br><span class="line">    <span class="comment"># 3. 书写测试方法(用到的测试数据使用变量来代替)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_login</span>(<span class="params">self, username, password, expect</span>):</span><br><span class="line">        self.assertEqual(expect, login(username, password))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/jsonim.png"></p><h1 id="跳过"><a href="#跳过" class="headerlink" title="跳过"></a>跳过</h1><p>对于一些未完成的或者不满足测试条件的测试函数和测试类可以跳过执行，使用装饰器完成。代码书写在TestCase中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接将测试函数标记为跳过</span></span><br><span class="line"><span class="meta">@unittest.skip(<span class="params"><span class="string">&#x27;跳过原因&#x27;</span></span>)</span></span><br><span class="line"><span class="comment"># 根据条件判断测试函数是否跳过，判断条件成立跳过</span></span><br><span class="line"><span class="meta">@unittest.skipIf(<span class="params">condition, reason</span>)</span></span><br><span class="line"><span class="comment"># 跳过可以用来修饰类</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line">version = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDemo</span>(unittest.TestCase):</span><br><span class="line"><span class="meta">    @unittest.skip(<span class="params"><span class="string">&#x27;没有什么原因就是不想执行&#x27;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;method 1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @unittest.skipIf(<span class="params">version &gt;= <span class="number">30</span>, <span class="string">&#x27;版本号新，不用测试&#x27;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_2</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;method 2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_3</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;method 3&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/skip1.png"></p><h1 id="测试报告"><a href="#测试报告" class="headerlink" title="测试报告"></a>测试报告</h1><p>自带的测试报告：只有单独运行TestCase的代码才能生成测试报告，组装打包的测试用例不能生成</p><p>HTMLTestRunner是一个类库，生成第三方的的测试报告需要用到。</p><ol><li>获取第三方的测试运行模块，将其放在代码的目录中</li><li>导包</li><li>使用套件对象，加载对象添加用例方法</li><li>实例化第三方的运行对象并运行套件</li></ol><p>组织用例文件（TestCase），书写参数化，书写断言，书写Fixture，书写跳过，如果单个测试文件直接运行，得到测试报告，如果有多个测试文件需要使用套件对象组装、加载对象组装运行生成测试报告。接下来要运行对象，使用第三方运行类进行运行。运行对象.run(套件对象)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 获取第三方的测试运行模块，将其放在代码的目录中</span></span><br><span class="line"><span class="comment"># 2. 导包</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> HtmlTestRunner <span class="keyword">import</span> HTMLTestRunner</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 使用套件对象，加载对象添加用例方法</span></span><br><span class="line"></span><br><span class="line">suite = unittest.defaultTestLoader.discover(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;parametertest.py&#x27;</span>)</span><br><span class="line"><span class="comment"># 4. 实例化第三方的运行对象并运行套件  # 测试报告的文件对象（open）要使用wb打开（二进制方法书写）</span></span><br><span class="line">HTMLTestRunner().run(suite)  <span class="comment"># 运行对象</span></span><br></pre></td></tr></table></figure><p>unittest自带报告：</p><p><img src="keep/source/images/star.gif" data-original="/2024/03/11/Python/unitreport.png"></p><p>html报告：</p><p><img src="keep/source/images/star.gif" data-original="/htmlreport.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Python介绍&quot;&gt;&lt;a href=&quot;#Python介绍&quot; class=&quot;headerlink&quot; title=&quot;Python介绍&quot;&gt;&lt;/a&gt;Python介绍&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;python常用于回归测试。&lt;/p&gt;
&lt;p&gt;python+sele</summary>
      
    
    
    
    <category term="Python Learning" scheme="http://example.com/categories/Python-Learning/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Java入门(二)</title>
    <link href="http://example.com/2022/04/02/Java%E5%85%A5%E9%97%A8-%E4%BA%8C/"/>
    <id>http://example.com/2022/04/02/Java%E5%85%A5%E9%97%A8-%E4%BA%8C/</id>
    <published>2022-04-02T11:05:53.000Z</published>
    <updated>2022-04-25T17:19:32.109Z</updated>
    
    <content type="html"><![CDATA[<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>在 Java 中，一个类可以由其他类派生。如果你要创建一个类，而且已经存在一个类具有你所需要的属性或方法，那么你可以将新创建的类继承该类。</p><p>利用继承的方法，可以重用已存在类的方法和属性，而不用重写这些代码。<strong>被继承的类称为超类（super class），派生类称为子类（sub class）。</strong></p><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>在 Java 中，接口可理解为<strong>对象间相互通信的协议</strong>。接口在继承中扮演着很重要的角色。</p><p><strong>接口只定义派生要用到的方法，但是方法的具体实现完全取决于派生类。</strong></p><h1 id="Java对象和类"><a href="#Java对象和类" class="headerlink" title="Java对象和类"></a>Java对象和类</h1><ul><li><strong>对象</strong>：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</li><li><strong>类</strong>：类是一个模板，它描述一类对象的行为和状态。、<ul><li><strong>局部变量</strong>：在<strong>方法、构造方法或者语句块中</strong>定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。</li><li><strong>成员变量</strong>：成员变量是定义<strong>在类中，方法体之外的变量</strong>。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。</li><li><strong>类变量</strong>：类变量也声明<strong>在类中，方法体之外，但必须声明为 static 类型。</strong></li></ul></li></ul><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><p>对象是根据类创建的。在Java中，使用关键字 new 来创建一个新的对象。创建对象需要以下三步：</p><ul><li><strong>声明</strong>：声明一个对象，包括对象名称和对象类型。</li><li><strong>实例化</strong>：使用关键字 new 来创建一个对象。</li><li><strong>初始化</strong>：使用 new 创建对象时，会调用构造方法初始化对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Puppy</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Puppy</span><span class="params">(String name)</span>&#123;</span><br><span class="line">      <span class="comment">//这个构造器仅有一个参数：name</span></span><br><span class="line">      System.out.println(<span class="string">&quot;小狗的名字是 : &quot;</span> + name ); </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">      <span class="comment">// 下面的语句将创建一个Puppy对象</span></span><br><span class="line">      <span class="type">Puppy</span> <span class="variable">myPuppy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Puppy</span>( <span class="string">&quot;tommy&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="访问实例变量和方法"><a href="#访问实例变量和方法" class="headerlink" title="访问实例变量和方法"></a>访问实例变量和方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 实例化对象 */</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">referenceVariable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Constructor</span>();</span><br><span class="line"><span class="comment">/* 访问类中的变量 */</span></span><br><span class="line">referenceVariable.variableName;</span><br><span class="line"><span class="comment">/* 访问类中的方法 */</span></span><br><span class="line">referenceVariable.methodName();</span><br></pre></td></tr></table></figure><h2 id="源文件声明规则"><a href="#源文件声明规则" class="headerlink" title="源文件声明规则"></a>源文件声明规则</h2><ul><li>一个源文件中只能有一个 public 类</li><li>一个源文件可以有多个非 public 类</li><li>源文件的名称应该和 public 类的类名保持一致。例如：源文件中 public 类的类名是 Employee，那么源文件应该命名为Employee.java。</li><li>如果一个类定义在某个包中，那么 package 语句应该在源文件的首行。</li><li>如果源文件包含 import 语句，那么应该放在 package 语句和类定义之间。如果没有 package 语句，那么 import 语句应该在源文件中最前面。</li><li>import 语句和 package 语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h1&gt;&lt;p&gt;在 Java 中，一个类可以由其他类派生。如果你要创建一个类，而且已经存在一个类具有你所需要的属性或方法，那么你可以将新创建的类继承该类。&lt;</summary>
      
    
    
    
    <category term="Java Learning" scheme="http://example.com/categories/Java-Learning/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java入门(一)</title>
    <link href="http://example.com/2022/03/26/Java%E5%85%A5%E9%97%A8-%E4%B8%80/"/>
    <id>http://example.com/2022/03/26/Java%E5%85%A5%E9%97%A8-%E4%B8%80/</id>
    <published>2022-03-26T11:20:52.000Z</published>
    <updated>2022-04-21T16:37:00.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JDK、JRE、JVM"><a href="#JDK、JRE、JVM" class="headerlink" title="JDK、JRE、JVM"></a>JDK、JRE、JVM</h1><p>JDK：Java Development Kit，包含了JRE和JVM，扩充了开发工具</p><p>JRE：Java Runtime Environment，运行环境</p><p>JVM：Java Virtual Machine，可以用软件或硬件来实现，模拟了一个小巧的CPU处理JAVA。跨平台的核心，屏蔽底层系统的差别。</p><h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><ol><li><p>新建一个Java文件，文件的后缀名为.java，如Helloworld.java</p></li><li><p>输入代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Helloworld</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123; <span class="comment">// 程序通过mai方法执行</span></span><br><span class="line">System.out.print(<span class="string">&quot;Hello,world!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在控制台输入命令进行编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac Helloworld.java <span class="comment">#编译成功控制台不输出消息，会在文件夹里生成一个Helloworld类</span></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2022/03/26/Java%E5%85%A5%E9%97%A8-%E4%B8%80/p1.png"></p></li><li><p>在控制台输入命令运行类</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java Helloworld <span class="comment">#输出结果会在控制台中显示</span></span><br></pre></td></tr></table></figure><p><img src="keep/source/images/star.gif" data-original="/2022/03/26/Java%E5%85%A5%E9%97%A8-%E4%B8%80/p2.png"></p></li></ol><hr><p><strong>注意</strong>：</p><ul><li><p>Java是<strong>大小写敏感的。</strong></p></li><li><p><strong>所有的方法名都应该以小写字母开头。</strong>如果方法名含有若干单词，则<strong>后面的每个单词首字母大写。</strong></p></li><li><p><strong>类名的首字母应该大写</strong>。如果类名由若干单词组成，那么<strong>每个单词的首字母应该大写，例如 MyFirstJavaClass</strong></p></li><li><p><strong>源文件名和代码里的类名必须保持一致，且首字母大写</strong></p></li><li><p><strong>主方法入口</strong>：所有的 Java 程序由 <strong>public static void main(String[] args)</strong> 方法开始执行。</p></li></ul><h1 id="Java基础语法"><a href="#Java基础语法" class="headerlink" title="Java基础语法"></a>Java基础语法</h1><p><strong>对象</strong>：对象是类的一个<strong>实例</strong>，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</p><p><strong>类</strong>：类是一个模板，它描述一类对象的行为和状态。</p><p><strong>方法</strong>：方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。</p><p><strong>实例变量</strong>：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。</p><h1 id="Java程序运行机制"><a href="#Java程序运行机制" class="headerlink" title="Java程序运行机制"></a>Java程序运行机制</h1><p>Java既有编译型(Complie)的特点，又有解释型(Interpret)的特点。.java的源文件经过Java编译器成为.class文件。.class文件放入虚拟机的类装载器中，类加载进JVM。字节码校验器会检查代码是否出错，最后解释器会将代码解释给操作系统平台。<em><strong>先编译，再解释</strong></em>。</p><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>注释并不会被执行</p><ul><li><p>单行注释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是单行注释</span></span><br></pre></td></tr></table></figure></li><li><p>多行注释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>JavaDoc文档注释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span> Helloworld</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Author</span> Rinta</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><p>Java所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符。</p><p>Java中的关键字：</p><p><img src="keep/source/images/star.gif" data-original="/2022/03/26/Java%E5%85%A5%E9%97%A8-%E4%B8%80/guanjianzi.png"></p><hr><p><strong>注意：</strong></p><ul><li>所有的标识符应该以<strong>字母（A-Z或a-z），美元符（$），或下划线（_）开始</strong></li><li>首字母之后可以是<strong>字母（A-Z或a-z），美元符（$），下划线（_）或数字</strong>的随意组合</li><li><strong>不能使用关键字作为变量名或方法名</strong></li><li><strong>标识符大小写敏感</strong></li><li>可以使用中文命名，不建议</li></ul><h1 id="Java修饰符"><a href="#Java修饰符" class="headerlink" title="Java修饰符"></a>Java修饰符</h1><p>Java可以使用修饰符来修饰类中方法和属性。主要有两类修饰符：</p><ul><li>访问控制修饰符 : default, public , protected, private</li><li>非访问控制修饰符 : final, abstract, static, synchronized</li></ul><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>Java是强类型语言，要求变量的使用严格符合规定，所有变量必须先定义后才能使用，</p><h2 id="基本类型（primitive-type）"><a href="#基本类型（primitive-type）" class="headerlink" title="基本类型（primitive type）"></a>基本类型（primitive type）</h2><ul><li><p>数值类型</p><ul><li><p>整数类型</p><ul><li><p>byte 一个字节范围：-128 - 127</p></li><li><p>short 两个字节范围：-32768 - 32767</p></li><li><p>int 四个字节范围：-2147483648 - 2147483647</p></li><li><p>long 八个字节范围：-9223372036854775808 - 9223372036854775807 </p><p>在数字后面加L，如：long num1 &#x3D; 12344321L;</p></li></ul></li><li><p>浮点类型</p><ul><li><p>float 占4个字节</p><p>在数字后面要加F，如：float num2 &#x3D; 22.3f;</p></li><li><p>double 占8个字节</p></li></ul></li><li><p>字符类型 </p><ul><li>char 占2个字节</li></ul></li></ul></li><li><p>boolean类型：占1位，值只有true和false</p></li></ul><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>转换的从低到高为：byte,short,char—&gt; int —&gt;long—&gt;float—&gt;double，低（范围）向高转换是自动转换，高到低要强制转换</p><p><strong>注意：</strong></p><ul><li>不能对布尔值进行转换</li><li>不能把对象类型转换成不相干的类型</li><li>高到低要用到强制转换</li><li>转换的时候可能存在<strong>内存溢出</strong>，或者<strong>精度问题</strong></li></ul><h2 id="引用类型（reference-type）"><a href="#引用类型（reference-type）" class="headerlink" title="引用类型（reference type）"></a>引用类型（reference type）</h2><ul><li>类</li><li>接口</li><li>数组</li></ul><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><ul><li><p>整数拓展</p><ul><li>二进制：0b，八进制：0，十六进制：0x</li></ul></li><li><p>浮点数拓展</p><ul><li>eg. 银行业务怎么表示？BigDecimal 数学工具类</li></ul></li></ul><p><strong>最好完全避免用浮点数进行比较</strong></p><ul><li><p>字符类拓展</p><ul><li>所有的字符本质上是数字，Unicode编码，从U0000到UFFFF</li><li>\u 转义字符表示</li></ul></li><li><p>布尔值拓展</p><ul><li><pre><code class="java">boolean flag = true;if(falg)&#123;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 变量</span><br><span class="line"></span><br><span class="line">每个变量必须声明其类型，Java变量是程序中最基本的存储单元，要素包括变量名，变量类型和作用域。</span><br><span class="line"></span><br><span class="line">Java 中主要有如下几种类型的变量</span><br><span class="line"></span><br><span class="line">- 局部变量</span><br><span class="line">- 类变量（静态变量）</span><br><span class="line">- 成员变量（非静态变量）</span><br><span class="line"></span><br><span class="line">**注意：**</span><br><span class="line"></span><br><span class="line">- 每个变量都有类型，可以是基本类型，也可以是引用类型</span><br><span class="line">- 变量名必须是合法的标识符</span><br><span class="line">- 变量声明是一条完整的语句，分号结束</span><br><span class="line"></span><br><span class="line">## 变量作用域</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">public class Variable(</span><br><span class="line">static int allClicks = 0;   // 类变量</span><br><span class="line">String str = &quot;hello world&quot;;  //  实例变量</span><br><span class="line">    public void method()&#123;</span><br><span class="line">        int i = 0;  //  局部变量</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>类变量</p><p>关键词：static，从属于类</p><ul><li>类变量也称为<strong>静态变量，在类中以 static 关键字声明，但必须在方法之外</strong>。</li><li>无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。</li><li>静态变量除了被声明为常量外很少使用，<strong>静态变量是指声明为 public&#x2F;private，final 和 static 类型的变量。静态变量初始化后不可改变</strong>。</li><li>静态变量储存在静态存储区。经常被声明为常量，很少单独使用 static 声明变量。</li><li>静态变量在第一次被访问时创建，在程序结束时销毁。</li><li>与实例变量具有相似的可见性。但为了对类的使用者可见，大多数静态变量声明为 public 类型。</li><li>默认值和实例变量相似。数值型变量默认值是 0，布尔型默认值是 false，引用类型默认值是 null。变量的值可以在声明的时候指定，也可以在构造方法中指定。此外，静态变量还可以在静态语句块中初始化。</li><li>静态变量可以通过：<em>ClassName.VariableName</em>的方式访问。</li><li>类变量被声明为 public static final 类型时，类变量名称一般建议使用大写字母。如果静态变量不是 public 和 final 类型，其命名方式与实例变量以及局部变量的命名方式一致。</li></ul></li><li><p>实例变量</p><p>独立于方法之外的变量，类的里面，从属于对象 </p><ul><li><p>实例变量声明在一个类中，但在方法、构造方法和语句块之外；</p></li><li><p>当一个对象被实例化之后，每个实例变量的值就跟着确定；</p></li><li><p>实例变量在对象创建的时候创建，在对象被销毁的时候销毁；</p></li><li><p><strong>实例变量的值应该至少被一个方法、构造方法或者语句块引用，使得外部能够通过这些方式获取实例变量信息；</strong></p></li><li><p><strong>实例变量可以声明在使用前或者使用后；</strong></p></li><li><p>访问修饰符可以修饰实例变量；</p></li><li><p>实例变量<strong>对于类中的方法、构造方法或者语句块是可见的。</strong>一般情况下应该<strong>把实例变量设为私有。通过使用访问修饰符可以使实例变量对子类可见；</strong></p></li><li><p>实例变量具有默认值。数值型变量的默认值是0，布尔型变量的默认值是false，引用类型变量的默认值是null。变量的值可以在声明时指定，也可以在构造方法中指定；</p></li><li><p>实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名：ObejectReference.VariableName。</p></li></ul></li><li><p>局部变量</p><p>类的方法中的变量，必须声明和初始化值。</p><ul><li>局部变量声明在方法、构造方法或者语句块中；</li><li>局部变量在方法、构造方法、或者语句块被执行的时候创建，当它们执行完成后，变量将会被销毁；</li><li><strong>访问修饰符不能用于局部变量；</strong></li><li>局部变量<strong>只在声明它的方法、构造方法或者语句块中可见</strong>；</li><li>局部变量是在栈上分配的。</li><li>局部变量没有默认值，所以局部变量被声明后，必须<strong>经过初始化，才可以使用。</strong></li></ul></li></ul><h1 id="Java数组"><a href="#Java数组" class="headerlink" title="Java数组"></a>Java数组</h1><p>数组是储存在堆上的对象，可以保存多个同类型变量。</p><h1 id="Java枚举"><a href="#Java枚举" class="headerlink" title="Java枚举"></a>Java枚举</h1><p>Java 5.0引入了枚举，枚举限制变量只能是预先设定好的值。使用枚举可以减少代码中的 bug。</p><h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><p>初始化后不能再改变值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// final 常量名=值;</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">double</span> PI=<span class="number">3.14</span></span><br></pre></td></tr></table></figure><h1 id="Java运算符"><a href="#Java运算符" class="headerlink" title="Java运算符"></a>Java运算符</h1><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><table><thead><tr><th align="left">操作符</th><th align="center">描述</th><th align="center">例子（A&#x3D;10,B&#x3D;20）</th></tr></thead><tbody><tr><td align="left">+</td><td align="center">加法 - 相加运算符两侧的值</td><td align="center">A + B 等于 30</td></tr><tr><td align="left">-</td><td align="center">减法 - 左操作数减去右操作数</td><td align="center">A – B 等于 -10</td></tr><tr><td align="left">*</td><td align="center">乘法 - 相乘操作符两侧的值</td><td align="center">A * B等于200</td></tr><tr><td align="left">&#x2F;</td><td align="center">除法 - 左操作数除以右操作数</td><td align="center">B &#x2F; A等于2</td></tr><tr><td align="left">％</td><td align="center">取余 - 左操作数除以右操作数的余数</td><td align="center">B%A等于0</td></tr><tr><td align="left">++</td><td align="center">自增: 操作数的值增加1</td><td align="center">B++ 或 ++B 等于 21</td></tr><tr><td align="left">–</td><td align="center">自减: 操作数的值减少1</td><td align="center">B– 或 –B 等于 19</td></tr></tbody></table><ul><li><strong>前缀自增自减法（++a，–a）：</strong>先进行自增或自减运算，再进行表达式运算。</li><li><strong>后缀自增自减法（a++，a–）：</strong>先进性表达式运算，再进行自增或自减运算。</li></ul><h2 id="关系运算符-1"><a href="#关系运算符-1" class="headerlink" title="关系运算符"></a>关系运算符</h2><table><thead><tr><th align="left">运算符</th><th align="center">描述</th><th align="center">例子（A&#x3D;10,B&#x3D;20）</th></tr></thead><tbody><tr><td align="left">&#x3D;&#x3D;</td><td align="center">检查如果两个操作数的值是否相等，如果相等则条件为真。</td><td align="center">（A &#x3D;&#x3D; B）为假。</td></tr><tr><td align="left">!&#x3D;</td><td align="center">检查如果两个操作数的值是否相等，如果值不相等则条件为真。</td><td align="center">(A !&#x3D; B) 为真。</td></tr><tr><td align="left">&gt;</td><td align="center">检查左操作数的值是否大于右操作数的值，如果是那么条件为真。</td><td align="center">（A&gt; B）为假。</td></tr><tr><td align="left">&lt;</td><td align="center">检查左操作数的值是否小于右操作数的值，如果是那么条件为真。</td><td align="center">（A &lt;B）为真。</td></tr><tr><td align="left">&gt;&#x3D;</td><td align="center">检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。</td><td align="center">（A&gt; &#x3D; B）为假。</td></tr><tr><td align="left">&lt;&#x3D;</td><td align="center">检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。</td><td align="center">（A &lt;&#x3D; B）为真。</td></tr></tbody></table><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>位运算符，应用于整数类型(int)，长整型(long)，短整型(short)，字符型(char)，和字节型(byte)等类型。</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A = <span class="number">0011</span> <span class="number">1100</span></span><br><span class="line">B = <span class="number">0000</span> <span class="number">1101</span></span><br><span class="line">-----------------</span><br><span class="line">A&amp;B = <span class="number">0000</span> <span class="number">1100</span></span><br><span class="line">A | B = <span class="number">0011</span> <span class="number">1101</span></span><br><span class="line">A ^ B = <span class="number">0011</span> <span class="number">0001</span></span><br><span class="line">~A= <span class="number">1100</span> <span class="number">0011</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">操作符</th><th align="center">描述</th><th align="center">例子（A&#x3D;60，B&#x3D;13）</th></tr></thead><tbody><tr><td align="left">＆</td><td align="center">如果相对应位都是1，则结果为1，否则为0</td><td align="center">（A＆B），得到12，即0000 1100</td></tr><tr><td align="left">|</td><td align="center">如果相对应位都是 0，则结果为 0，否则为 1</td><td align="center">（A | B）得到61，即 0011 1101</td></tr><tr><td align="left">^</td><td align="center">如果相对应位值相同，则结果为0，否则为1</td><td align="center">（A ^ B）得到49，即 0011 0001</td></tr><tr><td align="left">〜</td><td align="center">按位取反运算符翻转操作数的每一位，即0变成1，1变成0。</td><td align="center">（〜A）得到-61，即1100 0011</td></tr><tr><td align="left">&lt;&lt;</td><td align="center">按位左移运算符。左操作数按位左移右操作数指定的位数。</td><td align="center">A &lt;&lt; 2得到240，即 1111 0000</td></tr><tr><td align="left">&gt;&gt;</td><td align="center">按位右移运算符。左操作数按位右移右操作数指定的位数。</td><td align="center">A &gt;&gt; 2得到15即 1111</td></tr><tr><td align="left">&gt;&gt;&gt;</td><td align="center">按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。</td><td align="center">A&gt;&gt;&gt;2得到15即0000 1111</td></tr></tbody></table><p>当使用与逻辑运算符时，在两个操作数都为true时，结果才为true，但是当得到第一个操作为false时，其结果就必定是false，这时候就<strong>不会再判断第二个操作了</strong>。</p><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><table><thead><tr><th align="center">操作符</th><th align="center">描述</th><th align="center">例子</th></tr></thead><tbody><tr><td align="center">&#x3D;</td><td align="center">简单的赋值运算符，将右操作数的值赋给左侧操作数</td><td align="center">C &#x3D; A + B将把A + B得到的值赋给C</td></tr><tr><td align="center">+ &#x3D;</td><td align="center">加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</td><td align="center">C + &#x3D; A等价于C &#x3D; C + A</td></tr><tr><td align="center">- &#x3D;</td><td align="center">减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</td><td align="center">C - &#x3D; A等价于C &#x3D; C - A</td></tr><tr><td align="center">* &#x3D;</td><td align="center">乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</td><td align="center">C * &#x3D; A等价于C &#x3D; C * A</td></tr><tr><td align="center">&#x2F; &#x3D;</td><td align="center">除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</td><td align="center">C &#x2F; &#x3D; A，C 与 A 同类型时等价于 C &#x3D; C &#x2F; A</td></tr><tr><td align="center">（％）&#x3D;</td><td align="center">取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数</td><td align="center">C％&#x3D; A等价于C &#x3D; C％A</td></tr><tr><td align="center">&lt;&lt; &#x3D;</td><td align="center">左移位赋值运算符</td><td align="center">C &lt;&lt; &#x3D; 2等价于C &#x3D; C &lt;&lt; 2</td></tr><tr><td align="center">&gt;&gt; &#x3D;</td><td align="center">右移位赋值运算符</td><td align="center">C &gt;&gt; &#x3D; 2等价于C &#x3D; C &gt;&gt; 2</td></tr><tr><td align="center">＆&#x3D;</td><td align="center">按位与赋值运算符</td><td align="center">C＆&#x3D; 2等价于C &#x3D; C＆2</td></tr><tr><td align="center">^ &#x3D;</td><td align="center">按位异或赋值操作符</td><td align="center">C ^ &#x3D; 2等价于C &#x3D; C ^ 2</td></tr><tr><td align="center">| &#x3D;</td><td align="center">按位或赋值操作符</td><td align="center">C | &#x3D; 2等价于C &#x3D; C | 2</td></tr></tbody></table><h2 id="条件运算符（-）"><a href="#条件运算符（-）" class="headerlink" title="条件运算符（?:）"></a>条件运算符（?:）</h2><p>条件运算符也被称为三元运算符。该运算符有3个操作数，并且需要判断布尔表达式的值。该运算符的主要是决定哪个值应该赋值给变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">variable</span> <span class="variable">x</span> <span class="operator">=</span> (expression) ? value <span class="keyword">if</span> <span class="literal">true</span> : value <span class="keyword">if</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="intanceof运算符"><a href="#intanceof运算符" class="headerlink" title="intanceof运算符"></a>intanceof运算符</h2><p>该运算符用于操作对象实例，<strong>检查该对象是否是一个特定类型（类类型或接口类型）</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">( Object reference variable ) <span class="keyword">instanceof</span>  (class/<span class="keyword">interface</span> <span class="title class_">type</span>)</span><br></pre></td></tr></table></figure><p>如果运算符左侧变量所指的对象，是操作符右侧类或接口(class&#x2F;interface)的一个对象，那么结果为真。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;James&quot;</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> name <span class="keyword">instanceof</span> String; <span class="comment">// 由于 name 是 String 类型，所以返回真</span></span><br></pre></td></tr></table></figure><p>如果被比较的对象兼容于右侧类型,该运算符仍然返回true。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">extends</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">      <span class="type">Vehicle</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">      <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span>  a <span class="keyword">instanceof</span> Car;</span><br><span class="line">      System.out.println(result);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java运算符优先级"><a href="#Java运算符优先级" class="headerlink" title="Java运算符优先级"></a>Java运算符优先级</h2><table><thead><tr><th align="left">类别</th><th align="left">操作符</th><th align="center">关联性</th></tr></thead><tbody><tr><td align="left">后缀</td><td align="left">() [] . (点操作符)</td><td align="center">左到右</td></tr><tr><td align="left">一元</td><td align="left">expr++ expr–</td><td align="center">从左到右</td></tr><tr><td align="left">一元</td><td align="left">++expr –expr + - ～ ！</td><td align="center">从右到左</td></tr><tr><td align="left">乘性</td><td align="left">* &#x2F;％</td><td align="center">左到右</td></tr><tr><td align="left">加性</td><td align="left">+ -</td><td align="center">左到右</td></tr><tr><td align="left">移位</td><td align="left">&gt;&gt; &gt;&gt;&gt;  &lt;&lt;</td><td align="center">左到右</td></tr><tr><td align="left">关系</td><td align="left">&gt; &gt;&#x3D; &lt; &lt;&#x3D;</td><td align="center">左到右</td></tr><tr><td align="left">相等</td><td align="left">&#x3D;&#x3D; !&#x3D;</td><td align="center">左到右</td></tr><tr><td align="left">按位与</td><td align="left">＆</td><td align="center">左到右</td></tr><tr><td align="left">按位异或</td><td align="left">^</td><td align="center">左到右</td></tr><tr><td align="left">按位或</td><td align="left">|</td><td align="center">左到右</td></tr><tr><td align="left">逻辑与</td><td align="left">&amp;&amp;</td><td align="center">左到右</td></tr><tr><td align="left">逻辑或</td><td align="left">| |</td><td align="center">左到右</td></tr><tr><td align="left">条件</td><td align="left">？：</td><td align="center">从右到左</td></tr><tr><td align="left">赋值</td><td align="left">&#x3D; + &#x3D; - &#x3D; * &#x3D; &#x2F; &#x3D;％&#x3D; &gt;&gt; &#x3D; &lt;&lt; &#x3D;＆&#x3D; ^ &#x3D; | &#x3D;</td><td align="center">从右到左</td></tr><tr><td align="left">逗号</td><td align="left">，</td><td align="center">左到右</td></tr></tbody></table><h1 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h1><ul><li><p>为了更好地组织类，Java提供了包机制，用于区别类的命名空间。</p></li><li><p>语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pkg1[. pkg2[. pkg3...]];</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>一般利用公司域名倒置作为包名</strong></p></li><li><p>为了能够使用某一个包的成员，我们需要在Java程序中明确导入该包。使用import语句可完成此功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> package1[.package2...].(classname|*)</span><br></pre></td></tr></table></figure><p>*是通配符，会导入这个包下所有的类</p></li></ul><h1 id="JavaDoc"><a href="#JavaDoc" class="headerlink" title="JavaDoc"></a>JavaDoc</h1><ul><li><p>javadoc命令是用来生成自己API文档的，可以将一种自定的注释信息生成帮助文档</p></li><li><p>参数信息</p><ul><li>@author    作者名</li><li>@version    版本号</li><li>@since    指明需要最早使用的jdk版本</li><li>@param    参数名</li><li>@return    返回值情况</li><li>@throws    异常抛出情况</li></ul></li><li><p>可以加在类或方法上面</p></li><li><p>可以在命令行输入代码生成doc文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javadoc -encoding UTF-8 -charset UTF-8 Doc.java</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JDK、JRE、JVM&quot;&gt;&lt;a href=&quot;#JDK、JRE、JVM&quot; class=&quot;headerlink&quot; title=&quot;JDK、JRE、JVM&quot;&gt;&lt;/a&gt;JDK、JRE、JVM&lt;/h1&gt;&lt;p&gt;JDK：Java Development Kit，包含了JRE和JV</summary>
      
    
    
    
    <category term="Java Learning" scheme="http://example.com/categories/Java-Learning/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="http://example.com/2022/03/25/Markdown%E8%AF%AD%E6%B3%95/"/>
    <id>http://example.com/2022/03/25/Markdown%E8%AF%AD%E6%B3%95/</id>
    <published>2022-03-25T09:59:31.000Z</published>
    <updated>2022-04-18T14:18:42.531Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown学习"><a href="#Markdown学习" class="headerlink" title="Markdown学习"></a>Markdown学习</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>标题用 <em><strong>#+标题</strong></em>（中间要有空格）回车生成，有六级标题，一个#是一级标题，六#是六级标题。</p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>在文段内容，两边各加**就可以变成<strong>粗体</strong>，两边各加*就可以变成<em>斜体</em>，加***就会<em><strong>加粗斜体</strong></em>。在两边各加~~就会有<del>中间划线</del>的效果。</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote><p>引用效果 在开头加 &gt; 空格，表示语句是被引用的。</p></blockquote><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><hr><p>输入三个-再回车</p><hr><p>输入三个*再回车</p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>输入![图片的名字](图片的路径) </p><p><img src="keep/source/images/star.gif" data-original="/2022/03/25/Markdown%E8%AF%AD%E6%B3%95/picture.png">  </p><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p><a class="link" href="https://wrinta.github.io/">wrinta<i class="fas fa-external-link-alt"></i></a></p><p>[链接的名字](网址)</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>输入数字英语句号空格，回车会出下一个。</p><ol><li>R</li><li>int</li><li>a</li></ol><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p>输入-再空格</p><ul><li>a</li><li>int</li><li>R</li></ul><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>Typora可以通过鼠标右键的点击直接增加表格。</p><p>通过|符号可以实现表格的生成，打出表头，用|分隔每一栏(开始和结尾也要有|)</p><table><thead><tr><th>名字</th><th align="center">性别</th><th align="center">生日</th></tr></thead><tbody><tr><td>小狗</td><td align="center">男</td><td align="center">2111&#x2F;11&#x2F;1</td></tr></tbody></table><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>插入`&#96;&#96;回车表示要插入代码，右下角可以选择语言</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello world!&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Markdown学习&quot;&gt;&lt;a href=&quot;#Markdown学习&quot; class=&quot;headerlink&quot; title=&quot;Markdown学习&quot;&gt;&lt;/a&gt;Markdown学习&lt;/h1&gt;&lt;h2 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="Markdown" scheme="http://example.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>小白搭建博客教程</title>
    <link href="http://example.com/2021/07/17/%E5%B0%8F%E7%99%BD%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
    <id>http://example.com/2021/07/17/%E5%B0%8F%E7%99%BD%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/</id>
    <published>2021-07-17T07:40:00.000Z</published>
    <updated>2021-07-19T00:19:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h1><p>安装博客前，电脑需要安装node.js，git。并且要在GitHub上建立一个仓库</p><p><img src="keep/source/images/star.gif" data-original="/2021/07/17/%E5%B0%8F%E7%99%BD%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/newrepository.png"></p><p>如图所示，yourname是你的名字，要和你的GitHub名字完全一样，比如我是wrinta，我的Repository name那里填的就是wrinta.github.io，下面的Add a README file也要记得勾选，然后就可以创建仓库了</p><p><img src="keep/source/images/star.gif" data-original="/2021/07/17/%E5%B0%8F%E7%99%BD%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/build.png"></p><p>进入刚刚我们新建的仓库，点击Settings，找到Pages，点击Choose a theme随便选择一个主题，过一会他会提示你可以通过域名访问啦</p><p><img src="keep/source/images/star.gif" data-original="/2021/07/17/%E5%B0%8F%E7%99%BD%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/choosetheme.png"></p><p>点击那个链接，出现的页面效果就是你刚刚随意选择的主题样式。觉得丑没关系，我们后面可以配置自己喜欢的主题。</p><h1 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h1><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>在自己想要存放自己博客相关文件的目录下新建一个文件夹，如 D:\study\blog，进入目录，右键Git Bash Here，打开git的控制台窗口（以后我们的操作都在git控制台中进行）</p><p>在该目录下输入 npm i hexo-cli -g 安装Hexo，会有几个报错，不用管它，安装完后输入 hexo -v 验证Hexo是否成功安装</p><p>输入 hexo init 初始化文件，有一些npm的插件可以在后面需要时按需安装。</p><p>输入 hexo g 生成静态网页，输入 hexo s 打开本地的服务器，浏览器打开<a class="link" href="http://localhost:4000/">http://localhost:4000<i class="fas fa-external-link-alt"></i></a>     就可以看到博客啦。后面配置文件和主题时，可以通过同样的方式先在本地预览哟。预览完成后可以通过ctrl +c关闭本地的服务器。</p><h2 id="连接GitHub和本地"><a href="#连接GitHub和本地" class="headerlink" title="连接GitHub和本地"></a>连接GitHub和本地</h2><p>打开 git bash ，输入下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;username&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;user email&quot;</span></span><br></pre></td></tr></table></figure><p>生成SSH key，中间一直回车就好了，记得出现y&#x2F;n时输入y再回车：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;user email&quot;</span></span><br></pre></td></tr></table></figure><p>查看SSH key，复制内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>打开GitHub，在头像下面点settings，再点击SSH and GPG keys，新建一个SSH，取一个自己喜欢的名字，将刚刚复制的内容粘进去，然后保存。</p><p>输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果如下图所示，出现了你的用户名，那就成功啦！</p><p><img src="keep/source/images/star.gif" data-original="/2021/07/17/%E5%B0%8F%E7%99%BD%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/ssh.png"></p><p>还差一步，打开博客根目录下的_config.yml文件，这个是博客的配置文件，修改deploy</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:wrinta/wrinta.github.io.git</span></span><br><span class="line">  <span class="comment">#这里把名字改成你的名字</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span> <span class="comment">#分支改成自己的分支名，比如master</span></span><br></pre></td></tr></table></figure><h1 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h1><p>首先在博客的根目录下面打开git bash，安装扩展 npm i hexo-deployer-git</p><p>打开博客根目录的配置文件_config.yml，将 post_asset_folder改成true，如图所示：</p><p><img src="keep/source/images/star.gif" data-original="/2021/07/17/%E5%B0%8F%E7%99%BD%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/asset.png"></p><p>输入 hexo new post “article title”，新建一篇文章，在博客的根目录下，进入&#x2F;source&#x2F;_posts，可以看到刚刚新建的文件，其中.md文件是你写博客内容的地方，文件夹用来放你在同名.md文件里要用的图片。</p><p>编写完后，输入 hexo g 生成静态文件，可以输入 hexo s 本地预览，然后输入 hexo d 。</p><p>如果 hexo d 后报错 ERROR Deployer not found: git 输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装准备&quot;&gt;&lt;a href=&quot;#安装准备&quot; class=&quot;headerlink&quot; title=&quot;安装准备&quot;&gt;&lt;/a&gt;安装准备&lt;/h1&gt;&lt;p&gt;安装博客前，电脑需要安装node.js，git。并且要在GitHub上建立一个仓库&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;kee</summary>
      
    
    
    
    <category term="hexo" scheme="http://example.com/categories/hexo/"/>
    
    
    <category term="blog build" scheme="http://example.com/tags/blog-build/"/>
    
  </entry>
  
  <entry>
    <title>C program language</title>
    <link href="http://example.com/2021/07/17/C-program-language/"/>
    <id>http://example.com/2021/07/17/C-program-language/</id>
    <published>2021-07-17T06:26:19.000Z</published>
    <updated>2021-07-17T07:03:13.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="1c01c2ba374cd2e5db504c46ea7a6690f04b3a957f22aebfc8c7f0347ff8458b">52b957e64bf07e3f6f387f83f112f606a00cbcea95df80b68037ad6e34ae86b2d71d3c81abcbc1175f2502d364c86477724137c24bc6337b2efafea60055572eaf49b76785aa4e0152bc0668da97f4b374a505e4926c0c47f4e7561600d714405ed3ea923de8946130422aa8d4193a8f0e09ce84fba5ab603392e109f447c14ca87fce276bfb4830484f7934a6521592e1131eab2430a46fdd6d37f7610544d5dee4bad730e8d6c16d3018f178ebe3dc22185d97a44f273cc47c3264bbe2f312a4e18cce55b86973a06113a4814978c8fcaea5d2f32551fbe06a0d36c9882105e7fda1c3ce0c4fdc158b29a84466fe19e6f2f667465d917b1dfea961de4de39b9edef8ede2018cecfe93ffc359208b57bcf3ae205927987a957c0b04e29d6f3fad2a7a5c4103552150d79f7045f33e3aed581b38618f5eb8706b165a1e1c3bc1aae70de2459b1d816815aee98db1817da50134a5eb0c305a02cc71b650d2c945e23eccc38251b83a5550d0c4e89aa1d00c39edb71720ded59e85930094388e63c4a48dcf6ab65fc29b1d5ecc710029ef01f4780500f2bbda5da1494aa8108a6bbe604c7cb3a4340de5cf2ccda5e925858108903544a316738141f3ccbf2bf560bfe2ef95ba03e912f2ec3de0a2befa3c401bd269de3fb590293e27433393aaf9aa195d83271d1eb3bba2272418c4d73dd012e39aa5ed3bc65f8f8c8f15656b85dc5c248eca217aadaa28c8e9576cbba80b525c14b2909f68cf4260231905314657c3899df5cd2bbc97f60b6699068b9883c5b6d23d425e4f7b8827f2b9da46453eeecfcef45fa92db069d988aa1997ff8a4da560c4c84220bb975828d87dfdd50b9b26bc5243086ae1541a43f60c569bc4074d5d906b3e0e38608ef600214e0245caffc0a45105fec70d245954fb646484f93946307ee90d8464c147826e976f3e6f57ba4b9d8dd5063f69f1ab33c2ce644363656ff79c56259b9c94cdcd7f37b4647c18f11547e998b85067d641579e2acbf82123f39e410497d0131e9747cd0aacd2bef1390ac94e0d8cef4cf254eb42b89b35e5b2f258bc3982811bce8f053844fe549de4b4a29c1934742d6534f211268503ae79051ce7e233ef863d8eec6f8bfd6ebfd92f668e697d87fc42c9110d5369943883f371afce164b45b0c0c266d87b5931a4746e069012bd128c32fab42cf540bb93e8507156246a59ee1b12cf91f4fe0d0fa927ae9a36466354304ad317724c85d69e25b6db7e06bd09772956913584721909039eaced79e67d5d600d4105c53f8651bcd82318575d220b143044c90b061a06eb178a021962545d37b918967ce6beaad684df9548107cdff0d7afed2994c8085e069512af0e2225f02bfb04009794a0b465b6af135064ebc1699e07b54a234c0b13888197a73c2a4bd663ec2d456a6d9857c432f862392c1c2a35f39f4c58e7a7a9096e64997554fea70a5e432524ec2cc2f50570871ffde35c580bfc9772c08a3f3b8615b06cab95cfa8d39e14a52a0ee1266ac5472957aa5e6877b60532553b8a0c5e94b66ad7fa8f98493a2891af96bdc86141a8490762f5c14e5940725941cba79b7e2e490b3d53e2ffa8ba9a25b830da10ba1e2e00137416fa5c6693e5319dce0dde17945723596495661616ef3e5f5427427dc19ba84f28a80521cfbfaf58d1380dbf4af7b2077d67dbbc59426b6f13e41c63d9af8b9236daccd566134cf416d13cc00a29da0a648fa07e71e124a2b023cdd14fed87be67f4445193fdfba97094b6018c72daec606337e23254d56b133aa559ad44cfbb222e551df47763b4842ae36452c4e9478c30f24325baf16598925bd5d8b08bcd7874de2d2d9c82f053cf29cd04109ee3845053bea962207a174e471734c40d148edba5492eea3c22e1d1402a0d267d7c4e24ceff0c73405afa7ed6649a2f288d519fafbc15067dea8e3c0150ea4a9c183a29e9ee61f502c5249bbc28f758624b18dd08f8c37c3f77bdf0d2bb9fb528d172f140af6a1f638fcdb3c7723679badf2e0ce35f51fd5aaf030c6f44ae31862ada8f3f492e6c854add8f1b50d8886984aa68182cfe9abbc0e6ef1c002c1289f3b886a05544b6fbe52b81304330b72ff5ec2b0928309b30ebc9157e41394c06d74627edf1c90f65fdd566f4b88375fd8479fef40a685b4f755f5e677dc72c974ed422eef1a92dd5cf83834192657337fea23b152af1225fd74bd1e21c6e77e010f00412ffeb8f5fd31366d8245872de92ac188586e21878380891b2aac929623856cb2438a882d46c4fc3c1b7a6012f34696127fa4236c794ee48c940131558292fe5e7cded196f571f68e58ecf377c97bb1603b2f4b0b529027e868f311f5ebb1f1cb549087f09a73cce10b392c328f19eb918539fbabb58f73a7262266e227d213801c63609ab33f079ac870c2c7bf327d777f0122bd8f8863e902ec9891ad0bfe5a78dfdbbd1f4ceeaf33b1d8ffdd9c67d320c0f33d35e577640de3b377f6518983607eff1bdbb696d227df39c5491f4b68e461e8ef335c938ad4f0372d3fabb7898284942477aa5d45beec09e498915324369d6cc334a741a8046a0a114c93dd2918f66cd07a45928b6d6de2cb1b08e497096b32ee6cf84e91b67c8a9593fe7cbf3cd434742b9fda629423ec438f755945561024e4c07f3b91f4085d110173c24be266a0abd06500acec0a7143c9a793590b8c9da738c1faccf52a0b2ea5d58f2aafc4eff521586d7ee11bc83efb9093048caed6ca3af638bb40958e23c38fe472dda9ec0ec0626893a79ae91b6f0d68a143e7b2f18f75eb0d9b203d2ce34cfdcd9704a279507e7209268bfa52e3d0fd04ed5c24ec46f09ec0fd5e38d3ae1ff5f4aeafd8fb8dd98f05f6542805f5549fd2a0c649109d8fe3161661ad4a48245ee1f6290f64129d9e06ca0b03e11a4d6dfaf1dbef88a42732477bd25ff9185eec0a7e86c0c77418e9213ed1e742135ef1a98229315c30393765b1c82a598f864e54854d4725caa0bd71ef607517299623c0ff9c15bdf3b1019969e2851a1440ec8950e6c63b903c18f34ef41a19739d47d02fa470b94210ed7ce1f888c8df9fe289ecbfed137e41270fd144cc0de18936fb6c7690f4e2e6349ada5cdd1f5e57ed21e0a0ff2b634c6fd3911c3fb1b8ab47f3d16526658678b635c6c1c3b51f58c62b3f3b2397b5c4144f4feb98c80d7cff1a5905e9b0e04dfff9cd26941fdd3b5946bcfaa7a8c5437e29ad223a29cba5d493eb14151b8e0eb9c0533c5ae80b30027d2c7c81435dd5d6790c66d15e88a07e6109eca447396078a50264d65d884076efa7a78576dd36e3df66bcf81e6848a14e293770eaeeb36f4b9f124a982d8b62392c4d0e45f11c728cba594131a4f9223554effe44dfacb37b4822f7623fd1eb73377b6b2237713ad199c750f1db9f2204ac9c1db36e9d144ee708c19abd566395640ffcab22d5d0deb971c8f3b217f4b1002735b589e4dc59891ba81fcfbdd43370b46f50b12d2e1d4bc5ddb2af131ff5d784dcb7b9d2c7ffdb377aa77b78c2204ec0d769920729420ac736e3e2f945affa069954f3268aa5137224e1958d9604267be7a93849a9c6aaa285e9eb2b05a2e9e63c059753c58d30906d3b32315656e3932685190a51a75fc9cb9c7b44a5139cba8a51ce51df3f941c19a60e9dd5b24a54e1d024aaf5ecfa0d4fdda6577bd52df8c86a56cf9768091056a1448ea65e04b75114173be6b005ac9ef79e22ddadd224b6b7e96137f4d1c14e87e4124ea66f42cdfcf79c848bc87373907a49f56efb9072b34677f62fdb39740b120d55413c8a88cb5e91706ca0f4b0dec68074cb50291fc952237d6a8bd1fa9061b272f036606ff3c02c1464f42923829bb58844a945d9569de94c928a1d2fae5f91bcccbb7a71ab476072fc3c94f7b3eb83a28d89f53cdd9d29c2c30f4e80238ce6833599f14328142c047fd7ef95dd6a27ea6fbaca051379df160c94cff6ca203a0d530152d70c7ea4bc017140ed311</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="reviews" scheme="http://example.com/categories/reviews/"/>
    
    
    <category term="C" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>JQuery对列表的增删改以及遍历</title>
    <link href="http://example.com/2021/07/16/JQuery%E5%AF%B9%E5%88%97%E8%A1%A8%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E4%BB%A5%E5%8F%8A%E9%81%8D%E5%8E%86/"/>
    <id>http://example.com/2021/07/16/JQuery%E5%AF%B9%E5%88%97%E8%A1%A8%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E4%BB%A5%E5%8F%8A%E9%81%8D%E5%8E%86/</id>
    <published>2021-07-16T12:51:20.000Z</published>
    <updated>2021-07-17T00:58:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>使用JQuery对html中的ul进行li的增删改以及遍历查看</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="html部分"><a href="#html部分" class="headerlink" title="html部分"></a>html部分</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;addItem&quot;</span>&gt;</span>添加元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;deleteItem&quot;</span>&gt;</span>删除元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;traversal&quot;</span>&gt;</span>显示列表<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入修改第几项&quot;</span> <span class="attr">id</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;修改的值&quot;</span> <span class="attr">id</span>=<span class="string">&quot;value&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;modifyItem&quot;</span>&gt;</span>改变列表项<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span>遍历结果：</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;res&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="script部分"><a href="#script部分" class="headerlink" title="script部分"></a>script部分</h2><h3 id="list增加元素："><a href="#list增加元素：" class="headerlink" title="list增加元素："></a>list增加元素：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#addItem&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> newItem = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                newItem = <span class="string">&quot;&lt;li&gt;&quot;</span> + i + <span class="string">&quot;&lt;/li&gt;&quot;</span>;</span><br><span class="line">                i += <span class="number">1</span>;</span><br><span class="line">                $(<span class="string">&quot;ul&quot;</span>).<span class="title function_">append</span>(newItem);</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure><h3 id="list删除元素："><a href="#list删除元素：" class="headerlink" title="list删除元素："></a>list删除元素：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#deleteItem&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> tmp = $(<span class="string">&quot;ul&quot;</span>).<span class="title function_">html</span>().<span class="title function_">toString</span>();</span><br><span class="line">                <span class="keyword">let</span> location = tmp.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;&lt;li&gt;&#x27;</span>);</span><br><span class="line">                $(<span class="string">&#x27;ul&#x27;</span>).<span class="title function_">html</span>(tmp.<span class="title function_">slice</span>(<span class="number">0</span>, location));</span><br><span class="line">                i -= <span class="number">1</span>;</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure><h3 id="list修改特定项的元素："><a href="#list修改特定项的元素：" class="headerlink" title="list修改特定项的元素："></a>list修改特定项的元素：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#modifyItem&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> index = $(<span class="string">&quot;#index&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">                <span class="keyword">let</span> value = $(<span class="string">&quot;#value&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">                $(<span class="string">&quot;li&quot;</span>).<span class="title function_">eq</span>(index - <span class="number">1</span>).<span class="title function_">text</span>(value);</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure><h3 id="list遍历："><a href="#list遍历：" class="headerlink" title="list遍历："></a>list遍历：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#traversal&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> res = [];</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; $(<span class="string">&quot;li&quot;</span>).<span class="property">length</span>; j++) &#123;</span><br><span class="line">                    res.<span class="title function_">push</span>($(<span class="string">&quot;li&quot;</span>).<span class="title function_">eq</span>(j).<span class="title function_">text</span>())</span><br><span class="line">                &#125;</span><br><span class="line">                $(<span class="string">&quot;#res&quot;</span>).<span class="title function_">text</span>(res);</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure><h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> n = <span class="number">6</span>,</span></span><br><span class="line"><span class="language-javascript">                i = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> text = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (i; i &lt; n; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                text += <span class="string">&quot;&lt;li&gt;&quot;</span> + i + <span class="string">&quot;&lt;/li&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;ul&quot;</span>).<span class="title function_">append</span>(text);</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;#addItem&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> newItem = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                newItem = <span class="string">&quot;&lt;li&gt;&quot;</span> + i + <span class="string">&quot;&lt;/li&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                i += <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">                $(<span class="string">&quot;ul&quot;</span>).<span class="title function_">append</span>(newItem);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;#deleteItem&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> tmp = $(<span class="string">&quot;ul&quot;</span>).<span class="title function_">html</span>().<span class="title function_">toString</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> location = tmp.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;&lt;li&gt;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                $(<span class="string">&#x27;ul&#x27;</span>).<span class="title function_">html</span>(tmp.<span class="title function_">slice</span>(<span class="number">0</span>, location));</span></span><br><span class="line"><span class="language-javascript">                i -= <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;#traversal&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> res = [];</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; $(<span class="string">&quot;li&quot;</span>).<span class="property">length</span>; j++) &#123;</span></span><br><span class="line"><span class="language-javascript">                    res.<span class="title function_">push</span>($(<span class="string">&quot;li&quot;</span>).<span class="title function_">eq</span>(j).<span class="title function_">text</span>())</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                $(<span class="string">&quot;#res&quot;</span>).<span class="title function_">text</span>(res);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;#modifyItem&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> index = $(<span class="string">&quot;#index&quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> value = $(<span class="string">&quot;#value&quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">                $(<span class="string">&quot;li&quot;</span>).<span class="title function_">eq</span>(index - <span class="number">1</span>).<span class="title function_">text</span>(value);</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>July 16th<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;addItem&quot;</span>&gt;</span>添加元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;deleteItem&quot;</span>&gt;</span>删除元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;traversal&quot;</span>&gt;</span>显示列表<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入修改第几项&quot;</span> <span class="attr">id</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;修改的值&quot;</span> <span class="attr">id</span>=<span class="string">&quot;value&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;modifyItem&quot;</span>&gt;</span>改变列表项<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span>遍历结果：</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;res&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;使用JQuery对html中的ul进行li的增删改以及遍历查看&lt;/p&gt;
&lt;h1 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; </summary>
      
    
    
    
    <category term="HTML" scheme="http://example.com/categories/HTML/"/>
    
    
    <category term="JQuery" scheme="http://example.com/tags/JQuery/"/>
    
  </entry>
  
  <entry>
    <title>Overwatch</title>
    <link href="http://example.com/2021/07/16/overwatch/"/>
    <id>http://example.com/2021/07/16/overwatch/</id>
    <published>2021-07-16T03:01:29.000Z</published>
    <updated>2022-03-26T08:40:12.540Z</updated>
    
    <content type="html"><![CDATA[<p>Hello Overwatch!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hello Overwatch!&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="overwatch" scheme="http://example.com/tags/overwatch/"/>
    
  </entry>
  
</feed>
